<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="special__functions_8cpp" kind="file" language="C++">
    <compoundname>special_functions.cpp</compoundname>
    <includes local="no">cmath</includes>
    <includes refid="special__functions_8h" local="yes">./special_functions.h</includes>
    <incdepgraph>
      <node id="3">
        <label>./special_functions.h</label>
        <link refid="special__functions_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cmath</label>
      </node>
      <node id="5">
        <label>./definitions.h</label>
        <link refid="definitions_8h"/>
      </node>
      <node id="4">
        <label>../_definitions/types.h</label>
        <link refid="types_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/sia/work/github/imate/imate/_c_trace_estimator/special_functions.cpp</label>
        <link refid="special__functions_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="special__functions_8cpp_1a8df1c56975179584e0485c5ddcb1e71b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double sign</definition>
        <argsstring>(const double x)</argsstring>
        <name>sign</name>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>sign function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/github/imate/imate/_c_trace_estimator/special_functions.cpp" line="34" column="8" bodyfile="/home/sia/work/github/imate/imate/_c_trace_estimator/special_functions.cpp" bodystart="34" bodyend="37"/>
        <referencedby refid="special__functions_8cpp_1a44303dd28715725483ae9bb6e214fc17" compoundref="special__functions_8cpp" startline="63" endline="104">erf_inv</referencedby>
      </memberdef>
      <memberdef kind="function" id="special__functions_8cpp_1a44303dd28715725483ae9bb6e214fc17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double erf_inv</definition>
        <argsstring>(const double x)</argsstring>
        <name>erf_inv</name>
        <param>
          <type>const double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para><ref refid="classInverse" kindref="compound">Inverse</ref> error function. </para>
        </briefdescription>
        <detaileddescription>
<para>The function inverse is found based on Newton method using the evaluation of the error function <computeroutput>erf</computeroutput> from standard math library and its derivative. The Newton method here uses two refinements.</para>
<para>For further details on the algorithm, refer to: <ulink url="http://www.mimirgames.com/articles/programming/approximations-">http://www.mimirgames.com/articles/programming/approximations-</ulink> of-the-inverse-error-function/</para>
<para>The accuracy of this method for the whole input interval of <computeroutput></computeroutput>[-1, 1] is in the order of 1e-15 compared to <computeroutput>scipy.special.erfinv</computeroutput> function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Input</parametername>
</parameternamelist>
<parameterdescription>
<para>value, a float number between -1 to 1.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The inverse error function ranging from -INFINITY to INFINITY. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/github/imate/imate/_c_trace_estimator/special_functions.cpp" line="63" column="8" bodyfile="/home/sia/work/github/imate/imate/_c_trace_estimator/special_functions.cpp" bodystart="63" bodyend="104"/>
        <references refid="special__functions_8cpp_1a8df1c56975179584e0485c5ddcb1e71b" compoundref="special__functions_8cpp" startline="34" endline="37">sign</references>
        <referencedby refid="classConvergenceTools_1a88ae9fc09aa9af950d41cf803934c028" compoundref="convergence__tools_8cpp" startline="256" endline="376">ConvergenceTools&lt; DataType &gt;::average_estimates</referencedby>
        <referencedby refid="classConvergenceTools_1a5a0602ee4f933a4521ccf9ea137dd191" compoundref="convergence__tools_8cpp" startline="95" endline="194">ConvergenceTools&lt; DataType &gt;::check_convergence</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-FileCopyrightText:<sp/>Copyright<sp/>2021,<sp/>Siavash<sp/>Ameli<sp/>&lt;sameli@berkeley.edu&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-FileType:<sp/>SOURCE</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>license<sp/>found<sp/>in<sp/>the<sp/>LICENSE.txt<sp/>file<sp/>in<sp/>the<sp/>root</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>directory<sp/>of<sp/>this<sp/>source<sp/>tree.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Headers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Before<sp/>including<sp/>cmath,<sp/>define<sp/>_USE_MATH_DEFINES.<sp/>This<sp/>is<sp/>only<sp/>required<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>define<sp/>the<sp/>math<sp/>constants<sp/>like<sp/>M_PI,<sp/>etc,<sp/>in<sp/>win32<sp/>operating<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(WIN32)<sp/>||<sp/>defined(_WIN32)<sp/>||<sp/>defined(__WIN32)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>!defined(__CYGWIN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>_USE_MATH_DEFINES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sqrt,<sp/>log,<sp/>exp,<sp/>erf,<sp/>INFINITY,<sp/>M_PI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="special__functions_8h" kindref="compound">./special_functions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>====</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>====</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="special__functions_8cpp_1a8df1c56975179584e0485c5ddcb1e71b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="special__functions_8cpp_1a8df1c56975179584e0485c5ddcb1e71b" kindref="member">sign</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>0)<sp/>-<sp/>(x<sp/>&lt;<sp/>0);</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>erf<sp/>inv</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="special__functions_8cpp_1a44303dd28715725483ae9bb6e214fc17" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="special__functions_8cpp_1a44303dd28715725483ae9bb6e214fc17" kindref="member">erf_inv</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>extreme<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x<sp/>==<sp/>1.0)<sp/>||<sp/>(x<sp/>==<sp/>-1.0))</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/><ref refid="special__functions_8cpp_1a8df1c56975179584e0485c5ddcb1e71b" kindref="member">sign</ref>(x)<sp/>*<sp/>INFINITY;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a[4]<sp/>=<sp/>{0.886226899,<sp/>-1.645349621,<sp/>0.914624893,<sp/>-0.140543331};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b[5]<sp/>=<sp/>{1.0,<sp/>-2.118377725,<sp/>1.442710462,<sp/>-0.329097515,<sp/>0.012229801};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c[4]<sp/>=<sp/>{-1.970840454,<sp/>-1.62490649,<sp/>3.429567803,<sp/>1.641345311};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d[3]<sp/>=<sp/>{1.0,<sp/>3.543889200,<sp/>1.637067800};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z<sp/>=<sp/><ref refid="special__functions_8cpp_1a8df1c56975179584e0485c5ddcb1e71b" kindref="member">sign</ref>(x)<sp/>*<sp/>x;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z<sp/>&lt;=<sp/>0.7)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x2<sp/>=<sp/>z<sp/>*<sp/>z;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>z<sp/>*<sp/>(((a[3]<sp/>*<sp/>x2<sp/>+<sp/>a[2])<sp/>*<sp/>x2<sp/>+<sp/>a[1])<sp/>*<sp/>x2<sp/>+<sp/>a[0]);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>/=<sp/>(((b[4]<sp/>*<sp/>x2<sp/>+<sp/>b[3])<sp/>*<sp/>x2<sp/>+<sp/>b[2])<sp/>*<sp/>x2<sp/>+<sp/>b[1])<sp/>*<sp/>x2<sp/>+<sp/>b[0];</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>sqrt(-log((1.0<sp/>-<sp/>z)<sp/>/<sp/>2.0));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>(((c[3]<sp/>*<sp/>y<sp/>+<sp/>c[2])<sp/>*<sp/>y<sp/>+<sp/>c[1])<sp/>*<sp/>y<sp/>+<sp/>c[0]);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>/=<sp/>((d[2]<sp/>*<sp/>y<sp/>+<sp/>d[1])<sp/>*<sp/>y<sp/>+<sp/>d[0]);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>r<sp/>*<sp/><ref refid="special__functions_8cpp_1a8df1c56975179584e0485c5ddcb1e71b" kindref="member">sign</ref>(x);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>z<sp/>=<sp/>z<sp/>*<sp/><ref refid="special__functions_8cpp_1a8df1c56975179584e0485c5ddcb1e71b" kindref="member">sign</ref>(x);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>two<sp/>lines<sp/>below<sp/>are<sp/>identical<sp/>and<sp/>repeated<sp/>for<sp/>double<sp/>refinement.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Comment<sp/>one<sp/>line<sp/>below<sp/>for<sp/>a<sp/>single<sp/>refinement<sp/>of<sp/>the<sp/>Newton<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>-=<sp/>(erf(r)<sp/>-<sp/>z)<sp/>/<sp/>((2.0<sp/>/<sp/>sqrt(M_PI))<sp/>*<sp/>exp(-r<sp/>*<sp/>r));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>-=<sp/>(erf(r)<sp/>-<sp/>z)<sp/>/<sp/>((2.0<sp/>/<sp/>sqrt(M_PI))<sp/>*<sp/>exp(-r<sp/>*<sp/>r));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/sia/work/github/imate/imate/_c_trace_estimator/special_functions.cpp"/>
  </compounddef>
</doxygen>
