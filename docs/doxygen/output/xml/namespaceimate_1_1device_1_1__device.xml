<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceimate_1_1device_1_1__device" kind="namespace" language="Python">
    <compoundname>imate::device::_device</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceimate_1_1device_1_1__device_1a650c26bfb939781eaf881d663f8373bf" prot="private" static="no" mutable="no">
        <type>list</type>
        <definition>list imate::device::_device.__all__</definition>
        <argsstring></argsstring>
        <name>__all__</name>
        <initializer>=  [&apos;<ref refid="namespaceimate_1_1device_1_1__device_1ad8a7aa1910ae556a9f58d353a18c138e" kindref="member">get_processor_name</ref>&apos;, &apos;<ref refid="namespaceimate_1_1device_1_1__device_1af9525e7a774a0f7dbecf38a643e7c78a" kindref="member">get_num_cpu_threads</ref>&apos;, &apos;<ref refid="namespaceimate_1_1device_1_1__device_1a283033b5b736587aab6d74929a2ace48" kindref="member">get_gpu_name</ref>&apos;,
           &apos;<ref refid="namespaceimate_1_1device_1_1__device_1a5c1da1b7a4bc6c2c778789b807eb27ca" kindref="member">get_num_gpu_devices</ref>&apos;, &apos;<ref refid="namespaceimate_1_1device_1_1__device_1a126773820a5a66414bf0ea1871672ef4" kindref="member">get_nvidia_driver_version</ref>&apos;,
           &apos;<ref refid="namespaceimate_1_1device_1_1__device_1ad1a771cb05a298184ba8ac805a3ce32a" kindref="member">restrict_to_single_processor</ref>&apos;]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/device/_device.py" line="19" column="1" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/device/_device.py" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceimate_1_1device_1_1__device_1ad8a7aa1910ae556a9f58d353a18c138e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def imate.device._device.get_processor_name</definition>
        <argsstring>()</argsstring>
        <name>get_processor_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Gets the model name of CPU processor.

Returns
-------

gpu_name : str
    Processor name

See Also
--------

imate.device.get_num_cpu_threads
imate.device.get_gpu_name
imate.info

Notes
-----

For `Linux`, this function parses the output of

::

    cat /proc/cpuino

For `macOS`, this function parses the output of

::

    sysctl -n machdep.cpu.brand_string

.. warning::

    For Windows operating system, this function does not get the full brand
    name of the cpu processor

Examples
--------

.. code-block:: python

    &gt;&gt;&gt; from imate.device import get_processor_name
    &gt;&gt;&gt; get_processor_name()
    &apos;Intel(R) Xeon(R) CPU E5-2623 v3 @ 3.00GHz&apos;
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/device/_device.py" line="28" column="1" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/device/_device.py" bodystart="28" bodyend="96"/>
        <referencedby refid="namespaceimate_1_1device_1_1__info_1a735794b84c8257928e00c262feebd599" compoundref="__info_8py" startline="27" endline="208">imate.device._info.info</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceimate_1_1device_1_1__device_1af9525e7a774a0f7dbecf38a643e7c78a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def imate.device._device.get_num_cpu_threads</definition>
        <argsstring>()</argsstring>
        <name>get_num_cpu_threads</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Returns the number of available CPU processor threads.

Returns
-------

num_threads : int
    Number of processor threads.

See Also
--------

imate.device.get_processor_name
imate.device.get_num_gpu_devices
imate.info

Notes
-----

The returned value is not the total number of CPU threads. Rather, the
number of available CPU threads that is allocated to the user is returned.
For instance, if on a device with `8` threads, only `2` threads are
allocated to a user, the return value of this function is `2`.

Examples
--------

.. code-block:: python

    &gt;&gt;&gt; from imate.device import get_num_cpu_threads
    &gt;&gt;&gt; get_num_cpu_threads()
    8
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/device/_device.py" line="97" column="1" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/device/_device.py" bodystart="97" bodyend="143"/>
        <referencedby refid="namespaceimate_1_1device_1_1__info_1a735794b84c8257928e00c262feebd599" compoundref="__info_8py" startline="27" endline="208">imate.device._info.info</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceimate_1_1device_1_1__device_1a283033b5b736587aab6d74929a2ace48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def imate.device._device.get_gpu_name</definition>
        <argsstring>()</argsstring>
        <name>get_gpu_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Gets the model name of GPU device.

Returns
-------

cpu_name : str
    GPU model name. If no GPU device is found, it returns ``&quot;not found&quot;``.

See Also
--------

imate.device.get_num_gpu_devices
imate.device.get_processor_name
imate.info

Notes
-----

This function parses the output of ``nvidia-smi`` command as

::

    nvidia-smi -a | grep -i &quot;Product Name&quot; -m 1 | grep -o &quot;:.*&quot; |cut -c 3-

The ``nvidia-smi`` command is part of `NVIDIA graphic driver`. See
:ref:`Install NVIDIA Graphic Driver &lt;install-graphic-driver&gt;` for further
details. If a graphic driver is not installed, this function returns
``&quot;not found&quot;``.

Examples
--------

.. code-block:: python

    &gt;&gt;&gt; from imate.device import get_gpu_name
    &gt;&gt;&gt; get_gpu_name()
    &apos;GeForce GTX 1080 Ti&apos;
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/device/_device.py" line="144" column="1" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/device/_device.py" bodystart="144" bodyend="219"/>
        <references refid="namespaceimate_1_1device_1_1__device_1a8d56eab5b48362c5e8cd17a2e1191d66" compoundref="__device_8py" startline="370" endline="404">imate.device._device._check_nvidia_smi</references>
        <referencedby refid="namespaceimate_1_1device_1_1__info_1a735794b84c8257928e00c262feebd599" compoundref="__info_8py" startline="27" endline="208">imate.device._info.info</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceimate_1_1device_1_1__device_1a5c1da1b7a4bc6c2c778789b807eb27ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def imate.device._device.get_num_gpu_devices</definition>
        <argsstring>()</argsstring>
        <name>get_num_gpu_devices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Returns the number of available GPU devices in multi-GPU platforms.

Returns
-------

num_gpu : int
    Number of GPU devices.

See Also
--------

imate.device.get_gpu_name
imate.device.get_num_cpu_threads
imate.info

Notes
-----

The returned value is not the total number of GPU devices on the machine.
Rather, the number of available GPU devices that is allocated to the user
is returned.

This function parses the output of ``nvidia-smi`` command by

::

    nvidia-smi --list-gpus | wc -l

The ``nvidia-smi`` command is part of `NVIDIA graphic driver`. See
:ref:`Install NVIDIA Graphic Driver &lt;install-graphic-driver&gt;` for further
details. If a graphic driver is not installed, this function returns `0`.

Examples
--------

.. code-block:: python

    &gt;&gt;&gt; from imate.device import get_num_gpu_devices
    &gt;&gt;&gt; get_num_gpu_devices()
    4
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/device/_device.py" line="220" column="1" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/device/_device.py" bodystart="220" bodyend="294"/>
        <references refid="namespaceimate_1_1device_1_1__device_1a8d56eab5b48362c5e8cd17a2e1191d66" compoundref="__device_8py" startline="370" endline="404">imate.device._device._check_nvidia_smi</references>
        <referencedby refid="namespaceimate_1_1device_1_1__info_1a735794b84c8257928e00c262feebd599" compoundref="__info_8py" startline="27" endline="208">imate.device._info.info</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceimate_1_1device_1_1__device_1a126773820a5a66414bf0ea1871672ef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def imate.device._device.get_nvidia_driver_version</definition>
        <argsstring>()</argsstring>
        <name>get_nvidia_driver_version</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Gets the NVIDIA graphic driver version.

Returns
-------

version : str
    The version number in the format &quot;DriverVersion.RuntimeVersion&quot;.

See Also
--------

imate.device.locate_cuda
imate.info

Notes
-----

This function parses the output of ``nvidia-smi`` command as

::

    nvidia-smi -q | grep -i &quot;Driver Version&quot; | grep -o &quot;:.*&quot; | cut -c 3-

The ``nvidia-smi`` command is part of `NVIDIA graphic driver`. See
:ref:`Install NVIDIA Graphic Driver &lt;install-graphic-driver&gt;` for further
details. If a graphic driver is not installed, this function returns
``&quot;not found&quot;``.

Examples
--------

.. code-block:: python

    &gt;&gt;&gt; from imate.device import get_nvidia_driver_version
    &gt;&gt;&gt; get_nvidia_driver_version()
    &apos;460.84&apos;
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/device/_device.py" line="295" column="1" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/device/_device.py" bodystart="295" bodyend="369"/>
        <references refid="namespaceimate_1_1device_1_1__device_1a8d56eab5b48362c5e8cd17a2e1191d66" compoundref="__device_8py" startline="370" endline="404">imate.device._device._check_nvidia_smi</references>
        <referencedby refid="namespaceimate_1_1device_1_1__info_1a735794b84c8257928e00c262feebd599" compoundref="__info_8py" startline="27" endline="208">imate.device._info.info</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceimate_1_1device_1_1__device_1a8d56eab5b48362c5e8cd17a2e1191d66" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def imate.device._device._check_nvidia_smi</definition>
        <argsstring>()</argsstring>
        <name>_check_nvidia_smi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Checks if the ``nvidia-smi`` command can connect to the NVIDIA device.

Returns
-------

status : bool
    If `True`, the output of ``nvidia-smi`` command is successful.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/device/_device.py" line="370" column="1" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/device/_device.py" bodystart="370" bodyend="404"/>
        <referencedby refid="namespaceimate_1_1device_1_1__device_1a283033b5b736587aab6d74929a2ace48" compoundref="__device_8py" startline="144" endline="219">imate.device._device.get_gpu_name</referencedby>
        <referencedby refid="namespaceimate_1_1device_1_1__device_1a5c1da1b7a4bc6c2c778789b807eb27ca" compoundref="__device_8py" startline="220" endline="294">imate.device._device.get_num_gpu_devices</referencedby>
        <referencedby refid="namespaceimate_1_1device_1_1__device_1a126773820a5a66414bf0ea1871672ef4" compoundref="__device_8py" startline="295" endline="369">imate.device._device.get_nvidia_driver_version</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceimate_1_1device_1_1__device_1ad1a771cb05a298184ba8ac805a3ce32a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def imate.device._device.restrict_to_single_processor</definition>
        <argsstring>()</argsstring>
        <name>restrict_to_single_processor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Restricts the computations to only one CPU thread.

This function is primarily used to properly measure the process time of a
computational task using ``time.process_time`` from ``time`` module.

.. note::

    This function should be called *at the very first line of the main
    script of your Python code* before importing any other Python package.

See Also
--------

imate.device.get_num_cpu_threads
imate.info

Notes
-----

**Why using this function:**

In Python, to measure the CPU `processing time` (and not the `wall time`)
of a computational task, the function ``time.process_time`` from ``time``
module can be used. For instance

.. code-block:: python

    &gt;&gt;&gt; import time

    &gt;&gt;&gt; t_init = time.process_time()

    &gt;&gt;&gt; # Perform some time-consuming task

    &gt;&gt;&gt; t_final = time.process_time()
    &gt;&gt;&gt; t_process = t_final - t_init

The process time differs from wall time in which it measures the total
process time of all CPU threads and excludes the idle times when the
process was not working.

Often, measuring the process time is affected by other factors and the
result of the above approach is not reliable. One example of such is
measuring the process time of the global optimization problem using
``scipy.optimize.differential_evolution`` function:

.. code-block:: python

    &gt;&gt;&gt; from scipy.optimize import differential_evolution
    &gt;&gt;&gt; import time

    &gt;&gt;&gt; t_init = time.process_time()
    &gt;&gt;&gt; result = differential_evolution(worker=num_workers, ...)
    &gt;&gt;&gt; t_final = time.process_time()
    &gt;&gt;&gt; t_process = t_final - t_init

However, regardless of setting ``worker=1``, or ``worker=-1``, the measured
process time is identical, hence cannot be trusted.

A solution to this problem is to restrict the computational task to use
only one CPU thread.

**Alternative Solution:**

Instead of calling this function, export the following environment
variables *before* executing your Python script:

.. code-block:: bash

    export OMP_NUM_THREADS=1
    export OPENBLAS_NUM_THREADS=1
    export MKL_NUM_THREADS=1
    export VECLIB_MAXIMUM_THREADS=1
    export NUMEXPR_NUM_THREADS=1

Examples
--------

.. code-block:: python

    &gt;&gt;&gt; # Call this function before importing any other module
    &gt;&gt;&gt; from imate.device import restrict_to_single_processor
    &gt;&gt;&gt; restrict_to_single_processor()

    &gt;&gt;&gt; # Import packages
    &gt;&gt;&gt; import scipy, numpy, imate, time
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/device/_device.py" line="405" column="1" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/device/_device.py" bodystart="405" bodyend="501"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/device/_device.py" line="1" column="1"/>
  </compounddef>
</doxygen>
