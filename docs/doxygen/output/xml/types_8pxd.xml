<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="types_8pxd" kind="file" language="Python">
    <compoundname>types.pxd</compoundname>
    <innernamespace refid="namespacetypes">types</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacetypes" refkind="compound"><highlight class="comment">#<sp/>SPDX-FileCopyrightText:<sp/>Copyright<sp/>2021,<sp/>Siavash<sp/>Ameli<sp/>&lt;sameli@berkeley.edu&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>SPDX-FileType:<sp/>SOURCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it<sp/>under</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>license<sp/>found<sp/>in<sp/>the<sp/>LICENSE.txt<sp/>file<sp/>in<sp/>the<sp/>root<sp/>directory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/>of<sp/>this<sp/>source<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">include<sp/></highlight><highlight class="stringliteral">&quot;definitions.pxi&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">#<sp/>=====</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">#<sp/>=====</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral">Use<sp/>``long_IndexType``<sp/>type<sp/>for<sp/>long<sp/>indices<sp/>where<sp/>parallelization<sp/>could<sp/>be</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral">important.<sp/>This<sp/>could<sp/>include,<sp/>for<sp/>instance,<sp/>indices<sp/>of<sp/>long<sp/>columns<sp/>of</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral">matrices,<sp/>but<sp/>not<sp/>short<sp/>rows.</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral">This<sp/>type<sp/>is<sp/>intended<sp/>to<sp/>be<sp/>set<sp/>as<sp/>``unsigned<sp/>long``.<sp/>However,<sp/>because<sp/>the</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral">indices<sp/>of<sp/>``scipy.sparse``<sp/>matrices<sp/>are<sp/>stored<sp/>as<sp/>``int``<sp/>(and<sp/>not<sp/>``long``),</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral">here,<sp/>a<sp/>fused<sp/>type<sp/>is<sp/>used<sp/>to<sp/>accommodate<sp/>both<sp/>``int``<sp/>and<sp/>``long``.</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral">The<sp/>type<sp/>of<sp/>indices<sp/>of<sp/>sparse<sp/>arrays<sp/>can<sp/>be<sp/>cast,<sp/>for<sp/>instance<sp/>by:</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"><sp/><sp/>..<sp/>code-block::<sp/>python</highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>#<sp/>In<sp/>this<sp/>file:</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ctypedef<sp/>unsigned<sp/>long<sp/>IndexType</highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>#<sp/>In<sp/>linear_operator.pyx:LinearOperator:__cinit__()</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>#<sp/>Add<sp/>.astype(&apos;uint64&apos;)<sp/>to<sp/>these<sp/>variables:</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>self.A_indices<sp/>=<sp/>A.indices.astype(&apos;uint64&apos;)</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>self.B_indices<sp/>=<sp/>A.indices.astype(&apos;uint64&apos;)</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>self.A_index_pointer<sp/>=<sp/>A.indptr.astype(&apos;uint64&apos;)</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>self.B_index_pointer<sp/>=<sp/>B.indptr.astype(&apos;uint64&apos;)</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral">In<sp/>the<sp/>above,<sp/>``uint64``<sp/>is<sp/>equivalent<sp/>to<sp/>``unsigned<sp/>long``.<sp/>Note,<sp/>this<sp/>will</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral">*copy*<sp/>the<sp/>data,<sp/>since<sp/>scipy&apos;s<sp/>sparse<sp/>indices<sp/>should<sp/>be<sp/>casted<sp/>from<sp/>``uint32``.</highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">#<sp/>===========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Fused<sp/>types<sp/>(templates)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">#<sp/>===========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">ctypedef<sp/>fused<sp/>DataType:</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>float</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>double</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/>double</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">ctypedef<sp/>fused<sp/>ConstDataType:</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>float</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>double</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>long<sp/>double</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">ctypedef<sp/>fused<sp/>MemoryViewDataType:</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>float[:]</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>double[:]</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/>double[:]</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">ctypedef<sp/>fused<sp/>MemoryView2DCDataType:</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>float[:,<sp/>::1]</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>double[:,<sp/>::1]</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/>double[:,<sp/>::1]</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">ctypedef<sp/>fused<sp/>MemoryView2DFDataType:</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>float[::1,<sp/>:]</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>double[::1,<sp/>:]</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/>double[::1,<sp/>:]</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">#<sp/>============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Static<sp/>types<sp/>(non-templates)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">#<sp/>============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Long<sp/>index<sp/>types<sp/>is<sp/>used<sp/>for<sp/>data<sp/>indices,<sp/>such<sp/>a<sp/>matrix<sp/>and<sp/>vectors<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">IF<sp/>LONG_INT:</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>IF<sp/>UNSIGNED_LONG_INT:</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctypedef<sp/>unsigned<sp/>long<sp/>LongIndexType</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctypedef<sp/>const<sp/>unsigned<sp/>long<sp/>ConstLongIndexType</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctypedef<sp/>unsigned<sp/>long[:]<sp/>MemoryViewLongIndexType</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>ELSE:</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctypedef<sp/>long<sp/>LongIndexType</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctypedef<sp/>const<sp/>long<sp/>ConstLongIndexType</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctypedef<sp/>long[:]<sp/>MemoryViewLongIndexType</highlight></codeline>
<codeline lineno="91"><highlight class="normal">ELSE:</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>IF<sp/>UNSIGNED_LONG_INT:</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctypedef<sp/>unsigned<sp/>int<sp/>LongIndexType</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctypedef<sp/>const<sp/>unsigned<sp/>int<sp/>ConstLongIndexType</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctypedef<sp/>unsigned<sp/>int[:]<sp/>MemoryViewLongIndexType</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>ELSE:</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctypedef<sp/>int<sp/>LongIndexType</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctypedef<sp/>const<sp/>int<sp/>ConstLongIndexType</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctypedef<sp/>int[:]<sp/>MemoryViewLongIndexType</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Used<sp/>for<sp/>indices<sp/>of<sp/>small<sp/>matrices,<sp/>or<sp/>small<sp/>size<sp/>iterators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">ctypedef<sp/>int<sp/>IndexType</highlight></codeline>
<codeline lineno="103"><highlight class="normal">ctypedef<sp/>const<sp/>int<sp/>ConstIndexType</highlight></codeline>
<codeline lineno="104"><highlight class="normal">ctypedef<sp/>int[:]<sp/>MemoryViewIndexType</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Used<sp/>for<sp/>both<sp/>flags<sp/>and<sp/>integers<sp/>used<sp/>as<sp/>signals,<sp/>including<sp/>negative<sp/>integers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal">ctypedef<sp/>int<sp/>FlagType</highlight></codeline>
<codeline lineno="108"><highlight class="normal">ctypedef<sp/>const<sp/>int<sp/>ConstFlagType</highlight></codeline>
<codeline lineno="109"><highlight class="normal">ctypedef<sp/>int[:]<sp/>MemoryViewFlagType</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">#<sp/>==============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Function<sp/>Types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">#<sp/>==============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">ctypedef<sp/>double<sp/>(*kernel_type)(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>noqa:<sp/>E211</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>double<sp/>x,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>double<sp/>kernel_param)<sp/>nogil</highlight></codeline>
    </programlisting>
    <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_definitions/types.pxd"/>
  </compounddef>
</doxygen>
