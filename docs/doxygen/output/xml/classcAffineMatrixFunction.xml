<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classcAffineMatrixFunction" kind="class" language="C++" prot="public">
    <compoundname>cAffineMatrixFunction</compoundname>
    <basecompoundref refid="classcLinearOperator" prot="public" virt="non-virtual">cLinearOperator&lt; DataType &gt;</basecompoundref>
    <derivedcompoundref refid="classcCSCAffineMatrixFunction" prot="public" virt="non-virtual">cCSCAffineMatrixFunction&lt; DataType &gt;</derivedcompoundref>
    <derivedcompoundref refid="classcCSRAffineMatrixFunction" prot="public" virt="non-virtual">cCSRAffineMatrixFunction&lt; DataType &gt;</derivedcompoundref>
    <derivedcompoundref refid="classcDenseAffineMatrixFunction" prot="public" virt="non-virtual">cDenseAffineMatrixFunction&lt; DataType &gt;</derivedcompoundref>
    <includes refid="c__affine__matrix__function_8h" local="no">c_affine_matrix_function.h</includes>
    <templateparamlist>
      <param>
        <type>typename DataType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classcAffineMatrixFunction_1a44e80d570e57f6960f7c1d7868447624" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool cAffineMatrixFunction&lt; DataType &gt;::B_is_identity</definition>
        <argsstring></argsstring>
        <name>B_is_identity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/github/imate/imate/_c_linear_operator/c_affine_matrix_function.h" line="68" column="14" bodyfile="/home/sia/work/github/imate/imate/_c_linear_operator/c_affine_matrix_function.h" bodystart="68" bodyend="-1"/>
        <referencedby refid="classcCSCAffineMatrixFunction_1ac8673f2581c6a02a050c20de35d344ca" compoundref="c__csc__affine__matrix__function_8cpp" startline="29" endline="47">cCSCAffineMatrixFunction&lt; DataType &gt;::cCSCAffineMatrixFunction</referencedby>
        <referencedby refid="classcCSRAffineMatrixFunction_1af8dd062a6e8e8bfd65e1ebe09828adc0" compoundref="c__csr__affine__matrix__function_8cpp" startline="29" endline="47">cCSRAffineMatrixFunction&lt; DataType &gt;::cCSRAffineMatrixFunction</referencedby>
        <referencedby refid="classcDenseAffineMatrixFunction_1a1cdf6594b971ab7c69b4917f48745f31" compoundref="c__dense__affine__matrix__function_8cpp" startline="29" endline="46">cDenseAffineMatrixFunction&lt; DataType &gt;::cDenseAffineMatrixFunction</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcAffineMatrixFunction_1a5ea11698bccc5eb587f8227a03dbc257" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cAffineMatrixFunction&lt; DataType &gt;::cAffineMatrixFunction</definition>
        <argsstring>(const LongIndexType num_rows_, const LongIndexType num_columns_)</argsstring>
        <name>cAffineMatrixFunction</name>
        <param>
          <type>const <ref refid="types_8h_1a4918759cb64dcead17269b3613b27d25" kindref="member">LongIndexType</ref></type>
          <declname>num_rows_</declname>
        </param>
        <param>
          <type>const <ref refid="types_8h_1a4918759cb64dcead17269b3613b27d25" kindref="member">LongIndexType</ref></type>
          <declname>num_columns_</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/github/imate/imate/_c_linear_operator/c_affine_matrix_function.h" line="45" column="9" bodyfile="/home/sia/work/github/imate/imate/_c_linear_operator/c_affine_matrix_function.cpp" bodystart="29" bodyend="40"/>
        <references refid="classcLinearOperator_1aab9f0063e55c2a1a92a7e643f086348b" compoundref="c__linear__operator_8h" startline="79">cLinearOperator&lt; DataType &gt;::num_parameters</references>
      </memberdef>
      <memberdef kind="function" id="classcAffineMatrixFunction_1a353aeed42783e4fc81fca10d48848dcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>cAffineMatrixFunction&lt; DataType &gt;::~cAffineMatrixFunction</definition>
        <argsstring>()</argsstring>
        <name>~cAffineMatrixFunction</name>
        <briefdescription>
<para>Virtual destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/github/imate/imate/_c_linear_operator/c_affine_matrix_function.h" line="49" column="17" bodyfile="/home/sia/work/github/imate/imate/_c_linear_operator/c_affine_matrix_function.cpp" bodystart="51" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classcAffineMatrixFunction_1a3b7e9de00731adfcc930a8fefd21c5c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cAffineMatrixFunction&lt; DataType &gt;::set_parameters</definition>
        <argsstring>(DataType *t)</argsstring>
        <name>set_parameters</name>
        <param>
          <type>DataType *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/github/imate/imate/_c_linear_operator/c_affine_matrix_function.h" line="51" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classcAffineMatrixFunction_1a9d877f4e35cbdefc4f3d81f4386e1c1e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>DataType</type>
        <definition>DataType cAffineMatrixFunction&lt; DataType &gt;::get_eigenvalue</definition>
        <argsstring>(const DataType *known_parameters, const DataType known_eigenvalue, const DataType *inquiry_parameters) const</argsstring>
        <name>get_eigenvalue</name>
        <reimplements refid="classcLinearOperator_1a0dd6306a434563e4a48a806b43f23d03">get_eigenvalue</reimplements>
        <param>
          <type>const DataType *</type>
          <declname>known_parameters</declname>
        </param>
        <param>
          <type>const DataType</type>
          <declname>known_eigenvalue</declname>
        </param>
        <param>
          <type>const DataType *</type>
          <declname>inquiry_parameters</declname>
        </param>
        <briefdescription>
<para>This function defines an analytic relationship between a given set of parameters and the corresponding eigenvalue of the operator. Namely, given a set of parameters and a <emphasis>known</emphasis> eigenvalue of the operator for that specific set of parameters, this function obtains the eigenvalue of the operator for an other given set of parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>A relation between eigenvalue(s) and the set of parameters can be made when the matrix :math:<computeroutput>\\mathbf{B}</computeroutput> is equal to the identity matrix <formula id="15">$ \mathbf{I} $</formula>, and corresponding linear operator is as follows:</para>
<para><formula id="16">\[ \mathbf{A}(t) = \mathbf{A} + t \mathbf{I} \]</formula></para>
<para>Then, the eigenvalues <formula id="17">$ \lambda $</formula> of the operator is</para>
<para><formula id="18">\[ \lambda(\mathbf{A}(t)) = \lambda(\mathbf{A}) + t. \]</formula></para>
<para>Thus, by knowing the eigenvalue <formula id="19">$ \lambda_{t_0} $</formula> at the known parameter <formula id="20">$ t_0 $</formula>, the eigenvalue <formula id="21">$ \lambda_{t} $</formula> at the inquiry parameter <formula id="22">$ t $</formula> can be obtained.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">known_parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>A set of parameters of the operator where the corresponding eigenvalue of the parameter is known for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">known_eigenvalue</parametername>
</parameternamelist>
<parameterdescription>
<para>The known eigenvalue of the operator for the known parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">inquiry_parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>A set of inquiry parameters of the operator where the corresponding eigenvalue of the operator is sought. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The eigenvalue of the operator corresponding the inquiry parameters. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/github/imate/imate/_c_linear_operator/c_affine_matrix_function.h" line="53" column="18" bodyfile="/home/sia/work/github/imate/imate/_c_linear_operator/c_affine_matrix_function.cpp" bodystart="98" bodyend="113"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classcAffineMatrixFunction_1a144b790e6cf7ef04d2b140a8031929a4" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cAffineMatrixFunction&lt; DataType &gt;::_add_scaled_vector</definition>
        <argsstring>(const DataType *input_vector, const LongIndexType vector_size, const DataType scale, DataType *output_vector) const</argsstring>
        <name>_add_scaled_vector</name>
        <param>
          <type>const DataType *</type>
          <declname>input_vector</declname>
        </param>
        <param>
          <type>const <ref refid="types_8h_1a4918759cb64dcead17269b3613b27d25" kindref="member">LongIndexType</ref></type>
          <declname>vector_size</declname>
        </param>
        <param>
          <type>const DataType</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>DataType *</type>
          <declname>output_vector</declname>
        </param>
        <briefdescription>
<para>Performs the operation <formula id="23">$ \boldsymbol{c} = \boldsymbol{c} + \alpha * \boldsymbol{b} $</formula>, where <formula id="6">$ \boldsymbol{b} $</formula> is an input vector scaled by <formula id="24">$ \alpha $</formula> and <formula id="7">$ \boldsymbol{c} $</formula> it the output vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">input_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>The input 1D vector of size <computeroutput>vector_size</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">vector_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of both <computeroutput>input_vector</computeroutput> and <computeroutput>output_vector</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scale</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar scale at whch the input vector is multiplied by. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">output_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>The output 1D vector of size <computeroutput>vector_size</computeroutput>. This array will be written in-place. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/github/imate/imate/_c_linear_operator/c_affine_matrix_function.h" line="61" column="14" bodyfile="/home/sia/work/github/imate/imate/_c_linear_operator/c_affine_matrix_function.cpp" bodystart="136" bodyend="145"/>
        <references refid="classcVectorOperations_1a9bd28bd08f5a6b096d99a4a2f7d23e90" compoundref="c__vector__operations_8cpp" startline="135" endline="166">cVectorOperations&lt; DataType &gt;::subtract_scaled_vector</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for affine matrix functions of one parameter. </para>
    </briefdescription>
    <detaileddescription>
<para>The prefix <computeroutput>c</computeroutput> in this class&apos;s name (and its derivatves), stands for the <computeroutput>cpp</computeroutput> code, intrast to the <computeroutput>cu</computeroutput> prefix, which stands for the cuda code. Most derived classes have a cuda counterpart.</para>
<para><simplesect kind="see"><para><ref refid="classcMatrix" kindref="compound">cMatrix</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>cAffineMatrixFunction&lt; DataType &gt;</label>
        <link refid="classcAffineMatrixFunction"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>cCSRAffineMatrixFunction&lt; DataType &gt;</label>
        <link refid="classcCSRAffineMatrixFunction"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>cLinearOperator&lt; DataType &gt;</label>
        <link refid="classcLinearOperator"/>
      </node>
      <node id="5">
        <label>cDenseAffineMatrixFunction&lt; DataType &gt;</label>
        <link refid="classcDenseAffineMatrixFunction"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>cCSCAffineMatrixFunction&lt; DataType &gt;</label>
        <link refid="classcCSCAffineMatrixFunction"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>cAffineMatrixFunction&lt; DataType &gt;</label>
        <link refid="classcAffineMatrixFunction"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>cLinearOperator&lt; DataType &gt;</label>
        <link refid="classcLinearOperator"/>
      </node>
    </collaborationgraph>
    <location file="/home/sia/work/github/imate/imate/_c_linear_operator/c_affine_matrix_function.h" line="40" column="1" bodyfile="/home/sia/work/github/imate/imate/_c_linear_operator/c_affine_matrix_function.h" bodystart="41" bodyend="69"/>
    <listofallmembers>
      <member refid="classcAffineMatrixFunction_1a144b790e6cf7ef04d2b140a8031929a4" prot="protected" virt="non-virtual"><scope>cAffineMatrixFunction</scope><name>_add_scaled_vector</name></member>
      <member refid="classcAffineMatrixFunction_1a44e80d570e57f6960f7c1d7868447624" prot="protected" virt="non-virtual"><scope>cAffineMatrixFunction</scope><name>B_is_identity</name></member>
      <member refid="classcAffineMatrixFunction_1a5ea11698bccc5eb587f8227a03dbc257" prot="public" virt="non-virtual"><scope>cAffineMatrixFunction</scope><name>cAffineMatrixFunction</name></member>
      <member refid="classcLinearOperator_1acb0880fed1d5599d721a9438c207ee5b" prot="public" virt="non-virtual"><scope>cAffineMatrixFunction</scope><name>cLinearOperator</name></member>
      <member refid="classcLinearOperator_1ac844c5dd7b83eb1e95f3c96181366629" prot="public" virt="non-virtual"><scope>cAffineMatrixFunction</scope><name>cLinearOperator</name></member>
      <member refid="classcLinearOperator_1a48c76860a74f00fefaa1297368d17a77" prot="public" virt="pure-virtual"><scope>cAffineMatrixFunction</scope><name>dot</name></member>
      <member refid="classcLinearOperator_1ac4c88c2dcdc8a4d33a77df3979789d42" prot="protected" virt="non-virtual"><scope>cAffineMatrixFunction</scope><name>eigenvalue_relation_known</name></member>
      <member refid="classcAffineMatrixFunction_1a9d877f4e35cbdefc4f3d81f4386e1c1e" prot="public" virt="virtual"><scope>cAffineMatrixFunction</scope><name>get_eigenvalue</name></member>
      <member refid="classcLinearOperator_1a08a2eb3bd8ff1f47d1141dc164af1c61" prot="public" virt="non-virtual"><scope>cAffineMatrixFunction</scope><name>get_num_columns</name></member>
      <member refid="classcLinearOperator_1af9be60b44a47eed5b2c98f077ff54987" prot="public" virt="non-virtual"><scope>cAffineMatrixFunction</scope><name>get_num_parameters</name></member>
      <member refid="classcLinearOperator_1aecc5b62db1d8a41f5112b289c7031aaf" prot="public" virt="non-virtual"><scope>cAffineMatrixFunction</scope><name>get_num_rows</name></member>
      <member refid="classcLinearOperator_1af0c980ca87c2795e0dbfda1c84f74591" prot="public" virt="non-virtual"><scope>cAffineMatrixFunction</scope><name>is_eigenvalue_relation_known</name></member>
      <member refid="classcLinearOperator_1acdafe59b033d5a73f5abe380f63f40a1" prot="protected" virt="non-virtual"><scope>cAffineMatrixFunction</scope><name>num_columns</name></member>
      <member refid="classcLinearOperator_1aab9f0063e55c2a1a92a7e643f086348b" prot="protected" virt="non-virtual"><scope>cAffineMatrixFunction</scope><name>num_parameters</name></member>
      <member refid="classcLinearOperator_1a6786391614f08ef1575554f78717fbb0" prot="protected" virt="non-virtual"><scope>cAffineMatrixFunction</scope><name>num_rows</name></member>
      <member refid="classcLinearOperator_1a22683aa9286bfd651f1f2dbae3660545" prot="protected" virt="non-virtual"><scope>cAffineMatrixFunction</scope><name>parameters</name></member>
      <member refid="classcAffineMatrixFunction_1a3b7e9de00731adfcc930a8fefd21c5c6" prot="public" virt="non-virtual"><scope>cAffineMatrixFunction</scope><name>set_parameters</name></member>
      <member refid="classcLinearOperator_1a40f5051c4399ebfa153ef7147e10a6e6" prot="public" virt="pure-virtual"><scope>cAffineMatrixFunction</scope><name>transpose_dot</name></member>
      <member refid="classcAffineMatrixFunction_1a353aeed42783e4fc81fca10d48848dcd" prot="public" virt="virtual"><scope>cAffineMatrixFunction</scope><name>~cAffineMatrixFunction</name></member>
      <member refid="classcLinearOperator_1a53065884c6a1349054a96a9fb8838e65" prot="public" virt="virtual"><scope>cAffineMatrixFunction</scope><name>~cLinearOperator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
