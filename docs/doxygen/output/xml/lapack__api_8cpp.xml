<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="lapack__api_8cpp" kind="file" language="C++">
    <compoundname>lapack_api.cpp</compoundname>
    <includes refid="lapack__api_8h" local="yes">./lapack_api.h</includes>
    <includes local="no">cstddef</includes>
    <incdepgraph>
      <node id="2">
        <label>./lapack_api.h</label>
        <link refid="lapack__api_8h"/>
      </node>
      <node id="1">
        <label>/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_c_trace_estimator/lapack_api.cpp</label>
        <link refid="lapack__api_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>cstddef</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="lapack__api_8cpp_1a17b4f1cefadde9e4eebbe131cd3c46d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void lapack_xstev&lt; float &gt;</definition>
        <argsstring>(char *jobz, int *n, float *d, float *e, float *z, int *ldz, float *work, int *info)</argsstring>
        <name>lapack_xstev&lt; float &gt;</name>
        <param>
          <type>char *</type>
          <declname>jobz</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldz</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>work</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Overlodng wrapper for both <computeroutput>lapack_sstev</computeroutput> (a float function) and <computeroutput>lapack_dstev</computeroutput> (a double function). <computeroutput>xstev</computeroutput> overloads both <computeroutput>sstev</computeroutput> and <computeroutput>dstev</computeroutput> with the same function signature. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_c_trace_estimator/lapack_api.cpp" line="29" column="1" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_c_trace_estimator/lapack_api.cpp" bodystart="29" bodyend="34"/>
        <references refid="lapack__api_8h_1a3bb8570c48bc40c3f640cae15a02a67a">lapack_sstev</references>
      </memberdef>
      <memberdef kind="function" id="lapack__api_8cpp_1a63cb2208ad897938b54dcf054bf0ec93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void lapack_xstev&lt; double &gt;</definition>
        <argsstring>(char *jobz, int *n, double *d, double *e, double *z, int *ldz, double *work, int *info)</argsstring>
        <name>lapack_xstev&lt; double &gt;</name>
        <param>
          <type>char *</type>
          <declname>jobz</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldz</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>work</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Overlodng wrapper for both <computeroutput>lapack_sstev</computeroutput> (a float function) and <computeroutput>lapack_dstev</computeroutput> (a double function). <computeroutput>xstev</computeroutput> overloads both <computeroutput>sstev</computeroutput> and <computeroutput>dstev</computeroutput> with the same function signature. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_c_trace_estimator/lapack_api.cpp" line="46" column="1" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_c_trace_estimator/lapack_api.cpp" bodystart="46" bodyend="51"/>
        <references refid="lapack__api_8h_1a86bd60d7bff04b15d1728f8d760a2a8a">lapack_dstev</references>
      </memberdef>
      <memberdef kind="function" id="lapack__api_8cpp_1a6c4bb742d925dc40f9af42a2e5aa13ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void lapack_xstev&lt; long double &gt;</definition>
        <argsstring>(char *jobz, int *n, long double *d, long double *e, long double *z, int *ldz, long double *work, int *info)</argsstring>
        <name>lapack_xstev&lt; long double &gt;</name>
        <param>
          <type>char *</type>
          <declname>jobz</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>long double *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>long double *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>long double *</type>
          <declname>z</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldz</declname>
        </param>
        <param>
          <type>long double *</type>
          <declname>work</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Overlodng wrapper for both <computeroutput>lapack_sstev</computeroutput> (a float function) and <computeroutput>lapack_dstev</computeroutput> (a double function). <computeroutput>xstev</computeroutput> overloads both <computeroutput>sstev</computeroutput> and <computeroutput>dstev</computeroutput> with the same function signature. This function casts <computeroutput>long double</computeroutput> type to <computeroutput>double</computeroutput> and uses <computeroutput>dstev</computeroutput> subroutine. </para>
        </briefdescription>
        <detaileddescription>
<para>The variables with leading undescore are <computeroutput>double</computeroutput> counterparts of the <computeroutput>long double</computeroutput> variables. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_c_trace_estimator/lapack_api.cpp" line="67" column="1" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_c_trace_estimator/lapack_api.cpp" bodystart="67" bodyend="112"/>
        <references refid="lapack__api_8h_1a86bd60d7bff04b15d1728f8d760a2a8a">lapack_dstev</references>
      </memberdef>
      <memberdef kind="function" id="lapack__api_8cpp_1a565125510b3eab1efb791f32c469e0b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void lapack_xbdsdc&lt; float &gt;</definition>
        <argsstring>(char *uplo, char *compq, int *n, float *d, float *e, float *u, int *ldu, float *vt, int *ldvt, float *q, int *iq, float *work, int *iwork, int *info)</argsstring>
        <name>lapack_xbdsdc&lt; float &gt;</name>
        <param>
          <type>char *</type>
          <declname>uplo</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>compq</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldu</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>vt</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldvt</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>q</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iq</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>work</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iwork</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Overlodng wrapper for both <computeroutput>lapack_sbdsdc</computeroutput> (a float function) and <computeroutput>lapack_dbdsdc</computeroutput> (a double function). <computeroutput>xbdsdc</computeroutput> overloads both <computeroutput>sbdsdc</computeroutput> and <computeroutput>dbdsdc</computeroutput> with the same function signature. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_c_trace_estimator/lapack_api.cpp" line="124" column="1" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_c_trace_estimator/lapack_api.cpp" bodystart="124" bodyend="130"/>
        <references refid="lapack__api_8h_1a3be9807fe163d6eecd286b634025283e">lapack_sbdsdc</references>
      </memberdef>
      <memberdef kind="function" id="lapack__api_8cpp_1a3b18f4180424f79a3e5720c19fa59ca2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void lapack_xbdsdc&lt; double &gt;</definition>
        <argsstring>(char *uplo, char *compq, int *n, double *d, double *e, double *u, int *ldu, double *vt, int *ldvt, double *q, int *iq, double *work, int *iwork, int *info)</argsstring>
        <name>lapack_xbdsdc&lt; double &gt;</name>
        <param>
          <type>char *</type>
          <declname>uplo</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>compq</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldu</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vt</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldvt</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>q</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iq</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>work</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iwork</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Overlodng wrapper for both <computeroutput>lapack_sbdsdc</computeroutput> (a double function) and <computeroutput>lapack_dbdsdc</computeroutput> (a double function). <computeroutput>xbdsdc</computeroutput> overloads both <computeroutput>sbdsdc</computeroutput> and <computeroutput>dbdsdc</computeroutput> with the same function signature. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_c_trace_estimator/lapack_api.cpp" line="142" column="1" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_c_trace_estimator/lapack_api.cpp" bodystart="142" bodyend="149"/>
        <references refid="lapack__api_8h_1a91cb16a7b72c3016b5ce6529acca64ab">lapack_dbdsdc</references>
      </memberdef>
      <memberdef kind="function" id="lapack__api_8cpp_1a24fe9da580dd800a9e1d427b69bf3f1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void lapack_xbdsdc&lt; long double &gt;</definition>
        <argsstring>(char *uplo, char *compq, int *n, long double *d, long double *e, long double *u, int *ldu, long double *vt, int *ldvt, long double *q, int *iq, long double *work, int *iwork, int *info)</argsstring>
        <name>lapack_xbdsdc&lt; long double &gt;</name>
        <param>
          <type>char *</type>
          <declname>uplo</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>compq</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>long double *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>long double *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>long double *</type>
          <declname>u</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldu</declname>
        </param>
        <param>
          <type>long double *</type>
          <declname>vt</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ldvt</declname>
        </param>
        <param>
          <type>long double *</type>
          <declname>q</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iq</declname>
        </param>
        <param>
          <type>long double *</type>
          <declname>work</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>iwork</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Overlodng wrapper for both <computeroutput>lapack_sbdsdc</computeroutput> (a double function) and <computeroutput>lapack_dbdsdc</computeroutput> (a double function). <computeroutput>xbdsdc</computeroutput> overloads both <computeroutput>sstev</computeroutput> and <computeroutput>dstev</computeroutput> with the same function signature. This function casts <computeroutput>long double</computeroutput> type to <computeroutput>double</computeroutput> and uses <computeroutput>dstev</computeroutput> subroutine. </para>
        </briefdescription>
        <detaileddescription>
<para>The variables with leading undescore are <computeroutput>double</computeroutput> counterparts of the <computeroutput>long double</computeroutput> variables. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_c_trace_estimator/lapack_api.cpp" line="166" column="1" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_c_trace_estimator/lapack_api.cpp" bodystart="166" bodyend="225"/>
        <references refid="lapack__api_8h_1a91cb16a7b72c3016b5ce6529acca64ab">lapack_dbdsdc</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-FileCopyrightText:<sp/>Copyright<sp/>2021,<sp/>Siavash<sp/>Ameli<sp/>&lt;sameli@berkeley.edu&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-FileType:<sp/>SOURCE</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>license<sp/>found<sp/>in<sp/>the<sp/>LICENSE.txt<sp/>file<sp/>in<sp/>the<sp/>root</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>directory<sp/>of<sp/>this<sp/>source<sp/>tree.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Headers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lapack__api_8h" kindref="compound">./lapack_api.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lapack<sp/>xstev<sp/>(float<sp/>specialization)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="29" refid="lapack__api_8cpp_1a17b4f1cefadde9e4eebbe131cd3c46d8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__api_8cpp_1a17b4f1cefadde9e4eebbe131cd3c46d8" kindref="member">lapack_xstev&lt;float&gt;</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>jobz,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>n,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>d,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>e,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>z,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>ldz,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>work,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>info)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calling<sp/>float<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lapack__api_8h_1a3bb8570c48bc40c3f640cae15a02a67a" kindref="member">lapack_sstev</ref>(jobz,<sp/>n,<sp/>d,<sp/>e,<sp/>z,<sp/>ldz,<sp/>work,<sp/>info);</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lapack<sp/>xstev<sp/>(double<sp/>specialization)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="46" refid="lapack__api_8cpp_1a63cb2208ad897938b54dcf054bf0ec93" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__api_8cpp_1a63cb2208ad897938b54dcf054bf0ec93" kindref="member">lapack_xstev&lt;double&gt;</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>jobz,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>n,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>d,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>e,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>z,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>ldz,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>work,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>info)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calling<sp/>double<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lapack__api_8h_1a86bd60d7bff04b15d1728f8d760a2a8a" kindref="member">lapack_dstev</ref>(jobz,<sp/>n,<sp/>d,<sp/>e,<sp/>z,<sp/>ldz,<sp/>work,<sp/>info);</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lapack<sp/>xstev<sp/>(long<sp/>double<sp/>specialization)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="67" refid="lapack__api_8cpp_1a6c4bb742d925dc40f9af42a2e5aa13ce" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__api_8cpp_1a6c4bb742d925dc40f9af42a2e5aa13ce" kindref="member">lapack_xstev&lt;long double&gt;</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>jobz,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>n,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>d,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>e,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>z,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>ldz,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>work,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>info)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>unused<sp/>variables<sp/>to<sp/>avoid<sp/>compiler<sp/>warnings<sp/>(-Wno-unused-parameter)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>work;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Deep<sp/>copy<sp/>long<sp/>double<sp/>diagonal<sp/>array<sp/>to<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*d_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[(*n)];</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>(*n);<sp/>++i)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d_[i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(d[i]);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Deep<sp/>copy<sp/>long<sp/>double<sp/>supdiagonal<sp/>array<sp/>to<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*e_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[(*n)-1];</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>(*n)-1;<sp/>++i)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e_[i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(e[i]);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Declare<sp/>eigenvectors<sp/>and<sp/>work<sp/>arrays<sp/>as<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*z_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[(*ldz)*(*n)];</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*work_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[2*(*n)-2];</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calling<sp/>double<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lapack__api_8h_1a86bd60d7bff04b15d1728f8d760a2a8a" kindref="member">lapack_dstev</ref>(jobz,<sp/>n,<sp/>d_,<sp/>e_,<sp/>z_,<sp/>ldz,<sp/>work_,<sp/>info);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>eigenvalues<sp/>from<sp/>double<sp/>to<sp/>long<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>(*n);<sp/>++i)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(d_[i]);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>eigenvectors<sp/>from<sp/>double<sp/>to<sp/>long<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>(*ldz)*(*n);<sp/>++i)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z[i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(z_[i]);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Deallocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>d_;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>e_;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>z_;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>work_;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lapack<sp/>xbdsdc<sp/>(float<sp/>specialization)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="124" refid="lapack__api_8cpp_1a565125510b3eab1efb791f32c469e0b6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__api_8cpp_1a565125510b3eab1efb791f32c469e0b6" kindref="member">lapack_xbdsdc&lt;float&gt;</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>uplo,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>compq,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>n,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>d,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*e,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>u,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>ldu,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>vt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>ldvt,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>q,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>iq,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>work,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>iwork,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>info)</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lapack__api_8h_1a3be9807fe163d6eecd286b634025283e" kindref="member">lapack_sbdsdc</ref>(uplo,<sp/>compq,<sp/>n,<sp/>d,<sp/>e,<sp/>u,<sp/>ldu,<sp/>vt,<sp/>ldvt,<sp/>q,<sp/>iq,<sp/>work,<sp/>iwork,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info);</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lapack<sp/>xbdsdc<sp/>(double<sp/>specialization)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="142" refid="lapack__api_8cpp_1a3b18f4180424f79a3e5720c19fa59ca2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__api_8cpp_1a3b18f4180424f79a3e5720c19fa59ca2" kindref="member">lapack_xbdsdc&lt;double&gt;</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>uplo,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>compq,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>n,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>d,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*e,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>u,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>ldu,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>vt,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>ldvt,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>q,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>iq,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>work,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>iwork,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>info)</highlight></codeline>
<codeline lineno="146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lapack__api_8h_1a91cb16a7b72c3016b5ce6529acca64ab" kindref="member">lapack_dbdsdc</ref>(uplo,<sp/>compq,<sp/>n,<sp/>d,<sp/>e,<sp/>u,<sp/>ldu,<sp/>vt,<sp/>ldvt,<sp/>q,<sp/>iq,<sp/>work,<sp/>iwork,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info);</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lapack<sp/>xbdsdc<sp/>(long<sp/>double<sp/>specialization)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="166" refid="lapack__api_8cpp_1a24fe9da580dd800a9e1d427b69bf3f1c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lapack__api_8cpp_1a24fe9da580dd800a9e1d427b69bf3f1c" kindref="member">lapack_xbdsdc&lt;long double&gt;</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>uplo,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>compq,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>n,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>d,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*e,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>u,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>ldu,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>vt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>ldvt,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>q,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>iq,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>work,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>iwork,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>info)</highlight></codeline>
<codeline lineno="171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>unused<sp/>variables<sp/>to<sp/>avoid<sp/>compiler<sp/>warnings<sp/>(-Wno-unused-parameter)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>q;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>work;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Deep<sp/>copy<sp/>long<sp/>double<sp/>diagonal<sp/>array<sp/>to<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*d_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[(*n)];</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>(*n);<sp/>++i)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d_[i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(d[i]);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Deep<sp/>copy<sp/>long<sp/>double<sp/>supdiagonal<sp/>array<sp/>to<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*e_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[(*n)-1];</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>(*n)-1;<sp/>++i)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e_[i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(e[i]);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Declare<sp/>left<sp/>and<sp/>right<sp/>eigenvectors<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*u_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[(*ldu)*(*n)];</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*vt_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[(*ldvt)*(*n)];</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Declare<sp/>work<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>q_<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*work_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">[3*(*n)*(*n)<sp/>+<sp/>4*(*n)];</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>lapack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lapack__api_8h_1a91cb16a7b72c3016b5ce6529acca64ab" kindref="member">lapack_dbdsdc</ref>(uplo,<sp/>compq,<sp/>n,<sp/>d_,<sp/>e_,<sp/>u_,<sp/>ldu,<sp/>vt_,<sp/>ldvt,<sp/>q_,<sp/>iq,<sp/>work_,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iwork,<sp/>info);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>back<sp/>eigenvectors<sp/>from<sp/>double<sp/>to<sp/>long<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>(*n);<sp/>++i)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d[i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(d_[i]);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>left<sp/>and<sp/>right<sp/>eigenvectors<sp/>fom<sp/>double<sp/>to<sp/>long<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>(*ldu)*(*n);<sp/>++i)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u[i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(u_[i]);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>(*ldvt)*(*n);<sp/>++i)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vt[i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(vt_[i]);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Deallocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>d_;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>e_;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>u_;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>vt_;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>work_;</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_c_trace_estimator/lapack_api.cpp"/>
  </compounddef>
</doxygen>
