<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="__monomial__basis__functions__method_8py" kind="file" language="Python">
    <compoundname>_monomial_basis_functions_method.py</compoundname>
    <innerclass refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod" prot="public">imate::interpolator::_monomial_basis_functions_method::MonomialBasisFunctionsMethod</innerclass>
    <innernamespace refid="namespaceimate_1_1interpolator_1_1__monomial__basis__functions__method">imate::interpolator::_monomial_basis_functions_method</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespaceimate_1_1interpolator_1_1__monomial__basis__functions__method" refkind="compound"><highlight class="comment">#<sp/>SPDX-FileCopyrightText:<sp/>Copyright<sp/>2021,<sp/>Siavash<sp/>Ameli<sp/>&lt;sameli@berkeley.edu&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>SPDX-FileType:<sp/>SOURCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it<sp/>under</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>license<sp/>found<sp/>in<sp/>the<sp/>LICENSE.txt<sp/>file<sp/>in<sp/>the<sp/>root<sp/>directory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/>of<sp/>this<sp/>source<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#<sp/>=======</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Imports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/>=======</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>print_function</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>._interpolant_base<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>InterpolantBase</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>numbers<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Number</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">#<sp/>===============================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Monomial<sp/>Basis<sp/>Functions<sp/>Method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">#<sp/>===============================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod" kindref="compound">MonomialBasisFunctionsMethod</ref>(<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase" kindref="compound">InterpolantBase</ref>):</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Computes<sp/>the<sp/>trace<sp/>of<sp/>inverse<sp/>of<sp/>an<sp/>invertible<sp/>matrix<sp/>:math:`\\mathbf{A}<sp/>+</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>t<sp/>\\mathbf{B}`<sp/>using</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\frac{1}{(\\tau(t))^{q+1}}<sp/>\\approx<sp/>\\frac{1}{(\\tau_0)^{q+1}}<sp/>+</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\sum_{i=1}^{q+1}<sp/>w_i<sp/>t^i,</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>where</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\tau(t)<sp/>=<sp/>\\frac{\\mathrm{trace}\\left(<sp/>(\\mathbf{A}<sp/>+</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>\\mathbf{B})^{-1}<sp/>\\right)}{\\mathrm{trace<sp/>\\left(<sp/>\\mathbf{B}^{-1}</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\right)}}</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>and<sp/>:math:`\\tau_0<sp/>=<sp/>\\tau(0)`<sp/>and<sp/>:math:`w_{q+1}<sp/>=<sp/>1`.</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>To<sp/>find<sp/>the<sp/>weight<sp/>coefficient<sp/>:math:`w_1`,<sp/>the<sp/>trace<sp/>is<sp/>computed<sp/>at<sp/>the</highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>given<sp/>interpolant<sp/>point<sp/>:math:`t_1`<sp/>(see<sp/>``ti``<sp/>argument).</highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>When<sp/>:math:`q<sp/>=<sp/>1`,<sp/>meaning<sp/>that<sp/>there<sp/>is<sp/>only<sp/>one<sp/>interpolant<sp/>point</highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:math:`t_1`<sp/>with<sp/>the<sp/>function<sp/>value<sp/><sp/>:math:`\\tau_1<sp/>=<sp/>\\tau(t_1)`,<sp/>the</highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>weight<sp/>coefficient<sp/>:math:`w_1`<sp/>can<sp/>be<sp/>solved<sp/>easily.<sp/>In<sp/>this<sp/>case,<sp/>the</highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>interpolation<sp/>function<sp/>becomes</highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\frac{1}{(\\tau(t))^2}<sp/>\\approx<sp/><sp/>\\frac{1}{\\tau_0^2}<sp/>+<sp/>t^2<sp/>+</highlight></codeline>
<codeline lineno="56"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\left(<sp/>\\frac{1}{\\tau_1^2}<sp/>-<sp/>\\frac{1}{\\tau_0^2}<sp/>-<sp/>t_1^2<sp/>\\right)</highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\frac{t}{t_1}.</highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>note::</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>class<sp/>accepts<sp/>only<sp/>*one*<sp/>interpolant<sp/>point<sp/>(:math:`q<sp/>=<sp/>1`).<sp/>That</highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is,<sp/>the<sp/>argument<sp/>``ti``<sp/>should<sp/>be<sp/>only<sp/>one<sp/>number<sp/>or<sp/>a</highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>of<sp/>the<sp/>length<sp/>1.</highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>**Class<sp/>Inheritance:**</highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="67"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>inheritance-diagram::</highlight></codeline>
<codeline lineno="68"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imate.InterpolateTraceinv.MonomialBasisFunctionsMethod</highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:parts:<sp/>1</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>A:<sp/>Invertible<sp/>matrix,<sp/>can<sp/>be<sp/>either<sp/>dense<sp/>or<sp/>sparse<sp/>matrix.</highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:type<sp/>A:<sp/>numpy.ndarray</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>B:<sp/>Invertible<sp/>matrix,<sp/>can<sp/>be<sp/>either<sp/>dense<sp/>or<sp/>sparse<sp/>matrix.</highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:type<sp/>B:<sp/>numpy.ndarray</highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>options:<sp/>A<sp/>dictionary<sp/>of<sp/>input<sp/>arguments<sp/>for</highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:mod:`imate.traceinv.traceinv`<sp/>module.</highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:type<sp/>options:<sp/>dict</highlight></codeline>
<codeline lineno="80"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="81"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>verbose:<sp/>If<sp/>``True``,<sp/>prints<sp/>some<sp/>information<sp/>on<sp/>the<sp/>computation</highlight></codeline>
<codeline lineno="82"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>process.<sp/>Default<sp/>is<sp/>``False``.</highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:type<sp/>verbose:<sp/>bool</highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:example:</highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>class<sp/>can<sp/>be<sp/>invoked<sp/>from</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:class:`imate.InterpolateTraceinv.InterpolateTraceinv`<sp/>module</highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>using<sp/>``method=&apos;MBF&apos;``<sp/>argument.</highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>imate<sp/>import<sp/>generate_matrix</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>imate<sp/>import<sp/>InterpolateTraceinv</highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Create<sp/>a<sp/>symmetric<sp/>positive-definite<sp/>matrix,<sp/>size<sp/>(20**2,<sp/>20**2)</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>A<sp/>=<sp/>generate_matrix(size=20)</highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Create<sp/>an<sp/>object<sp/>that<sp/>interpolates<sp/>trace<sp/>of<sp/>inverse<sp/>of<sp/>A+tI</highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>where<sp/>I<sp/>is<sp/>identity<sp/>matrix.</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>TI<sp/>=<sp/>InterpolateTraceinv(A,<sp/>method=&apos;MBF&apos;)</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Interpolate<sp/>A+tI<sp/>at<sp/>some<sp/>input<sp/>point<sp/>t</highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>t<sp/>=<sp/>4e-1</highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>trace<sp/>=<sp/>TI.interpolate(t)</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>seealso::</highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>class<sp/>can<sp/>only<sp/>accept<sp/>one<sp/>interpolant<sp/>point.<sp/>A<sp/>better<sp/>method<sp/>is</highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``&apos;RMBF&apos;``<sp/>which<sp/>accepts<sp/>arbitrary<sp/>number<sp/>of<sp/>interpolant<sp/>points.<sp/>It<sp/>is</highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recommended<sp/>to<sp/>use<sp/>the<sp/>``&apos;RMBF&apos;``<sp/>(see</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:class:`imate.InterpolateTraceinv.RootMonomialBasisFunctionsMethod`)</highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instead<sp/>of<sp/>this<sp/>class.</highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>====</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Init</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>====</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod_1a0daf5d107aba4712b3c6caec4a1b0c03" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod_1a0daf5d107aba4712b3c6caec4a1b0c03" kindref="member">__init__</ref>(self,<sp/>A,<sp/>B=None,<sp/>p=0,<sp/>ti=[],<sp/>options={},</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbose=False):</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Initializes<sp/>the<sp/>base<sp/>class<sp/>and<sp/>attributes,<sp/>namely,<sp/>the<sp/>trace<sp/>at<sp/>the</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interpolant<sp/>point.</highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Base<sp/>class<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>super(MonomialBasisFunctionsMethod,<sp/>self).<ref refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod_1a0daf5d107aba4712b3c6caec4a1b0c03" kindref="member">__init__</ref>(</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A,<sp/>B=B,<sp/>p=p,<sp/>ti=ti,<sp/>options=options,<sp/>verbose=verbose)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>t1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ti<sp/>==<sp/>[]:</highlight></codeline>
<codeline lineno="133" refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod_1aae267eb320c435b31fc9690e7ff43036" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod_1aae267eb320c435b31fc9690e7ff43036" kindref="member">t1</ref>t1<sp/>=<sp/>1.0<sp/>/<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a47d85671bdafd1b0d30002c6d50e48e9" kindref="member">tau0</ref>tau0</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>number<sp/>of<sp/>interpolant<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>isinstance(ti,<sp/>Number):</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>TypeError(</highlight><highlight class="stringliteral">&quot;&apos;ti&apos;<sp/>for<sp/>the<sp/>&apos;MBF&apos;<sp/>method<sp/>should<sp/>be<sp/>a<sp/>&apos;<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;single<sp/>number,<sp/>not<sp/>an<sp/>array<sp/>or<sp/>a<sp/>list<sp/>of<sp/>&apos;<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;numbers.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod_1aae267eb320c435b31fc9690e7ff43036" kindref="member">t1</ref>t1<sp/>=<sp/>ti</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Initialize<sp/>interpolator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod_1a217b85c539501e805d62c24bcfd27939" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod_1a217b85c539501e805d62c24bcfd27939" kindref="member">tau1</ref>tau1<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod_1a805c6eb66a8397506be953f71f1f0266" kindref="member">initialize_interpolator</ref>initialize_interpolator()</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod_1a2648d0b6a6207723a019de74419400c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1ae4a4039a4689e235dadae74f54858271" kindref="member">t_i</ref><ref refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod_1a2648d0b6a6207723a019de74419400c3" kindref="member">t_i</ref>t_i<sp/>=<sp/>numpy.array([self.<ref refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod_1aae267eb320c435b31fc9690e7ff43036" kindref="member">t1</ref>t1])</highlight></codeline>
<codeline lineno="149" refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod_1ab5e1ebcc18953fda4b9c20ef5e816883" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a3b9c4b14514208e5a2d01a8a5b0135ff" kindref="member">q</ref><ref refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod_1ab5e1ebcc18953fda4b9c20ef5e816883" kindref="member">q</ref>q<sp/>=<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1ae4a4039a4689e235dadae74f54858271" kindref="member">t_i</ref><ref refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod_1a2648d0b6a6207723a019de74419400c3" kindref="member">t_i</ref>t_i.size</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>=======================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Initialize<sp/>Interpolator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>=======================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod_1a805c6eb66a8397506be953f71f1f0266" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod_1a805c6eb66a8397506be953f71f1f0266" kindref="member">initialize_interpolator</ref>(self):</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Computes<sp/>the<sp/>trace<sp/>at<sp/>the<sp/>interpolant<sp/>point.<sp/>This<sp/>function<sp/>is<sp/>used</highlight></codeline>
<codeline lineno="158"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internally.</highlight></codeline>
<codeline lineno="159"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1af274c888accf15a25209c72a67a1b203" kindref="member">verbose</ref>verbose:</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&apos;Initialize<sp/>interpolator<sp/>...&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>schatten_1<sp/>=<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1ab536b71b179a86e3c869f7b1f5e1a113" kindref="member">eval</ref>eval(self.<ref refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod_1aae267eb320c435b31fc9690e7ff43036" kindref="member">t1</ref>t1)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod_1a217b85c539501e805d62c24bcfd27939" kindref="member">tau1</ref>tau1<sp/>=<sp/>schatten_1<sp/>/<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a270087e4ce38285c18c81e79a408d5a8" kindref="member">schatten_B</ref>schatten_B</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1af274c888accf15a25209c72a67a1b203" kindref="member">verbose</ref>verbose:</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&apos;Done.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>interpolate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod_1a1bcd4522d89fd2005679a18065d08dce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod_1a1bcd4522d89fd2005679a18065d08dce" kindref="member">interpolate</ref>(self,<sp/>t):</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="176"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Interpolates<sp/>:math:`\\mathrm{trace}<sp/>\\left(<sp/>(\\mathbf{A}<sp/>+<sp/>t</highlight></codeline>
<codeline lineno="177"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\mathbf{B})^{-1}<sp/>\\right)`<sp/>at<sp/>:math:`t`.</highlight></codeline>
<codeline lineno="178"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="179"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>the<sp/>main<sp/>interface<sp/>function<sp/>of<sp/>this<sp/>module<sp/>and<sp/>it<sp/>is<sp/>used<sp/>after</highlight></codeline>
<codeline lineno="180"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>interpolation</highlight></codeline>
<codeline lineno="181"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>object<sp/>is<sp/>initialized.</highlight></codeline>
<codeline lineno="182"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="183"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>t:<sp/>The<sp/>inquiry<sp/>point(s).</highlight></codeline>
<codeline lineno="184"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:type<sp/>t:<sp/>float,<sp/>list,<sp/>or<sp/>numpy.array</highlight></codeline>
<codeline lineno="185"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="186"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:return:<sp/>The<sp/>interpolated<sp/>value<sp/>of<sp/>the<sp/>trace.</highlight></codeline>
<codeline lineno="187"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:rtype:<sp/>float<sp/>or<sp/>numpy.array</highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Interpolate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tau<sp/>=<sp/>numpy.sqrt(t**2<sp/>+<sp/>(self.<ref refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod_1a217b85c539501e805d62c24bcfd27939" kindref="member">tau1</ref>tau1**2<sp/>-<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a47d85671bdafd1b0d30002c6d50e48e9" kindref="member">tau0</ref>tau0**2<sp/>-</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod_1aae267eb320c435b31fc9690e7ff43036" kindref="member">t1</ref>t1**2)*(t/self.<ref refid="classimate_1_1interpolator_1_1__monomial__basis__functions__method_1_1MonomialBasisFunctionsMethod_1aae267eb320c435b31fc9690e7ff43036" kindref="member">t1</ref>t1)<sp/>+<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a47d85671bdafd1b0d30002c6d50e48e9" kindref="member">tau0</ref>tau0**2)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>schatten<sp/>=<sp/>tau<sp/>*<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a270087e4ce38285c18c81e79a408d5a8" kindref="member">schatten_B</ref>schatten_B</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>schatten</highlight></codeline>
    </programlisting>
    <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/interpolator/_monomial_basis_functions_method.py"/>
  </compounddef>
</doxygen>
