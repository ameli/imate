<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="__inverse__monomial__basis__functions__method_8py" kind="file" language="Python">
    <compoundname>_inverse_monomial_basis_functions_method.py</compoundname>
    <innerclass refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod" prot="public">imate::interpolator::_inverse_monomial_basis_functions_method::InverseMonomialBasisFunctionsMethod</innerclass>
    <innernamespace refid="namespaceimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method">imate::interpolator::_inverse_monomial_basis_functions_method</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespaceimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method" refkind="compound"><highlight class="comment">#<sp/>SPDX-FileCopyrightText:<sp/>Copyright<sp/>2021,<sp/>Siavash<sp/>Ameli<sp/>&lt;sameli@berkeley.edu&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>SPDX-FileType:<sp/>SOURCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it<sp/>under</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>license<sp/>found<sp/>in<sp/>the<sp/>LICENSE.txt<sp/>file<sp/>in<sp/>the<sp/>root<sp/>directory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/>of<sp/>this<sp/>source<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#<sp/>=======</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Imports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/>=======</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>print_function</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>._interpolant_base<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>InterpolantBase</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">#<sp/>=======================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Inverse<sp/>Monomial<sp/>Basis<sp/>Functions<sp/>Method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">#<sp/>=======================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod" kindref="compound">InverseMonomialBasisFunctionsMethod</ref>(<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase" kindref="compound">InterpolantBase</ref>):</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Computes<sp/>the<sp/>trace<sp/>of<sp/>inverse<sp/>of<sp/>an<sp/>invertible<sp/>matrix<sp/>:math:`\\mathbf{A}<sp/>+</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>t<sp/>\\mathbf{B}`<sp/>using<sp/>an<sp/>interpolation<sp/>scheme<sp/>based<sp/>on<sp/>inverse<sp/>monomial</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>basis<sp/>functions<sp/>(see<sp/>details<sp/>below).</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>**Class<sp/>Inheritance:**</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>inheritance-diagram::</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imate.InterpolateTraceinv.InverseMonomialBasisFunctionsMethod</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:parts:<sp/>1</highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>A:<sp/>Invertible<sp/>matrix,<sp/>can<sp/>be<sp/>either<sp/>dense<sp/>or<sp/>sparse<sp/>matrix.</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:type<sp/>A:<sp/>numpy.ndarray</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>B:<sp/>Invertible<sp/>matrix,<sp/>can<sp/>be<sp/>either<sp/>dense<sp/>or<sp/>sparse<sp/>matrix.</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:type<sp/>B:<sp/>numpy.ndarray</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>options:<sp/>A<sp/>dictionary<sp/>of<sp/>input<sp/>arguments<sp/>fo</highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:mod:`imate.traceinv.traceinv`<sp/>module.</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:type<sp/>options:<sp/>dict</highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>verbose:<sp/>If<sp/>``True``,<sp/>prints<sp/>some<sp/>information<sp/>on<sp/>the<sp/>computation</highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>process.<sp/>Default<sp/>is<sp/>``False``.</highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:type<sp/>verbose:<sp/>bool</highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>basis_functions_type:<sp/>One<sp/>of<sp/>the<sp/>types<sp/>``&apos;NonOrthogonal&apos;``,</highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``&apos;Orthogonal&apos;``<sp/>and<sp/>``&apos;Orthogonal2&apos;``.<sp/>Default<sp/>is<sp/>``&apos;orthogonal2&apos;``.</highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:type<sp/>basisFunctionsType:<sp/>string</highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>**Interpolation<sp/>Method**</highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="56"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Define<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\tau(t)<sp/>=<sp/>\\frac{\\mathrm{trace}\\left(<sp/>(\\mathbf{A}<sp/>+</highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>\\mathbf{B})^{-1}<sp/>\\right)}{\\mathrm{trace}(\\mathbf{B}^{-1})}</highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>and<sp/>:math:`\\tau_0<sp/>=<sp/>\\tau(0)`.<sp/>Then,<sp/>we<sp/>approximate<sp/>:math:`\\tau^{-1}(t)`</highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>by</highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="67"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="68"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\frac{1}{\\tau(t)}<sp/>\\approx<sp/>\\frac{1}{\\tau_0}<sp/>+<sp/>\\sum_{i<sp/>=<sp/>0}^q<sp/>w_i</highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\phi_i(t),</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>where<sp/><sp/>:math:`\\phi_i`<sp/>are<sp/>some<sp/>known<sp/>basis<sp/>functions,<sp/>and<sp/>:math:`w_i`<sp/>are</highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>the<sp/>coefficients<sp/>of<sp/>the<sp/>linear<sp/>basis<sp/>functions.<sp/>The<sp/>first<sp/>coefficient<sp/>is</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>set<sp/>to<sp/>:math:`w_{0}<sp/>=<sp/>1`<sp/>and<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>weights<sp/>are<sp/>to<sp/>be<sp/>found<sp/>from</highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>the<sp/>known<sp/>function<sp/>values<sp/>:math:`\\tau_i<sp/>=<sp/>\\tau(t_i)`<sp/>at<sp/>some<sp/>given</highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>interpolant<sp/>points<sp/>:math:`t_i`.</highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>**Basis<sp/>Functions:**</highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>In<sp/>this<sp/>module,<sp/>three<sp/>kinds<sp/>of<sp/>basis<sp/>functions<sp/>which<sp/>can<sp/>be<sp/>set<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="80"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>argument<sp/>``basis_functions_type``.</highlight></codeline>
<codeline lineno="81"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="82"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>When<sp/>``basis_functions_type``<sp/>is<sp/>set<sp/>to<sp/>``NonOrthogonal``,<sp/>the<sp/>basis</highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>functions<sp/>are<sp/>the<sp/>inverse<sp/>of<sp/>the<sp/>monomial<sp/>functions<sp/>defined<sp/>by</highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\phi_i(t)<sp/>=<sp/>t^{\\frac{1}{i+1}},<sp/>\\qquad<sp/>i<sp/>=<sp/>0,<sp/>\\dots,<sp/>q.</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>When<sp/>``basis_functions_type``<sp/>is<sp/>set<sp/>to<sp/>``&apos;Orthogonal&apos;``<sp/>or</highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>``&apos;Orthogonal2&apos;``,<sp/>the<sp/>orthogonal<sp/>form<sp/>of<sp/>the<sp/>above<sp/>basis<sp/>functions<sp/>are</highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>used.<sp/>Orthogonal<sp/>basis<sp/>functions<sp/>are<sp/>formed<sp/>by<sp/>the<sp/>above<sp/>non-orthogonal</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>functions<sp/>as</highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\phi_i^{\\perp}(t)<sp/>=<sp/>\\alpha_i<sp/>\\sum_{j=1}^i<sp/>a_{ij}<sp/>\\phi_j(t)</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>coefficients<sp/>:math:`\\alpha_i`<sp/>and<sp/>:math:`a_{ij}`<sp/>can<sp/>be<sp/>obtained<sp/>by</highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>the<sp/>python<sp/>package<sp/>`Orthogoanl<sp/>Functions</highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&lt;https://ameli.github.io/Orthogonal-Functions&gt;`_.<sp/>These<sp/>coefficients<sp/>are</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>hard-coded<sp/>in<sp/>this<sp/>function<sp/>up<sp/>to<sp/>:math:`i<sp/>=<sp/>9`.<sp/>Thus,<sp/>in<sp/>this<sp/>module,<sp/>up</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>to<sp/>nine<sp/>interpolant<sp/>points<sp/>are<sp/>supported.</highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>warning::</highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>non-orthogonal<sp/>basis<sp/>functions<sp/>can<sp/>lead<sp/>to<sp/>ill-conditioned<sp/>system</highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>equations<sp/>for<sp/>finding<sp/>the<sp/>weight<sp/>coefficients<sp/>:math:`w_i`.<sp/>When<sp/>the</highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number<sp/>of<sp/>interpolating<sp/>points<sp/>is<sp/>large<sp/>(such<sp/>as<sp/>:math:`q<sp/>&gt;<sp/>6`),<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recommended<sp/>to<sp/>use<sp/>the<sp/>orthogonalized<sp/>set<sp/>of<sp/>basis<sp/>functions.</highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>note::</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>recommended<sp/>basis<sp/>function<sp/>type<sp/>is<sp/>``&apos;Orthogonal2&apos;``.</highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>**Example**</highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>class<sp/>can<sp/>be<sp/>invoked<sp/>from</highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:class:`imate.InterpolateTraceinv.InterpolateTraceinv`<sp/>module<sp/>using</highlight></codeline>
<codeline lineno="120"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>``method=&apos;RMBF&apos;``<sp/>argument.</highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python</highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>imate<sp/>import<sp/>generate_matrix</highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>imate<sp/>import<sp/>InterpolateTraceinv</highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Create<sp/>a<sp/>symmetric<sp/>positive-definite<sp/>matrix,<sp/>size<sp/>(20**2,<sp/>20**2)</highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>A<sp/>=<sp/>generate_matrix(size=20)</highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Create<sp/>an<sp/>object<sp/>that<sp/>interpolates<sp/>trace<sp/>of<sp/>inverse<sp/>of<sp/>A+tI</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>where<sp/>I<sp/>is<sp/>identity<sp/>matrix.</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>TI<sp/>=<sp/>InterpolateTraceinv(A,<sp/>method=&apos;RMBF&apos;)</highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Interpolate<sp/>A+tI<sp/>at<sp/>some<sp/>input<sp/>point<sp/>t</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>t<sp/>=<sp/>4e-1</highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>trace<sp/>=<sp/>TI.interpolate(t)</highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>seealso::</highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>other<sp/>class<sp/>that<sp/>provides<sp/>interpolation<sp/>with<sp/>basis<sp/>functions<sp/>method</highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>:mod:`imate.InterpolateTraceinv.Monomialbasis_functionsMethod`.</highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>====</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Init</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>====</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1ad23d11f704a76ece93c37796698b5644" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1ad23d11f704a76ece93c37796698b5644" kindref="member">__init__</ref>(self,<sp/>A,<sp/>B=None,<sp/>p=0,<sp/>ti=[],<sp/>options={},<sp/>verbose=False,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basis_functions_type=&apos;Orthogonal2&apos;):</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="151"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Initializes<sp/>the<sp/>base<sp/>class<sp/>and<sp/>the<sp/>attributes,<sp/>namely,<sp/>the<sp/>computes<sp/>the</highlight></codeline>
<codeline lineno="152"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trace<sp/>at<sp/>interpolant<sp/>points.</highlight></codeline>
<codeline lineno="153"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ti<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ValueError(</highlight><highlight class="stringliteral">&apos;&quot;ti&quot;<sp/>should<sp/>be<sp/>a<sp/>list<sp/>or<sp/>array.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Base<sp/>class<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>super(InverseMonomialBasisFunctionsMethod,<sp/>self).<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1ad23d11f704a76ece93c37796698b5644" kindref="member">__init__</ref>(</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A,<sp/>B=B,<sp/>p=p,<sp/>ti=ti,<sp/>options=options,<sp/>verbose=verbose)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1adddf906bcbd84e2557593a0f6c97b752" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1adddf906bcbd84e2557593a0f6c97b752" kindref="member">basis_functions_type</ref>basis_functions_type<sp/>=<sp/>basis_functions_type</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Initialize<sp/>Interpolator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1af084fb16cc78ff4d2a22d2ec915ffa78" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1af084fb16cc78ff4d2a22d2ec915ffa78" kindref="member">alpha</ref>alpha<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1a6b8e4059f0371249f228542bf0031295" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1a6b8e4059f0371249f228542bf0031295" kindref="member">a</ref>a<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1a7db38c28a3b2716bb850ea8a61401dc7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1a7db38c28a3b2716bb850ea8a61401dc7" kindref="member">w</ref>w<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1af1a24aac10c2ef3d05501a6b1af26dcc" kindref="member">initialize_interpolator</ref>initialize_interpolator()</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>=======================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>initialize<sp/>interpolator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>=======================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1af1a24aac10c2ef3d05501a6b1af26dcc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1af1a24aac10c2ef3d05501a6b1af26dcc" kindref="member">initialize_interpolator</ref>(self):</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="176"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Internal<sp/>function<sp/>that<sp/>is<sp/>called<sp/>by<sp/>the<sp/>class<sp/>constructor.<sp/>It<sp/>computes</highlight></codeline>
<codeline lineno="177"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>weight<sp/>coefficients<sp/>:math:`w_i`<sp/>and<sp/>stores<sp/>them<sp/>in<sp/>the<sp/>member</highlight></codeline>
<codeline lineno="178"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variable<sp/>``self.w``.</highlight></codeline>
<codeline lineno="179"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1af274c888accf15a25209c72a67a1b203" kindref="member">verbose</ref>verbose:</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&apos;Initialize<sp/>interpolator<sp/>...&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Method<sp/>1:<sp/>Use<sp/>non-orthogonal<sp/>basis<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1adddf906bcbd84e2557593a0f6c97b752" kindref="member">basis_functions_type</ref>basis_functions_type<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;NonOrthogonal&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Form<sp/>a<sp/>linear<sp/>system<sp/>for<sp/>weights<sp/>w</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a13fd1ead3c2fb291728d8134f6677487" kindref="member">tau_i</ref>tau_i<sp/>-<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a47d85671bdafd1b0d30002c6d50e48e9" kindref="member">tau0</ref>tau0<sp/>-<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1ae4a4039a4689e235dadae74f54858271" kindref="member">t_i</ref>t_i</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C<sp/>=<sp/>numpy.zeros((self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a3b9c4b14514208e5a2d01a8a5b0135ff" kindref="member">q</ref>q,<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a3b9c4b14514208e5a2d01a8a5b0135ff" kindref="member">q</ref>q))</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a3b9c4b14514208e5a2d01a8a5b0135ff" kindref="member">q</ref>q):</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a3b9c4b14514208e5a2d01a8a5b0135ff" kindref="member">q</ref>q):</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C[i,<sp/>j]<sp/>=<sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1aff990c3677acb01a825fd327d6c80933" kindref="member">basis_functions</ref>basis_functions(j,<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1ae4a4039a4689e235dadae74f54858271" kindref="member">t_i</ref>t_i[i])</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1af274c888accf15a25209c72a67a1b203" kindref="member">verbose</ref>verbose:</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&apos;Condition<sp/>number:<sp/>%f&apos;</highlight><highlight class="normal"><sp/>%<sp/>(numpy.linalg.cond(C)))</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1a7db38c28a3b2716bb850ea8a61401dc7" kindref="member">w</ref>w<sp/>=<sp/>numpy.linalg.solve(C,<sp/>b)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1adddf906bcbd84e2557593a0f6c97b752" kindref="member">basis_functions_type</ref>basis_functions_type<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;Orthogonal&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Method<sp/>2:<sp/>Use<sp/>orthogonal<sp/>basis<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1af084fb16cc78ff4d2a22d2ec915ffa78" kindref="member">alpha</ref>alpha,<sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1a6b8e4059f0371249f228542bf0031295" kindref="member">a</ref>a<sp/>=<sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1a7c5272e89448e04db04eba0bb10a117b" kindref="member">orthogonal_basis_function_coefficients</ref>orthogonal_basis_function_coefficients()</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1af084fb16cc78ff4d2a22d2ec915ffa78" kindref="member">alpha</ref>alpha.size<sp/>&lt;<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1ae4a4039a4689e235dadae74f54858271" kindref="member">t_i</ref>t_i.size:</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ValueError(</highlight><highlight class="stringliteral">&apos;Cannot<sp/>regress<sp/>order<sp/>higher<sp/>than<sp/>%d.<sp/>&apos;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Decrease<sp/>the<sp/>number<sp/>of<sp/>interpolation<sp/>&apos;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;points.&apos;</highlight><highlight class="normal"><sp/>%<sp/>(self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1af084fb16cc78ff4d2a22d2ec915ffa78" kindref="member">alpha</ref>alpha.size))</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Form<sp/>a<sp/>linear<sp/>system<sp/>Cw<sp/>=<sp/>b<sp/>for<sp/>weights<sp/>w</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>numpy.zeros(self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a3b9c4b14514208e5a2d01a8a5b0135ff" kindref="member">q</ref>q+1)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[:-1]<sp/>=<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a13fd1ead3c2fb291728d8134f6677487" kindref="member">tau_i</ref>tau_i<sp/>-<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a47d85671bdafd1b0d30002c6d50e48e9" kindref="member">tau0</ref>tau0</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b[-1]<sp/>=<sp/>1.0</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C<sp/>=<sp/>numpy.zeros((self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a3b9c4b14514208e5a2d01a8a5b0135ff" kindref="member">q</ref>q+1,<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a3b9c4b14514208e5a2d01a8a5b0135ff" kindref="member">q</ref>q+1))</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a3b9c4b14514208e5a2d01a8a5b0135ff" kindref="member">q</ref>q):</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a3b9c4b14514208e5a2d01a8a5b0135ff" kindref="member">q</ref>q+1):</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C[i,<sp/>j]<sp/>=<sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1aff990c3677acb01a825fd327d6c80933" kindref="member">basis_functions</ref>basis_functions(j,<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1ae4a4039a4689e235dadae74f54858271" kindref="member">t_i</ref>t_i[i]/self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1acc462c4406fe65b9fc25a0c1d092dfe5" kindref="member">scale_t</ref>scale_t)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>coefficient<sp/>of<sp/>term<sp/>&quot;t&quot;<sp/>should<sp/>be<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C[-1,<sp/>:]<sp/>=<sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1af084fb16cc78ff4d2a22d2ec915ffa78" kindref="member">alpha</ref>alpha[:self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a3b9c4b14514208e5a2d01a8a5b0135ff" kindref="member">q</ref>q+1]*self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1a6b8e4059f0371249f228542bf0031295" kindref="member">a</ref>a[:self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a3b9c4b14514208e5a2d01a8a5b0135ff" kindref="member">q</ref>q+1,<sp/>0]</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1af274c888accf15a25209c72a67a1b203" kindref="member">verbose</ref>verbose:</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&apos;Condition<sp/>number:<sp/>%f&apos;</highlight><highlight class="normal"><sp/>%<sp/>(numpy.linalg.cond(C)))</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Solve<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1a7db38c28a3b2716bb850ea8a61401dc7" kindref="member">w</ref>w<sp/>=<sp/>numpy.linalg.solve(C,<sp/>b)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1adddf906bcbd84e2557593a0f6c97b752" kindref="member">basis_functions_type</ref>basis_functions_type<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;Orthogonal2&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Method<sp/>3:<sp/>Use<sp/>orthogonal<sp/>basis<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1af084fb16cc78ff4d2a22d2ec915ffa78" kindref="member">alpha</ref>alpha,<sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1a6b8e4059f0371249f228542bf0031295" kindref="member">a</ref>a<sp/>=<sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1a7c5272e89448e04db04eba0bb10a117b" kindref="member">orthogonal_basis_function_coefficients</ref>orthogonal_basis_function_coefficients()</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1af084fb16cc78ff4d2a22d2ec915ffa78" kindref="member">alpha</ref>alpha.size<sp/>&lt;<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1ae4a4039a4689e235dadae74f54858271" kindref="member">t_i</ref>t_i.size:</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ValueError(</highlight><highlight class="stringliteral">&apos;Cannot<sp/>regress<sp/>order<sp/>higher<sp/>than<sp/>%d.<sp/>&apos;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Decrease<sp/>the<sp/>number<sp/>of<sp/>interpolation<sp/>&apos;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;points.&apos;</highlight><highlight class="normal"><sp/>%<sp/>(self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1af084fb16cc78ff4d2a22d2ec915ffa78" kindref="member">alpha</ref>alpha.size))</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Form<sp/>a<sp/>linear<sp/>system<sp/>Aw<sp/>=<sp/>b<sp/>for<sp/>weights<sp/>w</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a13fd1ead3c2fb291728d8134f6677487" kindref="member">tau_i</ref>tau_i<sp/>-<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a47d85671bdafd1b0d30002c6d50e48e9" kindref="member">tau0</ref>tau0<sp/>-<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1ae4a4039a4689e235dadae74f54858271" kindref="member">t_i</ref>t_i</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C<sp/>=<sp/>numpy.zeros((self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a3b9c4b14514208e5a2d01a8a5b0135ff" kindref="member">q</ref>q,<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a3b9c4b14514208e5a2d01a8a5b0135ff" kindref="member">q</ref>q))</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a3b9c4b14514208e5a2d01a8a5b0135ff" kindref="member">q</ref>q):</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a3b9c4b14514208e5a2d01a8a5b0135ff" kindref="member">q</ref>q):</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C[i,<sp/>j]<sp/>=<sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1aff990c3677acb01a825fd327d6c80933" kindref="member">basis_functions</ref>basis_functions(j,<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1ae4a4039a4689e235dadae74f54858271" kindref="member">t_i</ref>t_i[i]/self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1acc462c4406fe65b9fc25a0c1d092dfe5" kindref="member">scale_t</ref>scale_t)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1af274c888accf15a25209c72a67a1b203" kindref="member">verbose</ref>verbose:</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&apos;Condition<sp/>number:<sp/>%f&apos;</highlight><highlight class="normal"><sp/>%<sp/>(numpy.linalg.cond(C)))</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Solve<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1a7db38c28a3b2716bb850ea8a61401dc7" kindref="member">w</ref>w<sp/>=<sp/>numpy.linalg.solve(C,<sp/>b)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Lambda<sp/>=<sp/>1e1<sp/><sp/><sp/>#<sp/>Regularization<sp/>parameter<sp/><sp/>#<sp/>SETTING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>C2<sp/>=<sp/>C.T.dot(C)<sp/>+<sp/>Lambda<sp/>*<sp/>numpy.eye(C.shape[0])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>b2<sp/>=<sp/>C.T.dot(b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>self.w<sp/>=<sp/>numpy.linalg.solve(C2,<sp/>b2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1af274c888accf15a25209c72a67a1b203" kindref="member">verbose</ref>verbose:</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&apos;Done.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Phi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">@staticmethod</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261" refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1a700682399321ad86ff68f59c37151938" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1a700682399321ad86ff68f59c37151938" kindref="member">phi</ref>(i,<sp/>t):</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="263"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Non-orthogonal<sp/>basis<sp/>function,<sp/>which<sp/>is<sp/>defined<sp/>by</highlight></codeline>
<codeline lineno="264"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="265"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="266"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="267"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\phi_i(t)<sp/>=<sp/>t^{\\frac{1}{i}},<sp/>\\qquad<sp/>i<sp/>&gt;<sp/>0.</highlight></codeline>
<codeline lineno="268"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="269"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>t:<sp/>Inquiry<sp/>point.</highlight></codeline>
<codeline lineno="270"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:type<sp/>t:<sp/>float</highlight></codeline>
<codeline lineno="271"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="272"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:return:<sp/>The<sp/>value<sp/>of<sp/>the<sp/>function<sp/>:math:`\\phi(t)`</highlight></codeline>
<codeline lineno="273"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:rtype:<sp/>float</highlight></codeline>
<codeline lineno="274"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t**(1.0/i)</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Basis<sp/>Functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282" refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1aff990c3677acb01a825fd327d6c80933" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1aff990c3677acb01a825fd327d6c80933" kindref="member">basis_functions</ref>(self,<sp/>j,<sp/>t):</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="284"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>basis<sp/>functions<sp/>at<sp/>inquiry<sp/>point<sp/>:math:`t`</highlight></codeline>
<codeline lineno="285"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="286"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>index<sp/>j<sp/>of<sp/>the<sp/>basis<sp/>functions<sp/>should<sp/>start<sp/>from<sp/>1.</highlight></codeline>
<codeline lineno="287"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="288"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>t:<sp/>Inquiry<sp/>point.</highlight></codeline>
<codeline lineno="289"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:type<sp/>t:<sp/>float</highlight></codeline>
<codeline lineno="290"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="291"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:return:<sp/>Basis<sp/>functions<sp/>at<sp/>inquiry<sp/>point.</highlight></codeline>
<codeline lineno="292"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:rtype:<sp/>float</highlight></codeline>
<codeline lineno="293"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="294"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Depending<sp/>on<sp/>``basis_functions_type``,<sp/>the<sp/>basis<sp/>functions<sp/>are:</highlight></codeline>
<codeline lineno="295"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="296"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>For<sp/>``NonOrthogonal``:</highlight></codeline>
<codeline lineno="297"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="298"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="299"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="300"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\phi_i(t)<sp/>=<sp/>t^{\\frac{1}{i}},<sp/>\\qquad<sp/>i<sp/>&gt;<sp/>0</highlight></codeline>
<codeline lineno="301"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="302"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>For<sp/>``Orthogonal``:</highlight></codeline>
<codeline lineno="303"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="304"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="305"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="306"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\phi_i^{\\perp}(t)<sp/>=<sp/>\\alpha_i<sp/>\\sum_{j=1}^9<sp/>a_{ij}<sp/>\\phi_j(t)</highlight></codeline>
<codeline lineno="307"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="308"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>For<sp/>``Orthogona2``:</highlight></codeline>
<codeline lineno="309"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="310"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="311"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="312"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\phi_i^{\\perp}(t)<sp/>=<sp/>\\alpha_i<sp/>\\sum_{j=1}^9<sp/>a_{ij}</highlight></codeline>
<codeline lineno="313"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\phi_{j+1}(t)</highlight></codeline>
<codeline lineno="314"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="315"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>..<sp/>note::</highlight></codeline>
<codeline lineno="316"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="317"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>difference<sp/>between<sp/>``Orthogonal``<sp/>and<sp/>``Orthogonal2``<sp/>is<sp/>that</highlight></codeline>
<codeline lineno="318"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>the<sp/>former,<sp/>the<sp/>functions<sp/>:math:`\\phi_j^{\\perp}`<sp/>at</highlight></codeline>
<codeline lineno="319"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`j=1,<sp/>\\dots,<sp/>9`<sp/>are<sp/>orthogonal<sp/>but<sp/>in<sp/>the<sp/>latter,<sp/>the</highlight></codeline>
<codeline lineno="320"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functions<sp/>at<sp/>:math:`j=2,<sp/>\\dots,<sp/>9`<sp/>are<sp/>orthogonal.<sp/>That<sp/>is<sp/>they</highlight></codeline>
<codeline lineno="321"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>are<sp/>not<sp/>orthogonal<sp/>to<sp/>:math:`\\phi_1(t)<sp/>=<sp/>t`.</highlight></codeline>
<codeline lineno="322"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1adddf906bcbd84e2557593a0f6c97b752" kindref="member">basis_functions_type</ref>basis_functions_type<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;NonOrthogonal&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>InverseMonomialBasisFunctionsMethod.phi(j+2,<sp/>t)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1adddf906bcbd84e2557593a0f6c97b752" kindref="member">basis_functions_type</ref>basis_functions_type<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;Orthogonal&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Use<sp/>Orthogonal<sp/>basis<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha,<sp/>a<sp/>=<sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1a7c5272e89448e04db04eba0bb10a117b" kindref="member">orthogonal_basis_function_coefficients</ref>orthogonal_basis_function_coefficients()</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phi_perp<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(a.shape[1]):</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phi_perp<sp/>+=<sp/>alpha[j]*a[j,<sp/>i]<sp/>*<sp/>\</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InverseMonomialBasisFunctionsMethod.phi(i+1,<sp/>t)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>phi_perp</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1adddf906bcbd84e2557593a0f6c97b752" kindref="member">basis_functions_type</ref>basis_functions_type<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;Orthogonal2&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Use<sp/>Orthogonal<sp/>basis<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha,<sp/>a<sp/>=<sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1a7c5272e89448e04db04eba0bb10a117b" kindref="member">orthogonal_basis_function_coefficients</ref>orthogonal_basis_function_coefficients()</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phi_perp<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(a.shape[1]):</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phi_perp<sp/>+=<sp/>alpha[j]*a[j,<sp/>i]<sp/>*<sp/>\</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InverseMonomialBasisFunctionsMethod.phi(i+2,<sp/>t)</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>phi_perp</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ValueError(</highlight><highlight class="stringliteral">&apos;Method<sp/>is<sp/>invalid.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>======================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>orthogonal<sp/>basis<sp/>function<sp/>coefficients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>======================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358" refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1a7c5272e89448e04db04eba0bb10a117b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1a7c5272e89448e04db04eba0bb10a117b" kindref="member">orthogonal_basis_function_coefficients</ref>(self):</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="360"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Hard-coded<sp/>coefficients<sp/>:math:`\\alpha_i`<sp/>and<sp/>:math:`a_{ij}`<sp/>which<sp/>will</highlight></codeline>
<codeline lineno="361"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>be<sp/>used<sp/>by<sp/>:func:`basis_functions`<sp/>to<sp/>form<sp/>the<sp/>orthogonal<sp/>basis:</highlight></codeline>
<codeline lineno="362"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="363"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="364"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="365"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\phi_i^{\\perp}(t)<sp/>=<sp/>\\alpha_i<sp/>\\sum_{j=0}^9<sp/>a_{ij}<sp/>\\phi_j(t).</highlight></codeline>
<codeline lineno="366"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="367"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**Generate<sp/>coefficients:**</highlight></codeline>
<codeline lineno="368"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="369"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>To<sp/>generate<sp/>these<sp/>coefficients,<sp/>see<sp/>the<sp/>python<sp/>package</highlight></codeline>
<codeline lineno="370"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>`Orthogonal<sp/>Functions<sp/>&lt;https://ameli.github.io/Orthogonal-Functions&gt;`_.</highlight></codeline>
<codeline lineno="371"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="372"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Install<sp/>this<sp/>package<sp/>by</highlight></codeline>
<codeline lineno="373"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="374"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::</highlight></codeline>
<codeline lineno="375"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="376"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pip<sp/>install<sp/>OrthogonalFunctions</highlight></codeline>
<codeline lineno="377"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="378"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>To<sp/>generate<sp/>the<sp/>coefficients<sp/>corresponding<sp/>to<sp/>``Orthogonal``<sp/>basis:</highlight></codeline>
<codeline lineno="379"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="380"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::</highlight></codeline>
<codeline lineno="381"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="382"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gen-orth<sp/>-n<sp/>9<sp/>-s<sp/>0</highlight></codeline>
<codeline lineno="383"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="384"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>To<sp/>generate<sp/>the<sp/>coefficients<sp/>corresponding<sp/>to<sp/>``Orthogonal2``<sp/>basis:</highlight></codeline>
<codeline lineno="385"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="386"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::</highlight></codeline>
<codeline lineno="387"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="388"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gen-orth<sp/>-n<sp/>9<sp/>-s<sp/>1</highlight></codeline>
<codeline lineno="389"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="390"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:return:<sp/>Weight<sp/>coefficients<sp/>of<sp/>the<sp/>orthogonal<sp/>basis<sp/>functions.</highlight></codeline>
<codeline lineno="391"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:rtype:<sp/>numpy.array,<sp/>numpy.ndarray</highlight></codeline>
<codeline lineno="392"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>9</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>numpy.zeros((q,<sp/>q),<sp/>dtype=float)</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1adddf906bcbd84e2557593a0f6c97b752" kindref="member">basis_functions_type</ref>basis_functions_type<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;Orthogonal&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha<sp/>=<sp/>numpy.array([</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+numpy.sqrt(2.0/1.0),</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-numpy.sqrt(2.0/2.0),</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+numpy.sqrt(2.0/3.0),</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-numpy.sqrt(2.0/4.0),</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+numpy.sqrt(2.0/5.0),</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-numpy.sqrt(2.0/6.0),</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+numpy.sqrt(2.0/7.0),</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-numpy.sqrt(2.0/8.0),</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+numpy.sqrt(2.0/9.0)])</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[0,<sp/>:1]<sp/>=<sp/>numpy.array([1])</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[1,<sp/>:2]<sp/>=<sp/>numpy.array([4,<sp/>-3])</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[2,<sp/>:3]<sp/>=<sp/>numpy.array([9,<sp/>-18,<sp/>10])</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[3,<sp/>:4]<sp/>=<sp/>numpy.array([16,<sp/>-60,<sp/>80,<sp/>-35])</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[4,<sp/>:5]<sp/>=<sp/>numpy.array([25,<sp/>-150,<sp/>350,<sp/>-350,<sp/>126])</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[5,<sp/>:6]<sp/>=<sp/>numpy.array([36,<sp/>-315,<sp/>1120,<sp/>-1890,<sp/>1512,<sp/>-462])</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[6,<sp/>:7]<sp/>=<sp/>numpy.array([49,<sp/>-588,<sp/>2940,<sp/>-7350,<sp/>9702,<sp/>-6468,<sp/>1716])</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[7,<sp/>:8]<sp/>=<sp/>numpy.array([64,<sp/>-1008,<sp/>6720,<sp/>-23100,<sp/>44352,<sp/>-48048,</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>27456,<sp/>-6435])</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[8,<sp/>:9]<sp/>=<sp/>numpy.array([81,<sp/>-1620,<sp/>13860,<sp/>-62370,<sp/>162162,<sp/>-252252,</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>231660,<sp/>-115830,<sp/>24310])</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1adddf906bcbd84e2557593a0f6c97b752" kindref="member">basis_functions_type</ref>basis_functions_type<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;Orthogonal2&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alpha<sp/>=<sp/>numpy.array([</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+numpy.sqrt(2.0/2.0),</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-numpy.sqrt(2.0/3.0),</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+numpy.sqrt(2.0/4.0),</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-numpy.sqrt(2.0/5.0),</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+numpy.sqrt(2.0/6.0),</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-numpy.sqrt(2.0/7.0),</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+numpy.sqrt(2.0/8.0),</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-numpy.sqrt(2.0/9.0),</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+numpy.sqrt(2.0/10.0)])</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[0,<sp/>:1]<sp/>=<sp/>numpy.array([1])</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[1,<sp/>:2]<sp/>=<sp/>numpy.array([6,<sp/>-5])</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[2,<sp/>:3]<sp/>=<sp/>numpy.array([20,<sp/>-40,<sp/>21])</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[3,<sp/>:4]<sp/>=<sp/>numpy.array([50,<sp/>-175,<sp/>210,<sp/>-84])</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[4,<sp/>:5]<sp/>=<sp/>numpy.array([105,<sp/>-560,<sp/>1134,<sp/>-1008,<sp/>330])</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[5,<sp/>:6]<sp/>=<sp/>numpy.array([196,<sp/>-1470,<sp/>4410,<sp/>-6468,<sp/>4620,<sp/>-1287])</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[6,<sp/>:7]<sp/>=<sp/>numpy.array([336,<sp/>-3360,<sp/>13860,<sp/>-29568,<sp/>34320,<sp/>-20592,</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5005])</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[7,<sp/>:8]<sp/>=<sp/>numpy.array([540,<sp/>-6930,<sp/>37422,<sp/>-108108,<sp/>180180,</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-173745,<sp/>90090,<sp/>-19448])</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a[8,<sp/>:9]<sp/>=<sp/>numpy.array([825,<sp/>-13200,<sp/>90090,<sp/>-336336,<sp/>750750,</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1029600,<sp/>850850,<sp/>-388960,<sp/>75582])</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alpha,<sp/>a</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>interpolate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452" refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1af6bd58b74cf5f9e51124e414f9e5a7d2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1af6bd58b74cf5f9e51124e414f9e5a7d2" kindref="member">interpolate</ref>(self,<sp/>t):</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="454"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Interpolates<sp/>:math:`\\mathrm{trace}<sp/>\\left(<sp/>(\\mathbf{A}<sp/>+</highlight></codeline>
<codeline lineno="455"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>\\mathbf{B})^{-1}<sp/>\\right)`<sp/>at<sp/>:math:`t`.</highlight></codeline>
<codeline lineno="456"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="457"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>the<sp/>main<sp/>interface<sp/>function<sp/>of<sp/>this<sp/>module<sp/>and<sp/>it<sp/>is<sp/>used<sp/>after</highlight></codeline>
<codeline lineno="458"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>interpolation</highlight></codeline>
<codeline lineno="459"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>object<sp/>is<sp/>initialized.</highlight></codeline>
<codeline lineno="460"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="461"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>t:<sp/>The<sp/>inquiry<sp/>point(s).</highlight></codeline>
<codeline lineno="462"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:type<sp/>t:<sp/>float,<sp/>list,<sp/>or<sp/>numpy.array</highlight></codeline>
<codeline lineno="463"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="464"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:return:<sp/>The<sp/>interpolated<sp/>value<sp/>of<sp/>the<sp/>trace.</highlight></codeline>
<codeline lineno="465"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:rtype:<sp/>float<sp/>or<sp/>numpy.array</highlight></codeline>
<codeline lineno="466"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="467"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**Details:**</highlight></codeline>
<codeline lineno="468"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="469"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Depending<sp/>on<sp/>the<sp/>``basis_functions_type``,<sp/>the<sp/>interpolation<sp/>is<sp/>as</highlight></codeline>
<codeline lineno="470"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>follows:</highlight></codeline>
<codeline lineno="471"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="472"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>For<sp/>``&apos;NonOrthogonal&apos;``<sp/>basis:</highlight></codeline>
<codeline lineno="473"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="474"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="475"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="476"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\frac{1}{\\tau(t)}<sp/>=<sp/>\\frac{1}{\\tau_0}<sp/>+<sp/>t<sp/>+<sp/>\\sum_{j=1}^q<sp/>w_j</highlight></codeline>
<codeline lineno="477"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\phi_j(t).</highlight></codeline>
<codeline lineno="478"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="479"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>For<sp/>``&apos;Orthogonal&apos;``<sp/>and<sp/>``&apos;Orthogonal2&apos;``<sp/>bases:</highlight></codeline>
<codeline lineno="480"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="481"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="482"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="483"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\frac{1}{\\tau(t)}<sp/>=<sp/>\\frac{1}{\\tau_0}<sp/>+<sp/>t<sp/>+<sp/>\\sum_{j=1}^q<sp/>w_j</highlight></codeline>
<codeline lineno="484"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\phi_j(t).</highlight></codeline>
<codeline lineno="485"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Interpolation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1adddf906bcbd84e2557593a0f6c97b752" kindref="member">basis_functions_type</ref>basis_functions_type<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;NonOrthogonal&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>=<sp/>0.0</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a3b9c4b14514208e5a2d01a8a5b0135ff" kindref="member">q</ref>q):</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>+=<sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1a7db38c28a3b2716bb850ea8a61401dc7" kindref="member">w</ref>w[j]<sp/>*<sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1aff990c3677acb01a825fd327d6c80933" kindref="member">basis_functions</ref>basis_functions(j,<sp/>t)</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tau<sp/>=<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a47d85671bdafd1b0d30002c6d50e48e9" kindref="member">tau0</ref>tau0<sp/>+<sp/>S<sp/>+<sp/>t</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1adddf906bcbd84e2557593a0f6c97b752" kindref="member">basis_functions_type</ref>basis_functions_type<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;Orthogonal&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>=<sp/>0.0</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1a7db38c28a3b2716bb850ea8a61401dc7" kindref="member">w</ref>w.size):</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>+=<sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1a7db38c28a3b2716bb850ea8a61401dc7" kindref="member">w</ref>w[j]<sp/>*<sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1aff990c3677acb01a825fd327d6c80933" kindref="member">basis_functions</ref>basis_functions(j,<sp/>t/self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1acc462c4406fe65b9fc25a0c1d092dfe5" kindref="member">scale_t</ref>scale_t)</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tau<sp/>=<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a47d85671bdafd1b0d30002c6d50e48e9" kindref="member">tau0</ref>tau0<sp/>+<sp/>S</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1adddf906bcbd84e2557593a0f6c97b752" kindref="member">basis_functions_type</ref>basis_functions_type<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;Orthogonal2&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>=<sp/>0.0</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a3b9c4b14514208e5a2d01a8a5b0135ff" kindref="member">q</ref>q):</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/>+=<sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1a7db38c28a3b2716bb850ea8a61401dc7" kindref="member">w</ref>w[j]<sp/>*<sp/>self.<ref refid="classimate_1_1interpolator_1_1__inverse__monomial__basis__functions__method_1_1InverseMonomialBasisFunctionsMethod_1aff990c3677acb01a825fd327d6c80933" kindref="member">basis_functions</ref>basis_functions(j,<sp/>t/self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1acc462c4406fe65b9fc25a0c1d092dfe5" kindref="member">scale_t</ref>scale_t)</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tau<sp/>=<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a47d85671bdafd1b0d30002c6d50e48e9" kindref="member">tau0</ref>tau0<sp/>+<sp/>S<sp/>+<sp/>t</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>schatten<sp/>=<sp/>tau<sp/>*<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a270087e4ce38285c18c81e79a408d5a8" kindref="member">schatten_B</ref>schatten_B</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>schatten</highlight></codeline>
    </programlisting>
    <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/interpolator/_inverse_monomial_basis_functions_method.py"/>
  </compounddef>
</doxygen>
