<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="trace_8py" kind="file" language="Python">
    <compoundname>trace.py</compoundname>
    <innernamespace refid="namespaceimate_1_1trace_1_1trace">imate::trace::trace</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespaceimate_1_1trace_1_1trace" refkind="compound"><highlight class="comment">#<sp/>SPDX-FileCopyrightText:<sp/>Copyright<sp/>2021,<sp/>Siavash<sp/>Ameli<sp/>&lt;sameli@berkeley.edu&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>SPDX-FileType:<sp/>SOURCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>license<sp/>found<sp/>in<sp/>the<sp/>LICENSE.txt<sp/>file<sp/>in<sp/>the<sp/>root</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/>directory<sp/>of<sp/>this<sp/>source<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#<sp/>=======</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Imports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/>=======</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>._exact_method<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>exact_method</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>._eigenvalue_method<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>eigenvalue_method</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>._slq_method<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>slq_method</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">#<sp/>=====</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">#<sp/>trace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">#<sp/>=====</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="namespaceimate_1_1trace_1_1trace_1a206ae6c64fe73e263a6da1b0adb8fbff" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceimate_1_1trace_1_1trace_1a206ae6c64fe73e263a6da1b0adb8fbff" kindref="member">trace</ref>(</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gram=False,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p=1.0,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_info=False,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method=&apos;exact&apos;,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**options):</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Trace<sp/>of<sp/>matrix<sp/>or<sp/>linear<sp/>operator.</highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Given<sp/>the<sp/>matrix<sp/>or<sp/>the<sp/>linear<sp/>operator<sp/>:math:`\\mathbf{A}`<sp/>and<sp/>the<sp/>real</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>non-negative<sp/>exponent<sp/>:math:`p<sp/>\\geq<sp/>0`,<sp/>the<sp/>following<sp/>is<sp/>computed:</highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\mathrm{trace}<sp/>\\left(\\mathbf{A}^p<sp/>\\right).</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>If<sp/>``gram``<sp/>is<sp/>`True`,<sp/>then<sp/>:math:`\\mathbf{A}`<sp/>in<sp/>the<sp/>above<sp/>is<sp/>replaced<sp/>by</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>the<sp/>Gramian<sp/>matrix<sp/>:math:`\\mathbf{A}^{\\intercal}<sp/>\\mathbf{A}`,<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>following<sp/>is<sp/>instead<sp/>computed:</highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\mathrm{trace}<sp/>\\left((\\mathbf{A}^{\\intercal}\\mathbf{A})^p</highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\right).</highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>If<sp/>:math:`\\mathbf{A}<sp/>=<sp/>\\mathbf{A}(t)`<sp/>is<sp/>a<sp/>linear<sp/>operator<sp/>of<sp/>the<sp/>class</highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:class:`imate.AffineMatrixFunction`<sp/>with<sp/>the<sp/>parameter<sp/>:math:`t`,<sp/>then<sp/>for</highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>an<sp/>input<sp/><sp/>tuple<sp/>:math:`t<sp/>=<sp/>(t_1,<sp/>\\dots,<sp/>t_q)`,<sp/>an<sp/>array<sp/>output<sp/>of<sp/>the<sp/>size</highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:math:`q`<sp/>is<sp/>returned,<sp/>namely:</highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="56"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\mathrm{trace}<sp/>\\left((\\mathbf{A}(t_i))^p<sp/>\\right),</highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\quad<sp/>i=1,<sp/>\\dots,<sp/>q.</highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>A<sp/>:<sp/>numpy.ndarray,<sp/>scipy.sparse,<sp/>:class:`imate.Matrix`,<sp/>or<sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:class:`imate.AffineMatrixFunction`</highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>non-singular<sp/>sparse<sp/>or<sp/>dense<sp/>matrix<sp/>or<sp/>linear<sp/>operator.<sp/>The<sp/>linear</highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operators<sp/>:class:`imate.Matrix`<sp/>and<sp/>:class:`imate.AffineMatrixFunction`</highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can<sp/>be<sp/>used<sp/>only<sp/>if<sp/>``method=slq``.<sp/>See<sp/>details<sp/>in</highlight></codeline>
<codeline lineno="67"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:ref:`slq<sp/>method<sp/>&lt;imate.trace.slq&gt;`.<sp/>If<sp/>``method=slq``<sp/>and</highlight></codeline>
<codeline lineno="68"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``gram=False``,<sp/>the<sp/>input<sp/>matrix<sp/>`A`<sp/>should<sp/>be<sp/>symmetric.</highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>gram<sp/>:<sp/>bool,<sp/>default=False</highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>`True`,<sp/>the<sp/>trace<sp/>of<sp/>the<sp/>Gramian<sp/>matrix,</highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`(\\mathbf{A}^{\\intercal}\\mathbf{A})^p`,<sp/>is<sp/>computed.<sp/>The</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Gramian<sp/>matrix<sp/>itself<sp/>is<sp/>not<sp/>directly<sp/>computed.<sp/>If<sp/>`False`,<sp/>the</highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trace<sp/>of<sp/>:math:`\\mathbf{A}^p`<sp/>is<sp/>computed.</highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>p<sp/>:<sp/>float,<sp/>default=1.0</highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>exponent<sp/>:math:`p`<sp/>in<sp/>:math:`\\mathbf{A}^p`.</highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>``method=exact``,<sp/>:math:`p`<sp/>should<sp/>be<sp/>a<sp/>non-negative<sp/>integer.</highlight></codeline>
<codeline lineno="80"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>``method=eigenvalue``,<sp/>:math:`p`<sp/>can<sp/>be<sp/>any<sp/>real<sp/>number.<sp/></highlight></codeline>
<codeline lineno="81"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>``method=slq``,<sp/>:math:`p`<sp/>should<sp/>be<sp/>non-negative<sp/>real<sp/>number.</highlight></codeline>
<codeline lineno="82"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>..<sp/>note::</highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>:math:`p<sp/>&lt;<sp/>0`,<sp/>use<sp/>:func:`imate.traceinv`<sp/>function.</highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return_info<sp/>:<sp/>bool,<sp/>default=False</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>`True`,<sp/>this<sp/>function<sp/>also<sp/>returns<sp/>a<sp/>dictionary<sp/>containing</highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>information<sp/>about<sp/>the<sp/>inner<sp/>computation,<sp/>such<sp/>as<sp/>process<sp/>time,</highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>algorithm<sp/>settings,<sp/>etc.<sp/>See<sp/>the<sp/>documentation<sp/>for<sp/>each<sp/>`method`<sp/>for</highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details.</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>method<sp/>:<sp/>{&apos;exact&apos;,<sp/>&apos;eigenvalue&apos;,<sp/>&apos;slq&apos;},<sp/>default=&apos;exact&apos;</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>method<sp/>of<sp/>computing<sp/>trace.<sp/>See<sp/>documentation<sp/>for<sp/>each<sp/>method:</highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>:ref:`exact<sp/>&lt;imate.trace.exact&gt;`</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>:ref:`eigenvalue<sp/>&lt;imate.trace.eigenvalue&gt;`</highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>:ref:`slq<sp/>&lt;imate.trace.slq&gt;`</highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>options<sp/>:<sp/>`**kwargs`</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Extra<sp/>arguments<sp/>that<sp/>are<sp/>specific<sp/>to<sp/>each<sp/>method.<sp/>See<sp/>the<sp/>documentation</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>each<sp/>`method`<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>trace<sp/>:<sp/>float<sp/>or<sp/>numpy.array</highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Trace<sp/>of<sp/>matrix.<sp/>If<sp/>``method=slq``<sp/>and<sp/>if<sp/>`A`<sp/>is<sp/>of<sp/>type</highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:class:`imate.AffineMatrixFunction`<sp/>with<sp/>an<sp/>array<sp/>of<sp/>``parameters``,</highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>then<sp/>the<sp/>output<sp/>is<sp/>an<sp/>array.</highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>info<sp/>:<sp/>dict</highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Only<sp/>if<sp/>``return_info``<sp/>is<sp/>`True`)<sp/>A<sp/>dictionary<sp/>of<sp/>information<sp/>with<sp/>at</highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>least<sp/>the<sp/>following<sp/>keys.<sp/>Further<sp/>keys<sp/>specific<sp/>to<sp/>each<sp/>method<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>in<sp/>the<sp/>documentation<sp/>of<sp/>each<sp/>method.</highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``matrix``:</highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``data_type``:<sp/>`str`,<sp/>{`float32`,<sp/>`float64`,<sp/>`float128`},<sp/>type<sp/>of</highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>matrix<sp/>data.</highlight></codeline>
<codeline lineno="120"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``gram``:<sp/>`bool`,<sp/>whether<sp/>the<sp/>matrix<sp/>`A`<sp/>or<sp/>its<sp/>Gramian<sp/>is</highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>considered.</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``exponent``:<sp/>`float`,<sp/>the<sp/>exponent<sp/>`p`<sp/>in<sp/>:math:`\\mathbf{A}^p`.</highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``size``:<sp/>`int`,<sp/>The<sp/>size<sp/>of<sp/>matrix<sp/>`A`.</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``sparse``:<sp/>`bool`,<sp/>whether<sp/>the<sp/>matrix<sp/>`A`<sp/>is<sp/>sparse<sp/>or<sp/>dense.</highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``nnz``:<sp/>`int`,<sp/>if<sp/>`A`<sp/>is<sp/>sparse,<sp/>the<sp/>number<sp/>of<sp/>non-zero<sp/>elements</highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>`A`.</highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``density``:<sp/>`float`,<sp/>if<sp/>`A`<sp/>is<sp/>sparse,<sp/>the<sp/>density<sp/>of<sp/>`A`,<sp/>which</highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>the<sp/>`nnz`<sp/>divided<sp/>by<sp/>size<sp/>squared.</highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``num_inquiries``:<sp/>`int`,<sp/>The<sp/>size<sp/>of<sp/>inquiries<sp/>of<sp/>each<sp/>parameter</highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>linear<sp/>operator<sp/>`A`.<sp/>If<sp/>`A`<sp/>is<sp/>a<sp/>matrix,<sp/>this<sp/>is<sp/>always</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>`1`.<sp/>For<sp/>more<sp/>details<sp/>see<sp/>:ref:`slq<sp/>method<sp/>&lt;imate.trace.slq&gt;`.</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``device``:</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``num_cpu_threads``:<sp/>`int`,<sp/>number<sp/>of<sp/>CPU<sp/>threads<sp/>used<sp/>in<sp/>shared</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memory<sp/>parallel<sp/>processing.</highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``num_gpu_devices``:<sp/>`int`,<sp/>number<sp/>of<sp/>GPU<sp/>devices<sp/>used<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multi-GPU<sp/>(GPU<sp/>farm)<sp/>computation.</highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``num_gpu_multiprocessors``:<sp/>`int`,<sp/>number<sp/>of<sp/>GPU</highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multi-processors.</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``num_gpu_threads_per_multiprocessor``:<sp/>`int`,<sp/>number<sp/>of<sp/>GPU</highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threads<sp/>on<sp/>each<sp/>GPU<sp/>multi-processor.</highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``time``:</highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``tot_wall_time``:<sp/>`float`,<sp/>total<sp/>elapsed<sp/>time<sp/>of<sp/>computation.</highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``alg_wall_time``:<sp/>`float`,<sp/>elapsed<sp/>time<sp/>of<sp/>computation<sp/>during</highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>only<sp/>the<sp/>algorithm<sp/>execution.</highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``cpu_proc_time``:<sp/>`float`,<sp/>CPU<sp/>processing<sp/>time<sp/>of<sp/>computation.</highlight></codeline>
<codeline lineno="148"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``solver``:</highlight></codeline>
<codeline lineno="150"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``version``:<sp/>`str`,<sp/>version<sp/>of<sp/>imate.</highlight></codeline>
<codeline lineno="151"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``method``:<sp/>`str`,<sp/>method<sp/>of<sp/>computation.</highlight></codeline>
<codeline lineno="152"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="153"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Raises</highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>------</highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>ImportError</highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>package<sp/>has<sp/>not<sp/>been<sp/>compiled<sp/>with<sp/>GPU<sp/>support,<sp/>but<sp/>``gpu``<sp/>is</highlight></codeline>
<codeline lineno="158"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>`True`.<sp/>Either<sp/>set<sp/>``gpu``<sp/>to<sp/>`False`<sp/>to<sp/>use<sp/>the<sp/>existing<sp/>installed</highlight></codeline>
<codeline lineno="159"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>package.<sp/>Alternatively,<sp/>export<sp/>the<sp/>environment<sp/>variable<sp/>``USE_CUDA=1``</highlight></codeline>
<codeline lineno="160"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>recompile<sp/>the<sp/>source<sp/>code<sp/>of<sp/>the<sp/>package.</highlight></codeline>
<codeline lineno="161"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="162"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>See<sp/>Also</highlight></codeline>
<codeline lineno="163"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>--------</highlight></codeline>
<codeline lineno="164"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="165"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>imate.logdet</highlight></codeline>
<codeline lineno="166"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>imate.traceinv</highlight></codeline>
<codeline lineno="167"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>imate.schatten</highlight></codeline>
<codeline lineno="168"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Notes</highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-----</highlight></codeline>
<codeline lineno="171"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="172"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>**Method<sp/>of<sp/>Computation:**</highlight></codeline>
<codeline lineno="173"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="174"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>See<sp/>documentation<sp/>for<sp/>each<sp/>method<sp/>below.</highlight></codeline>
<codeline lineno="175"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="176"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>*<sp/>:ref:`exact<sp/>&lt;imate.trace.exact&gt;`:<sp/>Computes<sp/>trace<sp/>directly<sp/>from<sp/>its</highlight></codeline>
<codeline lineno="177"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>diagonal<sp/>entries.<sp/>This<sp/>is<sp/>used<sp/>when<sp/>:math:`p`<sp/>is<sp/>integer.<sp/>If<sp/>:math:`p=1`,</highlight></codeline>
<codeline lineno="178"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>method<sp/>is<sp/>preferred.</highlight></codeline>
<codeline lineno="179"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>*<sp/>:ref:`eigenvalue<sp/>&lt;imate.trace.eigenvalue&gt;`:<sp/>uses<sp/>spectral<sp/>decomposition.</highlight></codeline>
<codeline lineno="180"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>Suitable<sp/>for<sp/>small<sp/>matrices<sp/>(:math:`n<sp/>&lt;<sp/>2^{12}`).<sp/>The<sp/>solution<sp/>is<sp/>exact.</highlight></codeline>
<codeline lineno="181"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>*<sp/>:ref:`slq<sp/>&lt;imate.trace.slq&gt;`:<sp/>uses<sp/>stochastic<sp/>Lanczos<sp/>quadrature<sp/>(SLQ),</highlight></codeline>
<codeline lineno="182"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>which<sp/>is<sp/>a<sp/>randomized<sp/>algorithm.<sp/>Can<sp/>be<sp/>used<sp/>on<sp/>very<sp/>large<sp/>matrices</highlight></codeline>
<codeline lineno="183"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>(:math:`n<sp/>&gt;<sp/>2^{12}`).<sp/>The<sp/>solution<sp/>is<sp/>an<sp/>approximation.</highlight></codeline>
<codeline lineno="184"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="185"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>note::</highlight></codeline>
<codeline lineno="186"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="187"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>:math:`p=1`<sp/>and<sp/>``gram``<sp/>is<sp/>`False`,<sp/>always<sp/>use<sp/>`exact`<sp/>method.</highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>:math:`p`<sp/>is<sp/>non-integer,<sp/>you<sp/>may<sp/>use<sp/>`eigenvalue`<sp/>or<sp/>`slq`<sp/>method,</highlight></codeline>
<codeline lineno="189"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>though,<sp/>for<sp/>large<sp/>matrices,<sp/>the<sp/>`slq`<sp/>method<sp/>is<sp/>preferred.</highlight></codeline>
<codeline lineno="190"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="191"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>**Input<sp/>Matrix:**</highlight></codeline>
<codeline lineno="192"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="193"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>input<sp/>`A`<sp/>can<sp/>be<sp/>either<sp/>of:</highlight></codeline>
<codeline lineno="194"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="195"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>*<sp/>A<sp/>matrix,<sp/>such<sp/>as<sp/>`numpy.ndarray`,<sp/>or<sp/>`scipy.sparse`.</highlight></codeline>
<codeline lineno="196"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>*<sp/>A<sp/>linear<sp/>operator<sp/>representing<sp/>a<sp/>matrix<sp/>using<sp/>:class:`imate.Matrix`<sp/>(</highlight></codeline>
<codeline lineno="197"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>only<sp/>if<sp/>``method=slq``).</highlight></codeline>
<codeline lineno="198"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>*<sp/>A<sp/>linear<sp/>operator<sp/>representing<sp/>a<sp/>one-parameter<sp/>family<sp/>of<sp/>an<sp/>affine<sp/>matrix</highlight></codeline>
<codeline lineno="199"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>function<sp/>:math:`t<sp/>\\mapsto<sp/>\\mathbf{A}<sp/>+<sp/>t\\mathbf{B}`,<sp/>using</highlight></codeline>
<codeline lineno="200"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>:class:`imate.AffineMatrixFunction`<sp/>(only<sp/>if<sp/>``method=slq``).</highlight></codeline>
<codeline lineno="201"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="202"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>**Output:**</highlight></codeline>
<codeline lineno="203"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="204"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>output<sp/>is<sp/>a<sp/>scalar.<sp/>However,<sp/>if<sp/>`A`<sp/>is<sp/>the<sp/>linear<sp/>operator<sp/>of<sp/>the<sp/>type</highlight></codeline>
<codeline lineno="205"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:class:`imate.AffineMatrixFunction`<sp/>representing<sp/>the<sp/>matrix<sp/>function</highlight></codeline>
<codeline lineno="206"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:math:`\\mathbf{A}(t)<sp/>=<sp/>\\mathbf{A}<sp/>+<sp/>t<sp/>\\mathbf{B}`,<sp/>then<sp/>if<sp/>the<sp/>parameter</highlight></codeline>
<codeline lineno="207"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:math:`t`<sp/>is<sp/>given<sp/>as<sp/>the<sp/>tuple<sp/>:math:`t<sp/>=<sp/>(t_1,<sp/>\\dots,<sp/>t_q)`,<sp/>then<sp/>the</highlight></codeline>
<codeline lineno="208"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>output<sp/>of<sp/>this<sp/>function<sp/>is<sp/>an<sp/>array<sp/>of<sp/>size<sp/>:math:`q`<sp/>corresponding<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="209"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>trace<sp/>of<sp/>each<sp/>:math:`\\mathbf{A}(t_i)`.</highlight></codeline>
<codeline lineno="210"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="211"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>note::</highlight></codeline>
<codeline lineno="212"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="213"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>`A`<sp/>represents</highlight></codeline>
<codeline lineno="214"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`\\mathbf{A}(t)<sp/>=<sp/>\\mathbf{A}<sp/>+<sp/>t<sp/>\\mathbf{I}`,<sp/>where</highlight></codeline>
<codeline lineno="215"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`\\mathbf{I}`<sp/>is<sp/>the<sp/>identity<sp/>matrix,<sp/>and<sp/>:math:`t`<sp/>is<sp/>given<sp/>by</highlight></codeline>
<codeline lineno="216"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>tuple<sp/>:math:`t<sp/>=<sp/>(t_1,<sp/>\\dots,<sp/>t_q)`,<sp/>by<sp/>setting<sp/>``method=slq``,<sp/>the</highlight></codeline>
<codeline lineno="217"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>computational<sp/>cost<sp/>of<sp/>an<sp/>array<sp/>output<sp/>of<sp/>size<sp/>`q`<sp/>is<sp/>the<sp/>same<sp/>as</highlight></codeline>
<codeline lineno="218"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>computing<sp/>for<sp/>a<sp/>single<sp/>:math:`t_i`.<sp/>Namely,<sp/>the<sp/>trace<sp/>of<sp/>only</highlight></codeline>
<codeline lineno="219"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`\\mathbf{A}(t_1)`<sp/>is<sp/>computed,<sp/>and<sp/>the<sp/>trace<sp/>of<sp/>the<sp/>rest<sp/>of</highlight></codeline>
<codeline lineno="220"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`q=2,<sp/>\\dots,<sp/>q`<sp/>are<sp/>obtained<sp/>from<sp/>the<sp/>result<sp/>of<sp/>:math:`t_1`</highlight></codeline>
<codeline lineno="221"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>immediately.</highlight></codeline>
<codeline lineno="222"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="223"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Examples</highlight></codeline>
<codeline lineno="224"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>--------</highlight></codeline>
<codeline lineno="225"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="226"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>**Sparse<sp/>matrix:**</highlight></codeline>
<codeline lineno="227"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="228"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Compute<sp/>the<sp/>trace<sp/>of<sp/>a<sp/>sample<sp/>sparse<sp/>Toeplitz<sp/>matrix<sp/>created<sp/>by</highlight></codeline>
<codeline lineno="229"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:func:`imate.toeplitz`<sp/>function.</highlight></codeline>
<codeline lineno="230"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="231"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python</highlight></codeline>
<codeline lineno="232"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="233"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Import<sp/>packages</highlight></codeline>
<codeline lineno="234"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>imate<sp/>import<sp/>toeplitz,<sp/>trace</highlight></codeline>
<codeline lineno="235"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="236"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Generate<sp/>a<sp/>sample<sp/>matrix<sp/>(a<sp/>toeplitz<sp/>matrix)</highlight></codeline>
<codeline lineno="237"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>A<sp/>=<sp/>toeplitz(2,<sp/>1,<sp/>size=100)</highlight></codeline>
<codeline lineno="238"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="239"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Compute<sp/>trace<sp/>with<sp/>the<sp/>exact<sp/>method<sp/>(default<sp/>method)</highlight></codeline>
<codeline lineno="240"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>trace(A)</highlight></codeline>
<codeline lineno="241"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>200.0</highlight></codeline>
<codeline lineno="242"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="243"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Compute<sp/>the<sp/>trace<sp/>of</highlight></codeline>
<codeline lineno="244"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:math:`(\\mathbf{A}^{\\intercal}<sp/>\\mathbf{A})^3`:</highlight></codeline>
<codeline lineno="245"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="246"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python</highlight></codeline>
<codeline lineno="247"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="248"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Compute<sp/>trace<sp/>of<sp/>the<sp/>Gramian<sp/>of<sp/>A<sp/>to<sp/>the<sp/>power<sp/>of<sp/>3.</highlight></codeline>
<codeline lineno="249"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>trace(A,<sp/>p=3,<sp/>gram=True)</highlight></codeline>
<codeline lineno="250"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>24307.0</highlight></codeline>
<codeline lineno="251"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="252"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>**Output<sp/>information:**</highlight></codeline>
<codeline lineno="253"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="254"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Print<sp/>information<sp/>about<sp/>the<sp/>inner<sp/>computation:</highlight></codeline>
<codeline lineno="255"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="256"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python</highlight></codeline>
<codeline lineno="257"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="258"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>tr,<sp/>info<sp/>=<sp/>trace(A,<sp/>return_info=True)</highlight></codeline>
<codeline lineno="259"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>print(tr)</highlight></codeline>
<codeline lineno="260"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>200.0</highlight></codeline>
<codeline lineno="261"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="262"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Print<sp/>dictionary<sp/>neatly<sp/>using<sp/>pprint</highlight></codeline>
<codeline lineno="263"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>pprint<sp/>import<sp/>pprint</highlight></codeline>
<codeline lineno="264"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>pprint(info)</highlight></codeline>
<codeline lineno="265"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;matrix&apos;:<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;data_type&apos;:<sp/>b&apos;float64&apos;,</highlight></codeline>
<codeline lineno="268"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;density&apos;:<sp/>0.0199,</highlight></codeline>
<codeline lineno="269"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;exponent&apos;:<sp/>1.0,</highlight></codeline>
<codeline lineno="270"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;gram&apos;:<sp/>False,</highlight></codeline>
<codeline lineno="271"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;nnz&apos;:<sp/>199,</highlight></codeline>
<codeline lineno="272"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;num_inquiries&apos;:<sp/>1,</highlight></codeline>
<codeline lineno="273"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;size&apos;:<sp/>100,</highlight></codeline>
<codeline lineno="274"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;sparse&apos;:<sp/>True</highlight></codeline>
<codeline lineno="275"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="276"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;solver&apos;:<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;method&apos;:<sp/>&apos;exact&apos;,</highlight></codeline>
<codeline lineno="278"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;version&apos;:<sp/>&apos;0.14.0&apos;</highlight></codeline>
<codeline lineno="279"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="280"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;device&apos;:<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;num_cpu_threads&apos;:<sp/>8,</highlight></codeline>
<codeline lineno="282"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;num_gpu_devices&apos;:<sp/>0,</highlight></codeline>
<codeline lineno="283"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;num_gpu_multiprocessors&apos;:<sp/>0,</highlight></codeline>
<codeline lineno="284"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;num_gpu_threads_per_multiprocessor&apos;:<sp/>0</highlight></codeline>
<codeline lineno="285"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="286"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;time&apos;:<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;alg_wall_time&apos;:<sp/>0.00013329205103218555,</highlight></codeline>
<codeline lineno="288"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;cpu_proc_time&apos;:<sp/>0.00017459900000016404,</highlight></codeline>
<codeline lineno="289"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;tot_wall_time&apos;:<sp/>0.00013329205103218555</highlight></codeline>
<codeline lineno="290"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="293"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>**Large<sp/>matrix:**</highlight></codeline>
<codeline lineno="294"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="295"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Compute<sp/>the<sp/>trace<sp/>of<sp/>a<sp/>very<sp/>large<sp/>sparse<sp/>matrix<sp/>using<sp/>`SLQ`<sp/>method.<sp/>This</highlight></codeline>
<codeline lineno="296"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>method<sp/>does<sp/>not<sp/>compute<sp/>the<sp/>trace<sp/>exactly,<sp/>rather,<sp/>the<sp/>result<sp/>is<sp/>an</highlight></codeline>
<codeline lineno="297"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>approximation<sp/>using<sp/>Monte-Carlo<sp/>sampling.<sp/>The<sp/>following<sp/>example<sp/>uses<sp/>at</highlight></codeline>
<codeline lineno="298"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>least<sp/>`100`<sp/>samples.</highlight></codeline>
<codeline lineno="299"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="300"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python</highlight></codeline>
<codeline lineno="301"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="302"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Generate<sp/>a<sp/>matrix<sp/>of<sp/>size<sp/>one<sp/>million</highlight></codeline>
<codeline lineno="303"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>A<sp/>=<sp/>toeplitz(2,<sp/>1,<sp/>size=1000000)</highlight></codeline>
<codeline lineno="304"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="305"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Approximate<sp/>trace<sp/>using<sp/>stochastic<sp/>Lanczos<sp/>quadrature</highlight></codeline>
<codeline lineno="306"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>with<sp/>at<sp/>least<sp/>100<sp/>Monte-Carlo<sp/>sampling</highlight></codeline>
<codeline lineno="307"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>tr,<sp/>info<sp/>=<sp/>trace(A,<sp/>method=&apos;slq&apos;,<sp/>min_num_samples=100,</highlight></codeline>
<codeline lineno="308"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_num_samples=200,<sp/>return_info=True)</highlight></codeline>
<codeline lineno="309"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>print(tr)</highlight></codeline>
<codeline lineno="310"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4999741.080000001</highlight></codeline>
<codeline lineno="311"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="312"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Find<sp/>the<sp/>time<sp/>it<sp/>took<sp/>to<sp/>compute<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="313"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>print(info[&apos;time&apos;])</highlight></codeline>
<codeline lineno="314"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;tot_wall_time&apos;:<sp/>16.221865047933534,</highlight></codeline>
<codeline lineno="316"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;alg_wall_time&apos;:<sp/>16.20779037475586,</highlight></codeline>
<codeline lineno="317"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;cpu_proc_time&apos;:<sp/>116.213995219</highlight></codeline>
<codeline lineno="318"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="320"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Compare<sp/>the<sp/>result<sp/>of<sp/>the<sp/>above<sp/>approximation<sp/>with<sp/>the<sp/>exact<sp/>solution<sp/>of</highlight></codeline>
<codeline lineno="321"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>the<sp/>trace<sp/>using<sp/>the<sp/>analytic<sp/>relation<sp/>for<sp/>Toeplitz<sp/>matrix.<sp/>See</highlight></codeline>
<codeline lineno="322"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:func:`imate.sample_matrices.toeplitz_trace`<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="323"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="324"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python</highlight></codeline>
<codeline lineno="325"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="326"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>imate.sample_matrices<sp/>import<sp/>toeplitz_trace</highlight></codeline>
<codeline lineno="327"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>toeplitz_trace(2,<sp/>1,<sp/>size=1000000)</highlight></codeline>
<codeline lineno="328"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4999999</highlight></codeline>
<codeline lineno="329"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="330"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>It<sp/>can<sp/>be<sp/>seen<sp/>that<sp/>the<sp/>error<sp/>of<sp/>approximation<sp/>is<sp/>:math:`0.0018<sp/>\\%`.<sp/>This</highlight></codeline>
<codeline lineno="331"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>accuracy<sp/>is<sp/>remarkable<sp/>considering<sp/>that<sp/>the<sp/>computation<sp/>on<sp/>such<sp/>a<sp/>large</highlight></codeline>
<codeline lineno="332"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>matrix<sp/>took<sp/>only<sp/>a<sp/>16<sp/>seconds.<sp/>Computing<sp/>the<sp/>trace<sp/>of<sp/>such<sp/>a</highlight></codeline>
<codeline lineno="333"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>large<sp/>matrix<sp/>using<sp/>any<sp/>of<sp/>the<sp/>exact<sp/>methods<sp/>(such<sp/>as<sp/>``exact``<sp/>or</highlight></codeline>
<codeline lineno="334"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>``eigenvalue``)<sp/>is<sp/>infeasible.</highlight></codeline>
<codeline lineno="335"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="336"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>**Matrix<sp/>operator:**</highlight></codeline>
<codeline lineno="337"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="338"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>following<sp/>example<sp/>uses<sp/>an<sp/>object<sp/>of<sp/>:class:`imate.Matrix`.<sp/>Note<sp/>that</highlight></codeline>
<codeline lineno="339"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>this<sp/>can<sp/>be<sp/>only<sp/>applied<sp/>to<sp/>``method=slq``.<sp/>See<sp/>further<sp/>details<sp/>in</highlight></codeline>
<codeline lineno="340"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:ref:`slq<sp/>method<sp/>&lt;imate.trace.slq&gt;`.</highlight></codeline>
<codeline lineno="341"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="342"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python</highlight></codeline>
<codeline lineno="343"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:emphasize-lines:<sp/>8</highlight></codeline>
<codeline lineno="344"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="345"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Import<sp/>matrix<sp/>operator</highlight></codeline>
<codeline lineno="346"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>imate<sp/>import<sp/>toeplitz,<sp/>trace,<sp/>Matrix</highlight></codeline>
<codeline lineno="347"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="348"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Generate<sp/>a<sp/>sample<sp/>matrix<sp/>(a<sp/>toeplitz<sp/>matrix)</highlight></codeline>
<codeline lineno="349"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>A<sp/>=<sp/>toeplitz(2,<sp/>1,<sp/>size=100,<sp/>gram=True)</highlight></codeline>
<codeline lineno="350"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="351"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Create<sp/>a<sp/>matrix<sp/>operator<sp/>object<sp/>from<sp/>matrix<sp/>A</highlight></codeline>
<codeline lineno="352"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>Aop<sp/>=<sp/>Matrix(A)</highlight></codeline>
<codeline lineno="353"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="354"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Compute<sp/>trace<sp/>of<sp/>Aop</highlight></codeline>
<codeline lineno="355"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>trace(Aop,<sp/>method=&apos;slq&apos;)</highlight></codeline>
<codeline lineno="356"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>495.0</highlight></codeline>
<codeline lineno="357"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="358"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>**Affine<sp/>matrix<sp/>operator:**</highlight></codeline>
<codeline lineno="359"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="360"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>following<sp/>example<sp/>uses<sp/>an<sp/>object<sp/>of</highlight></codeline>
<codeline lineno="361"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:class:`imate.AffineMatrixFunction`<sp/>to<sp/>create<sp/>the<sp/>linear<sp/>operator:</highlight></codeline>
<codeline lineno="362"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="363"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="364"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="365"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>\\mapsto<sp/>\\mathbf{A}<sp/>+<sp/>t<sp/>\\mathbf{I}</highlight></codeline>
<codeline lineno="366"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="367"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Note<sp/>that<sp/>this<sp/>can<sp/>be<sp/>only<sp/>applied<sp/>to<sp/>``method=slq``.<sp/>See<sp/>further<sp/>details</highlight></codeline>
<codeline lineno="368"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>in<sp/>:ref:`slq<sp/>method<sp/>&lt;imate.trace.slq&gt;`.</highlight></codeline>
<codeline lineno="369"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="370"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python</highlight></codeline>
<codeline lineno="371"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:emphasize-lines:<sp/>8</highlight></codeline>
<codeline lineno="372"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="373"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Import<sp/>affine<sp/>matrix<sp/>function</highlight></codeline>
<codeline lineno="374"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>imate<sp/>import<sp/>toeplitz,<sp/>trace,<sp/>AffineMatrixFunction</highlight></codeline>
<codeline lineno="375"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="376"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Generate<sp/>a<sp/>sample<sp/>matrix<sp/>(a<sp/>toeplitz<sp/>matrix)</highlight></codeline>
<codeline lineno="377"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>A<sp/>=<sp/>toeplitz(2,<sp/>1,<sp/>size=100,<sp/>gram=True)</highlight></codeline>
<codeline lineno="378"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="379"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Create<sp/>a<sp/>matrix<sp/>operator<sp/>object<sp/>from<sp/>matrix<sp/>A</highlight></codeline>
<codeline lineno="380"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>Aop<sp/>=<sp/>AffineMatrixFunction(A)</highlight></codeline>
<codeline lineno="381"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="382"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>A<sp/>list<sp/>of<sp/>parameters<sp/>t<sp/>to<sp/>pass<sp/>to<sp/>Aop</highlight></codeline>
<codeline lineno="383"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>t<sp/>=<sp/>[-1.0,<sp/>0.0,<sp/>1.0]</highlight></codeline>
<codeline lineno="384"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="385"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Compute<sp/>trace<sp/>of<sp/>Aop<sp/>with<sp/>non-integer<sp/>power<sp/>for<sp/>all<sp/>parameters<sp/>t</highlight></codeline>
<codeline lineno="386"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>trace(Aop,<sp/>method=&apos;slq&apos;,<sp/>parameters=t)</highlight></codeline>
<codeline lineno="387"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array([398.04,<sp/>498.04,<sp/>598.04])</highlight></codeline>
<codeline lineno="388"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>method<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;exact&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceimate_1_1trace_1_1__exact__method_1aa850a16211fcd604802a40f1c6bde907" kindref="member">exact_method</ref>(A,<sp/>gram=gram,<sp/>p=p,<sp/>return_info=return_info,</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**options)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>method<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;eigenvalue&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceimate_1_1logdet_1_1__eigenvalue__method_1a9514f0de2c73a9922234ff43d1546c66" kindref="member">eigenvalue_method</ref>(A,<sp/>gram=gram,<sp/>p=p,<sp/>return_info=return_info,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**options)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>method<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;slq&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceimate_1_1logdet_1_1__slq__method_1a8f7e56fdb6a71674cc894241ca2b152f" kindref="member">slq_method</ref>(A,<sp/>gram=gram,<sp/>p=p,<sp/>return_info=return_info,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**options)</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(</highlight><highlight class="stringliteral">&apos;Method<sp/>&quot;%s&quot;<sp/>is<sp/>not<sp/>recognized.&apos;</highlight><highlight class="normal"><sp/>%<sp/>method)</highlight></codeline>
    </programlisting>
    <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/trace/trace.py"/>
  </compounddef>
</doxygen>
