<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classRandomArrayGenerator" kind="class" language="C++" prot="public">
    <compoundname>RandomArrayGenerator</compoundname>
    <includes refid="random__array__generator_8h" local="no">random_array_generator.h</includes>
    <templateparamlist>
      <param>
        <type>typename DataType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classRandomArrayGenerator_1a3a577526f391d531fe4d66bdfa0107db" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RandomArrayGenerator&lt; DataType &gt;::generate_random_array</definition>
        <argsstring>(RandomNumberGenerator &amp;random_number_generator, DataType *array, const LongIndexType array_size, const IndexType num_threads)</argsstring>
        <name>generate_random_array</name>
        <param>
          <type><ref refid="classRandomNumberGenerator" kindref="compound">RandomNumberGenerator</ref> &amp;</type>
          <declname>random_number_generator</declname>
        </param>
        <param>
          <type>DataType *</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="types_8h_1a4918759cb64dcead17269b3613b27d25" kindref="member">LongIndexType</ref></type>
          <declname>array_size</declname>
        </param>
        <param>
          <type>const <ref refid="types_8h_1ab1b7173c76e5040d0161e695a129dafe" kindref="member">IndexType</ref></type>
          <declname>num_threads</declname>
        </param>
        <briefdescription>
<para>Generates a pseudo-random array with Rademacher distribution where elements are either <computeroutput>+1</computeroutput> or <computeroutput>-1</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para>The Rademacher distribution is obtained from the Bernoulli distribution consisting of <computeroutput>0</computeroutput> and <computeroutput>1</computeroutput>. To generate such distribution, a sequence of <computeroutput>array_size/64</computeroutput> intergers, each with 64-bit, is generated using Xoshiro256** algorithm. The 64 bits of each integer are used to fill 64 elements of the array as follows. If the bit is <computeroutput>0</computeroutput>, the array element is set to <computeroutput>-1</computeroutput>, and if the bit is <computeroutput>1</computeroutput>, the array element is set to <computeroutput>+1</computeroutput>.</para>
<para>Thus, in this function, we use Xoshiro256** algorithm to generate 64 bits and use bits, not the integer itself. This approach is about ten times faster than convertng the random integer to double between <computeroutput></computeroutput>[0,1] and then map them to <computeroutput>+1</computeroutput> and <computeroutput>-1</computeroutput>.</para>
<para>Also, this function is more than a hundered times faster than using <computeroutput>rand()</computeroutput> function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">random_number_generator</parametername>
</parameternamelist>
<parameterdescription>
<para>The random number generator object. This object should be initialized with <computeroutput>num_threads</computeroutput> by its constructor. On each parallel thread, an independent sequence of random numbers are generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">array</parametername>
</parameternamelist>
<parameterdescription>
<para>1D array of the size <computeroutput>array_size</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">array_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_threads</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of OpenMP parallel threads. If <computeroutput>num_threads</computeroutput> is zero then no paralel thread is created inside this function, rather it is assumed that this functon is called inside a parallel region from the caller. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_random_generator/random_array_generator.h" line="42" column="21" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_random_generator/random_array_generator.cpp" bodystart="63" bodyend="160"/>
        <references refid="classRandomNumberGenerator_1a91d8b9726bda7dcd40f9b992b2a1bccd" compoundref="random__number__generator_8cpp" startline="112" endline="115">RandomNumberGenerator::next</references>
        <referencedby refid="classcTraceEstimator_1a02afa505a915c58380b99a62e4d56b30" compoundref="c__trace__estimator_8cpp" startline="401" endline="644">cTraceEstimator&lt; DataType &gt;::_c_stochastic_lanczos_quadrature</referencedby>
        <referencedby refid="classcuTraceEstimator_1ab4edc323dc7dcc98f401eeec9276e245" compoundref="cu__trace__estimator_8cu" startline="409" endline="652">cuTraceEstimator&lt; DataType &gt;::_cu_stochastic_lanczos_quadrature</referencedby>
        <referencedby refid="classcuOrthogonalization_1aefd27369921be5760a998a60aca49b56" compoundref="cu__orthogonalization_8cu" startline="275" endline="436">cuOrthogonalization&lt; DataType &gt;::orthogonalize_vectors</referencedby>
        <referencedby refid="classcOrthogonalization_1a7b017e5520083a1cf3ac2ed27bb811d8" compoundref="c__orthogonalization_8cpp" startline="269" endline="401">cOrthogonalization&lt; DataType &gt;::orthogonalize_vectors</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A static class to generate random set of vectors. This class acts as a templated namespace, where all member methods are <emphasis>public</emphasis> and <emphasis>static</emphasis>. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="see"><para>Orthogonalization </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_random_generator/random_array_generator.h" line="37" column="1" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_random_generator/random_array_generator.h" bodystart="38" bodyend="47"/>
    <listofallmembers>
      <member refid="classRandomArrayGenerator_1a3a577526f391d531fe4d66bdfa0107db" prot="public" virt="non-virtual"><scope>RandomArrayGenerator</scope><name>generate_random_array</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
