<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classRandomNumberGenerator" kind="class" language="C++" prot="public">
    <compoundname>RandomNumberGenerator</compoundname>
    <includes refid="random__number__generator_8h" local="no">random_number_generator.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classRandomNumberGenerator_1a1774261f4074ec4632a3aa7a3a9ecf45" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int RandomNumberGenerator::num_threads</definition>
        <argsstring></argsstring>
        <name>num_threads</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/github/imate/imate/_random_generator/random_number_generator.h" line="117" column="13" bodyfile="/home/sia/work/github/imate/imate/_random_generator/random_number_generator.h" bodystart="117" bodyend="-1"/>
        <referencedby refid="classRandomNumberGenerator_1a39545f8392c54e0f0ed0174cb1d41ded" compoundref="random__number__generator_8cpp" startline="83" endline="99">initialize</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classRandomNumberGenerator_1addbedd039d44e6bb381e75e831d58210" prot="protected" static="no" mutable="no">
        <type><ref refid="classXoshiro256StarStar" kindref="compound">Xoshiro256StarStar</ref> *</type>
        <definition>Xoshiro256StarStar* RandomNumberGenerator::xoshiro_256_star_star</definition>
        <argsstring></argsstring>
        <name>xoshiro_256_star_star</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/github/imate/imate/_random_generator/random_number_generator.h" line="118" column="28" bodyfile="/home/sia/work/github/imate/imate/_random_generator/random_number_generator.h" bodystart="118" bodyend="-1"/>
        <referencedby refid="classRandomNumberGenerator_1a39545f8392c54e0f0ed0174cb1d41ded" compoundref="random__number__generator_8cpp" startline="83" endline="99">initialize</referencedby>
        <referencedby refid="classRandomNumberGenerator_1a91d8b9726bda7dcd40f9b992b2a1bccd" compoundref="random__number__generator_8cpp" startline="112" endline="115">next</referencedby>
        <referencedby refid="classRandomNumberGenerator_1af4949b4234bd8d8283028162f8a8e7f5" compoundref="random__number__generator_8cpp" startline="56" endline="63">~RandomNumberGenerator</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classRandomNumberGenerator_1a8e7e711ea58f13f3ed95becbe33684e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>RandomNumberGenerator::RandomNumberGenerator</definition>
        <argsstring>()</argsstring>
        <name>RandomNumberGenerator</name>
        <briefdescription>
<para>Initializes with one parallel thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/github/imate/imate/_random_generator/random_number_generator.h" line="107" column="9" bodyfile="/home/sia/work/github/imate/imate/_random_generator/random_number_generator.cpp" bodystart="29" bodyend="33"/>
        <references refid="classRandomNumberGenerator_1a39545f8392c54e0f0ed0174cb1d41ded" compoundref="random__number__generator_8cpp" startline="83" endline="99">initialize</references>
      </memberdef>
      <memberdef kind="function" id="classRandomNumberGenerator_1a66bfd206144c1f0edfade8d8d6153b75" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>RandomNumberGenerator::RandomNumberGenerator</definition>
        <argsstring>(int num_threads_)</argsstring>
        <name>RandomNumberGenerator</name>
        <param>
          <type>int</type>
          <declname>num_threads_</declname>
        </param>
        <briefdescription>
<para>Initializes with given number of parallel thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/github/imate/imate/_random_generator/random_number_generator.h" line="108" column="18" bodyfile="/home/sia/work/github/imate/imate/_random_generator/random_number_generator.cpp" bodystart="43" bodyend="46"/>
        <references refid="classRandomNumberGenerator_1a39545f8392c54e0f0ed0174cb1d41ded" compoundref="random__number__generator_8cpp" startline="83" endline="99">initialize</references>
      </memberdef>
      <memberdef kind="function" id="classRandomNumberGenerator_1af4949b4234bd8d8283028162f8a8e7f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>RandomNumberGenerator::~RandomNumberGenerator</definition>
        <argsstring>()</argsstring>
        <name>~RandomNumberGenerator</name>
        <briefdescription>
<para>Deallocates the array of <computeroutput>xoshiro_256_star_star</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/github/imate/imate/_random_generator/random_number_generator.h" line="109" column="9" bodyfile="/home/sia/work/github/imate/imate/_random_generator/random_number_generator.cpp" bodystart="56" bodyend="63"/>
        <references refid="classRandomNumberGenerator_1addbedd039d44e6bb381e75e831d58210" compoundref="random__number__generator_8h" startline="118">xoshiro_256_star_star</references>
      </memberdef>
      <memberdef kind="function" id="classRandomNumberGenerator_1a91d8b9726bda7dcd40f9b992b2a1bccd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t RandomNumberGenerator::next</definition>
        <argsstring>(int thread_id)</argsstring>
        <name>next</name>
        <param>
          <type>int</type>
          <declname>thread_id</declname>
        </param>
        <briefdescription>
<para>Generates the next random number in the sequence, depending on the thread id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The thread id of the parallel process. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/github/imate/imate/_random_generator/random_number_generator.h" line="110" column="18" bodyfile="/home/sia/work/github/imate/imate/_random_generator/random_number_generator.cpp" bodystart="112" bodyend="115"/>
        <references refid="classXoshiro256StarStar_1a6a99f74d2ed5f6e3667d785c46bf9569" compoundref="xoshiro__256__star__star_8cpp" startline="73" endline="89">Xoshiro256StarStar::next</references>
        <references refid="classRandomNumberGenerator_1addbedd039d44e6bb381e75e831d58210" compoundref="random__number__generator_8h" startline="118">xoshiro_256_star_star</references>
        <referencedby refid="classRandomArrayGenerator_1a3a577526f391d531fe4d66bdfa0107db" compoundref="random__array__generator_8cpp" startline="63" endline="165">RandomArrayGenerator&lt; DataType &gt;::generate_random_array</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classRandomNumberGenerator_1a39545f8392c54e0f0ed0174cb1d41ded" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RandomNumberGenerator::initialize</definition>
        <argsstring>(int num_threads_)</argsstring>
        <name>initialize</name>
        <param>
          <type>int</type>
          <declname>num_threads_</declname>
        </param>
        <briefdescription>
<para>Initializes an array of <computeroutput>xoshiro_256_star_star</computeroutput> objects. </para>
        </briefdescription>
        <detaileddescription>
<para>The size of the array is <computeroutput>num_threads</computeroutput>, corresponding to each parallel thread. Also, the state of the i-th object is jumped <computeroutput></computeroutput>(i+1) times so that all random generators have diferent start states. This is the main reason of using this class since it aggregates multiple random generator objects, one for each parallel thread, and all have different initial random state.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">num_threads_</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of independent <computeroutput>xoshiro_256_star_star</computeroutput> objects to be created for each parallel thread. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/github/imate/imate/_random_generator/random_number_generator.h" line="114" column="14" bodyfile="/home/sia/work/github/imate/imate/_random_generator/random_number_generator.cpp" bodystart="83" bodyend="99"/>
        <references refid="classXoshiro256StarStar_1aced1e35723f858f228bb7bf5cc5fda6a" compoundref="xoshiro__256__star__star_8cpp" startline="100" endline="133">Xoshiro256StarStar::jump</references>
        <references refid="classRandomNumberGenerator_1a1774261f4074ec4632a3aa7a3a9ecf45" compoundref="random__number__generator_8h" startline="117">num_threads</references>
        <references refid="classRandomNumberGenerator_1addbedd039d44e6bb381e75e831d58210" compoundref="random__number__generator_8h" startline="118">xoshiro_256_star_star</references>
        <referencedby refid="classRandomNumberGenerator_1a8e7e711ea58f13f3ed95becbe33684e9" compoundref="random__number__generator_8cpp" startline="29" endline="33">RandomNumberGenerator</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Generates 64-bit integers on multiple parallel threads. </para>
    </briefdescription>
    <detaileddescription>
<para>This class creates multiple instances of <computeroutput><ref refid="classXoshiro256StarStar" kindref="compound">Xoshiro256StarStar</ref></computeroutput> class, with the number of parallel threads. On each thread, it generates random integers independently.</para>
<para>The necessity of using this class is when all threads start at the same time, hence the initial seeds cannot be distinguished using the <computeroutput>time()</computeroutput> function (since time the same for all threads). Thus the random generator in all threads generate the same senquence of numbers. To avoid this issue, this class jumps the sequence of each instance of <computeroutput><ref refid="classXoshiro256StarStar" kindref="compound">Xoshiro256StarStar</ref></computeroutput>. Thus, even if their initial state seed is the same, the jump in the state variable makes it different by 2^128 on the sequence.</para>
<para>All member variables of this class aer static and they can be used without declaring an instance of this class. Also, in the same thread, if we call this class from multiple functions, the same sequence if used since the internal state variable is static.</para>
<para>This class can be used by either</para>
<para><orderedlist>
<listitem><para>Declare a new instance of this class. In this case, the destructor will remove the variables at the end of its lifetime once the last instance of this class goes out of scope. <verbatim>num_threads = omp_get_num_threads();

// Declare an instance for num_thread parallel threads
RandomNumberGenerator random_number_generator(num_threads);

// Generate random numbers
#pragma omp parallel
{
    int tid = omp_get_thread_num();

    #pragma omp for
    for (int i = 0; i &lt; n; ++i)
    {
        uint64_t a = RandomNumberGenerator::next(tid);
    }
}

// The random_number_generator will go out of scope and it
// automatically deallocate internal static arrays.
</verbatim></para>
</listitem><listitem><para>Call all functions sttaically. In this case, the internal static arrays should be deallocated manually. Such as <verbatim>num_threads = omp_get_num_threads();

// Create an internal array of random generator per thread
RandomNumberGenerator::initialize(num_threads);

// Generate random numbers
#pragma omp parallel
{
    int tid = omp_get_thread_num();

    #pragma omp for
    for (int i = 0; i &lt; n; ++i)
    {
        uint64_t a = RandomNumberGenerator::next(tid);
    }
}

// Deallcoate internal static arrays of this class
RandomNumberGenerator::deallocate();
</verbatim> <simplesect kind="see"><para><ref refid="classRandomArrayGenerator" kindref="compound">RandomArrayGenerator</ref>, <ref refid="classXoshiro256StarStar" kindref="compound">Xoshiro256StarStar</ref> </para>
</simplesect>
</para>
</listitem></orderedlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>Xoshiro256StarStar</label>
        <link refid="classXoshiro256StarStar"/>
      </node>
      <node id="1">
        <label>RandomNumberGenerator</label>
        <link refid="classRandomNumberGenerator"/>
        <childnode refid="2" relation="usage">
          <edgelabel>xoshiro_256_star_star</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/sia/work/github/imate/imate/_random_generator/random_number_generator.h" line="103" column="1" bodyfile="/home/sia/work/github/imate/imate/_random_generator/random_number_generator.h" bodystart="104" bodyend="119"/>
    <listofallmembers>
      <member refid="classRandomNumberGenerator_1a39545f8392c54e0f0ed0174cb1d41ded" prot="protected" virt="non-virtual"><scope>RandomNumberGenerator</scope><name>initialize</name></member>
      <member refid="classRandomNumberGenerator_1a91d8b9726bda7dcd40f9b992b2a1bccd" prot="public" virt="non-virtual"><scope>RandomNumberGenerator</scope><name>next</name></member>
      <member refid="classRandomNumberGenerator_1a1774261f4074ec4632a3aa7a3a9ecf45" prot="protected" virt="non-virtual"><scope>RandomNumberGenerator</scope><name>num_threads</name></member>
      <member refid="classRandomNumberGenerator_1a8e7e711ea58f13f3ed95becbe33684e9" prot="public" virt="non-virtual"><scope>RandomNumberGenerator</scope><name>RandomNumberGenerator</name></member>
      <member refid="classRandomNumberGenerator_1a66bfd206144c1f0edfade8d8d6153b75" prot="public" virt="non-virtual"><scope>RandomNumberGenerator</scope><name>RandomNumberGenerator</name></member>
      <member refid="classRandomNumberGenerator_1addbedd039d44e6bb381e75e831d58210" prot="protected" virt="non-virtual"><scope>RandomNumberGenerator</scope><name>xoshiro_256_star_star</name></member>
      <member refid="classRandomNumberGenerator_1af4949b4234bd8d8283028162f8a8e7f5" prot="public" virt="non-virtual"><scope>RandomNumberGenerator</scope><name>~RandomNumberGenerator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
