<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceimate_1_1sample__matrices_1_1correlation__matrix" kind="namespace" language="Python">
    <compoundname>imate::sample_matrices::correlation_matrix</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceimate_1_1sample__matrices_1_1correlation__matrix_1a9f8a2cd6d5dc1c5f38425f7b2a9525a2" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool imate::sample_matrices::correlation_matrix::plot_modules_exist</definition>
        <argsstring></argsstring>
        <name>plot_modules_exist</name>
        <initializer>=  True</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/sample_matrices/correlation_matrix.py" line="22" column="1" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/sample_matrices/correlation_matrix.py" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceimate_1_1sample__matrices_1_1correlation__matrix_1a38f57888f900c34aff2345d810fbf86e" prot="private" static="no" mutable="no">
        <type>list</type>
        <definition>list imate::sample_matrices::correlation_matrix.__all__</definition>
        <argsstring></argsstring>
        <name>__all__</name>
        <initializer>=  [&apos;<ref refid="namespaceimate_1_1sample__matrices_1_1correlation__matrix_1abce2891d45b26e645bb349b548a1977e" kindref="member">correlation_matrix</ref>&apos;]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/sample_matrices/correlation_matrix.py" line="26" column="1" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/sample_matrices/correlation_matrix.py" bodystart="26" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceimate_1_1sample__matrices_1_1correlation__matrix_1abce2891d45b26e645bb349b548a1977e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def imate.sample_matrices.correlation_matrix.correlation_matrix</definition>
        <argsstring>(size=20, dimension=1, scale=0.1, kernel=&apos;exponential&apos;, kernel_param=None, grid=True, sparse=False, density=0.001, format=r &apos;csr&apos;, dtype=r &apos;float64&apos;, plot=False, verbose=False)</argsstring>
        <name>correlation_matrix</name>
        <param>
          <type>size</type>
          <defname>size</defname>
          <defval>20</defval>
        </param>
        <param>
          <type>dimension</type>
          <defname>dimension</defname>
          <defval>1</defval>
        </param>
        <param>
          <type>scale</type>
          <defname>scale</defname>
          <defval>0.1</defval>
        </param>
        <param>
          <type>kernel</type>
          <defname>kernel</defname>
          <defval>&apos;exponential&apos;</defval>
        </param>
        <param>
          <type>kernel_param</type>
          <defname>kernel_param</defname>
          <defval>None</defval>
        </param>
        <param>
          <type>grid</type>
          <defname>grid</defname>
          <defval>True</defval>
        </param>
        <param>
          <type>sparse</type>
          <defname>sparse</defname>
          <defval>False</defval>
        </param>
        <param>
          <type>density</type>
          <defname>density</defname>
          <defval>0.001</defval>
        </param>
        <param>
          <type>format</type>
          <defname>format</defname>
          <defval>r &apos;csr&apos;</defval>
        </param>
        <param>
          <type>dtype</type>
          <defname>dtype</defname>
          <defval>r &apos;float64&apos;</defval>
        </param>
        <param>
          <type>plot</type>
          <defname>plot</defname>
          <defval>False</defval>
        </param>
        <param>
          <type>verbose</type>
          <defname>verbose</defname>
          <defval>False</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Generate symmetric and positive-definite matrix for test purposes.

The elements of the correlation matrix are generated by the spatial
correlation of a set of points. The set of points is either randomly
generated in a hypercube or defined on a grid of points of a lattice in a
hypercube. The correlation is computed by a kernel function applied to the
Euclidean distance of the set of points.


Parameters
----------

size : int, default=20
    The size of matrix, which is determined as follows:

    * If ``grid`` is `False`, the size of the matrix is ``size``.
    * If ``grid`` is `True`, the size of the matrix is ``size**dimension``.

dimension : int, default=1
    The dimension of the space of points to generate the correlation
    matrix.

scale : float, default=0.1
    A positive parameter :math:`\\rho` of the correlation function that
    scales distance :math:`r` to :math:`r/\\rho`

kernel : {&apos;matern&apos;, &apos;exponential&apos;, &apos;square_exponential&apos;, \
    &apos;rational_quadratic&apos;}, default=&apos;exponential&apos;
    The kernel function of the correlation, which takes a distance
    :math:`r` and yields its spatial  correlation. See details in the Notes
    section below.

kernel_param : float, default=None
    Parameter :math:`\\theta` of the kernel function. This option only
    applies to ``kernel=matern`` (see the parameter :math:`\\nu` in Notes
    below) and ``kernel=rational_quadratic`` (see the parameter
    :math:`\\alpha` in Notes below).

grid : bool, default=True
    Determines whether to generate the set of points on a lattice grid or
    to randomly generate points inside the unit hypercube.

    * If `True`, the points are generated on a structured grid in a unit
      hypercube with equal distances. In this case, the size of matrix
      (which is equal to the number of points) is ``size**dimension``.
    * If `False`, the points are generated randomly. In this case, the size
      of the generated matrix is ``size``.

sparse : bool, default=False
    Flag to indicate the correlation matrix should be a sparse or dense
    matrix. If set to `True`, you may also specify ``density``.

density : float, default=0.001
    Specifies an approximate density of the non-zero elements of the
    generated sparse matrix. The actual density of the matrix may not be
    exactly the same as this value. This option is only relevant if
    ``sparse`` is `True`.

format : {&apos;csr&apos;, &apos;csc&apos;}, default=&apos;csr&apos;
    The format of the sparse matrix. `CSR` generates compressed sparse rows
    and CSC generates compressed sparse columns matrix.

dtype : {&apos;float32&apos;, &apos;float64&apos;, &apos;float128&apos;}, default=&apos;float64&apos;
    Data type of the matrix.

plot : bool, default=False
    If `True`, the matrix will be plotted. If no display is available
    (such as executing on remote machines) the plot is saved in the current
    directory in `SVG` format.

verbose : bool, default=False
    If `True`, it prints some information during the process.

Returns
-------

A : numpy.ndarray, scipy.sparse.csr, or scipy.sparse.csc, (N, N)
    Correlation matrix.

See Also
--------

imate.toeplitz

Notes
-----

**Matrix Size:**

The size of matrix, :math:`N`, is determined by the parameter ``size``
which we refer to as :math:`n`, the dimension, ``dimension``, which we
refer to as :math:`d`, and the boolean ``grid`` variable.

    * If ``grid`` is `True`, then, the size of the square matrix is
      :math:`N = n^d`.
    * If ``grid`` is `False`, then, the size of the square matrix is
      :math:`N = n`.

**Complexity of computation:**

The complexity of computing the correlation matrix is
:math:`\\mathcal{O}(\\frac{1}{2} N^2)`. The elements of the matrix are
generated using shared memory parallelism using an efficient method that
only requires :math:`\\mathcal{O}(\\rho N^2)` memory where :math:`\\rho`
is the density of the sparse matrix.

.. warning::

    If :math:`N` is large, it might take a long time to generate the
    correlation matrix.

**Spatial Correlation:**

The correlation matrix of size :math:`N \\times N` is generated by the
mutual correlation of a set of :math:`N` points in the unit hypercube,
:math:`\\boldsymbol{x}_i \\in [0, 1]^d`. The correlation between each two
points :math:`\\boldsymbol{x}_i` and :math:`\\boldsymbol{x}_j` is computed
by

.. math::

    K_{i, j} = \\kappa \\left(r_{i,j} | \\theta \\right),

where :math:`\\kappa` is a correlation kernel with the parameter
:math:`\\theta`. Also

.. math::

    r_{i,j} = \\frac{1}{\\rho}
    \\Vert \\boldsymbol{x}_i-\\boldsymbol{x}_j \\Vert_2,

where :math:`\\rho` is a positive parameter that scales the Euclidean
distance :math:`\\Vert \\cdot \\Vert_2`.

The output matrix is symmetric and positive-definite. The values of the
matrix elements are between `0` and `1`. The diagonal elements of the
correlation matrix are `1`.

**Kernel Functions:**

* Exponential correlation

  .. math::

      \\kappa(r) = e^{-r}.

* Square exponential correlation

  .. math::

      \\kappa(r) = e^{-\\frac{1}{2}x^2}.

* Rational quadratic correlation (set :math:`\\alpha` by ``kernel_param``)

  .. math::

      \\kappa(r | \\alpha) =
      \\left(1 + \\frac{r^2}{2\\alpha} \\right)^{-\\alpha}.

* Maren correlation (set :math:`\\nu` by ``kernel_param``)

  .. math::

      \\kappa(r | \\nu) = \\frac{2^{1-\\nu}}{\\Gamma(\\nu)} \\left(
      \\sqrt{2 \\nu} r \\right)^{\\nu}
      K_{\\nu}\\left( \\sqrt{2 \\nu} r \\right),

  where :math:`\\kappa_{\\nu}` is the modified Bessel function of the
  second kind and :math:`\\Gamma` is the Gamma function. Both
  :math:`K_{\\nu}` and :math:`\\Gamma` are computed efficiently using the
  python package `special_functions
  &lt;https://ameli.github.io/special_functions/index.html&gt;`_.

  The Matern kernel with :math:`\\nu=\\frac{1}{2}` is equivalent to the
  exponential kernel. Also, :math:`\\nu = \\infty` is equivalent to the
  square exponential kernel. If :math:`\\nu &gt; 100`, it is assumed that
  :math:`\\nu` is infinity. If :math:`\\nu = \\frac{3}{2}` the following
  expression of Matern kernel is used:

  .. math::

      \\kappa(r | \\textstyle{\\frac{3}{2}}) =
      \\left(1+ \\sqrt{3} r \\right) e^{-\\sqrt{3} r}.

  If :math:`\\nu = \\frac{5}{2}`, the Matern kernel is computed with:

  .. math::

      \\kappa(r | \\textstyle{\\frac{5}{2}}) =
      \\left(1+ \\sqrt{5} r + \\frac{5}{3} r^2 \\right) e^{-\\sqrt{5} r}.

**Sparsification:**

The values of the correlation matrix are between :math:`0` and :math:`1`.
To sparsify the matrix, the correlation kernel below a certain threshold
value, :math:`\\tau`, is set to zero to taper the correlation kernel.
Namely, for all :math:`r &gt; r_0` where
:math:`\\kappa(r_0|\\theta) = \\tau`, we set
:math:`\\kappa(r|\\theta) = 0`.

The threshold :math:`\\tau` can be indirectly set through the parameter
``density``, which sets an approximate density of the non-zero elements of
the sparse matrix.

.. note::

    The actual density of the generated matrix might differ from the
    specified density if :math:`N` is small.

The density :math:`\\rho` is related to the kernel threshold :math:`\\tau`
by

.. math::

    \\rho N = \\mathrm{Vol}_{d}(r_0/l),

.. math::
    \\tau = \\kappa(r_0|\\theta),

where :math:`\\mathrm{Vol}_{d}` is the volume of a `d`-ball and
:math:`l = (\\sqrt[d]{n} - 1)^{-1}` is the grid size along each axis
assuming the points are placed on an equal-distanced structured grid.

The quantity :math:`\\rho N` is the number of points on an integer lattice
and inside a `d`-ball. This quantity can be approximated by the volume of a
`d`-ball, see for instance `Gauss circle problem
&lt;https://en.wikipedia.org/wiki/Gauss_circle_problem&gt;`_ in 2D.

.. warning::

    Setting a too small ``density`` might eradicate the
    positive-definiteness of the correlation matrix.

If density :math:`\\rho` is set to be too low, the threshold :math:`\\tau`
becomes too large and some elements of the correlation matrix will not be
correlated to any other neighbor point. This leads to a correlation matrix
where at some rows, the only non-zero element is its diagonal element.

**Plotting:**

If ``plot`` is set to `True`, it plots the matrix.

* If no graphical backend exists (such as running the code on a remote
  server or manually disabling the X11 backend), the plot will not be
  shown, rather, it will be saved as an ``svg`` file in the current
  directory.
* If the executable ``latex`` is available on ``PATH``, the plot is
  rendered using :math:`\\rm\\LaTeX` and it may take slightly longer to
  produce the plot.
* If :math:`\\rm\\LaTeX` is not installed, it uses any available San-Serif
  font to render the plot.

To manually disable interactive plot display and save the plot as
``svg`` instead, add the following at the very beginning of your code
before importing :mod:`imate`:

.. code-block:: python

    &gt;&gt;&gt; import os
    &gt;&gt;&gt; os.environ[&apos;IMATE_NO_DISPLAY&apos;] = &apos;True&apos;

.. note::

    When plotting a `sparse` matrix, the plot does not show the `value` of
    the elements of matrix entries. Rather, it only shows boolean values
    indicating the non-zero elements by the value of `1`, and zero
    elsewhere.

Examples
--------

Generate a matrix of the size `(20,20)` corresponding to the spatial
correlation of a set of `20` points in the unit interval:

.. code-block:: python

   &gt;&gt;&gt; from imate.sample_matrices import correlation_matrix
   &gt;&gt;&gt; A = correlation_matrix(20)

Generate a matrix of the size :math:`(20^2, 20^2)` corresponding to the
spatial correlation of a 2D grid of `20x20` points in the unit square:

.. code-block:: python

   &gt;&gt;&gt; from imate.sample_matrices import correlation_matrix
   &gt;&gt;&gt; A = correlation_matrix(20, dimension=2)

Generate a correlation matrix of the size `(20, 20)` based on 20 random
points in unit square:

.. code-block:: python

   &gt;&gt;&gt; A = correlation_matrix(size=20, dimension=2, grid=False)

Generate a matrix of the size :math:`(20^2, 20^2)` for the correlation of
a grid of `20x20` points in the unit square using Matern correlation
function with the parameter :math:`\\nu=2.5` and scale :math:`\\rho=0.2`,
and plot the matrix:

.. code-block:: python

   &gt;&gt;&gt; correlation_matrix(size=20, dimension=2, kernel=&apos;matern&apos;,
   ...                    kernel_param=2.5, scale=0.2, plot=True)


.. image:: ../_static/images/plots/correlation_matrix_dense.png
    :align: center
    :width: 60%
    :class: custom-dark

Sparsify correlation matrix of size :math:`(30^2, 30^2)` with approximate
density :math:`5 \\times 10^{-2}`. Use `CSR` format and `32-bit` floating
point.

.. code-block:: python

   &gt;&gt;&gt; A = correlation_matrix(size=30, dimension=2, scale=0.1, sparse=True,
   ...                        density=5e-2, format=&apos;csr&apos;, dtype=&apos;float32&apos;)


.. image:: ../_static/images/plots/correlation_matrix_sparse.png
    :align: center
    :width: 60%
    :class: custom-dark
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/sample_matrices/correlation_matrix.py" line="33" column="1" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/sample_matrices/correlation_matrix.py" bodystart="45" bodyend="425"/>
        <references refid="namespaceimate_1_1sample__matrices_1_1correlation__matrix_1ae1ff6ce05f3d1675939d57c9b3bf8d64" compoundref="correlation__matrix_8py" startline="438" endline="573">imate.sample_matrices.correlation_matrix._check_arguments</references>
        <references refid="namespaceimate_1_1sample__matrices_1_1__dense__correlation__matrix_1a7b6bb470659e02f438b2a7e68c9ae3bb" compoundref="__dense__correlation__matrix_8pyx" startline="160" endline="286">imate.sample_matrices._dense_correlation_matrix.dense_correlation_matrix</references>
        <references refid="namespaceimate_1_1sample__matrices_1_1__generate__points_1a68601d4980d7a2c9db7d8ac650e78ad5" compoundref="__generate__points_8pyx" startline="25" endline="65">imate.sample_matrices._generate_points.generate_points</references>
        <references refid="namespaceimate_1_1sample__matrices_1_1correlation__matrix_1a0120e3faa4d26e769c90784ed3ffa3d9" compoundref="correlation__matrix_8py" startline="574" endline="634">imate.sample_matrices.correlation_matrix.plot_matrix</references>
        <references refid="namespaceimate_1_1sample__matrices_1_1__sparse__correlation__matrix_1a83b3a16cded854e41425d2550d137d95" compoundref="__sparse__correlation__matrix_8pyx" startline="460" endline="663">imate.sample_matrices._sparse_correlation_matrix.sparse_correlation_matrix</references>
      </memberdef>
      <memberdef kind="function" id="namespaceimate_1_1sample__matrices_1_1correlation__matrix_1ae1ff6ce05f3d1675939d57c9b3bf8d64" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def imate.sample_matrices.correlation_matrix._check_arguments</definition>
        <argsstring>(size, dimension, scale, kernel, kernel_param, grid, sparse, density, format, dtype, plot, verbose)</argsstring>
        <name>_check_arguments</name>
        <param>
          <type>size</type>
          <defname>size</defname>
        </param>
        <param>
          <type>dimension</type>
          <defname>dimension</defname>
        </param>
        <param>
          <type>scale</type>
          <defname>scale</defname>
        </param>
        <param>
          <type>kernel</type>
          <defname>kernel</defname>
        </param>
        <param>
          <type>kernel_param</type>
          <defname>kernel_param</defname>
        </param>
        <param>
          <type>grid</type>
          <defname>grid</defname>
        </param>
        <param>
          <type>sparse</type>
          <defname>sparse</defname>
        </param>
        <param>
          <type>density</type>
          <defname>density</defname>
        </param>
        <param>
          <type>format</type>
          <defname>format</defname>
        </param>
        <param>
          <type>dtype</type>
          <defname>dtype</defname>
        </param>
        <param>
          <type>plot</type>
          <defname>plot</defname>
        </param>
        <param>
          <type>verbose</type>
          <defname>verbose</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Checks the type and values of the input arguments.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/sample_matrices/correlation_matrix.py" line="426" column="1" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/sample_matrices/correlation_matrix.py" bodystart="438" bodyend="573"/>
        <references refid="namespaceimate_1_1__utilities_1_1plot__utilities_1ac5be3859295616ee4d82fdcaab5faedd" compoundref="plot__utilities_8py" startline="64" endline="103">imate._utilities.plot_utilities.load_plot_settings</references>
        <referencedby refid="namespaceimate_1_1sample__matrices_1_1correlation__matrix_1abce2891d45b26e645bb349b548a1977e" compoundref="correlation__matrix_8py" startline="45" endline="425">imate.sample_matrices.correlation_matrix.correlation_matrix</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceimate_1_1sample__matrices_1_1correlation__matrix_1a0120e3faa4d26e769c90784ed3ffa3d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def imate.sample_matrices.correlation_matrix.plot_matrix</definition>
        <argsstring>(matrix, sparse, verbose=False)</argsstring>
        <name>plot_matrix</name>
        <param>
          <type>matrix</type>
          <defname>matrix</defname>
        </param>
        <param>
          <type>sparse</type>
          <defname>sparse</defname>
        </param>
        <param>
          <type>verbose</type>
          <defname>verbose</defname>
          <defval>False</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Plots a given matrix.

If the matrix is a sparse, it plots all non-zero elements with single
color regardless of their values, and leaves the zero elements white.

Whereas, if the matrix is not a sparse matrix, the colormap of the plot
correspond to the value of the elements of the matrix.

If a graphical backend is not provided, the plot is not displayed,
rather saved as ``SVG`` file in the current directory of user.

:param matrix: A 2D array
:type matrix: numpy.ndarray or scipy.sparse.csc_matrix

:param sparse: Determine whether the matrix is dense or sparse
:type sparse: bool

:param verbose: If `True`, prints some information during the process.
:type verbose: bool
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/sample_matrices/correlation_matrix.py" line="574" column="1" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/sample_matrices/correlation_matrix.py" bodystart="574" bodyend="634"/>
        <references refid="namespaceimate_1_1__utilities_1_1plot__utilities_1ac5be3859295616ee4d82fdcaab5faedd" compoundref="plot__utilities_8py" startline="64" endline="103">imate._utilities.plot_utilities.load_plot_settings</references>
        <references refid="namespaceimate_1_1__utilities_1_1plot__utilities_1a16effb74c6816ea6e0efbd6cbd19a494" compoundref="plot__utilities_8py" startline="110" endline="156">imate._utilities.plot_utilities.save_plot</references>
        <referencedby refid="namespaceimate_1_1sample__matrices_1_1correlation__matrix_1abce2891d45b26e645bb349b548a1977e" compoundref="correlation__matrix_8py" startline="45" endline="425">imate.sample_matrices.correlation_matrix.correlation_matrix</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/sample_matrices/correlation_matrix.py" line="1" column="1"/>
  </compounddef>
</doxygen>
