<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="cudart__symbols_8cpp" kind="file" language="C++">
    <compoundname>cudart_symbols.cpp</compoundname>
    <includes refid="cudart__symbols_8h" local="yes">./cudart_symbols.h</includes>
    <includes local="no">cuda_runtime_api.h</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">sstream</includes>
    <includes refid="dynamic__loading_8h" local="yes">./dynamic_loading.h</includes>
    <incdepgraph>
      <node id="8">
        <label>./dynamic_loading.h</label>
        <link refid="dynamic__loading_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>stdexcept</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="4">
        <label>./cudart_types.h</label>
        <link refid="cudart__types_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>./cudart_symbols.h</label>
        <link refid="cudart__symbols_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp</label>
        <link refid="cudart__symbols_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>sstream</label>
      </node>
      <node id="6">
        <label>cstdlib</label>
      </node>
      <node id="5">
        <label>cuda_runtime_api.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="cudart__symbols_8cpp_1a320ab51604f3a7a082795202e7eaf774" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cudaError_t</type>
        <definition>cudaError_t cudaEventCreate</definition>
        <argsstring>(cudaEvent_t *event)</argsstring>
        <name>cudaEventCreate</name>
        <param>
          <type>cudaEvent_t *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Definition of CUDA&apos;s <computeroutput>cudaEventCreate</computeroutput> function using dynamically loaded cudart library. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" line="106" column="13" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" bodystart="106" bodyend="120"/>
        <references refid="classcudartSymbols_1a156c42bf5798d18233e5ebe315226d15" compoundref="cudart__symbols_8h" startline="54">cudartSymbols::cudaEventCreate</references>
        <references refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" compoundref="cudart__symbols_8cpp" startline="54" endline="91">cudartSymbols::get_lib_name</references>
        <referencedby refid="classCudaTimer_1add52b7f92343ff892346eb3f9d6f9173" compoundref="cuda__timer_8cu" startline="26" endline="30">CudaTimer::CudaTimer</referencedby>
      </memberdef>
      <memberdef kind="function" id="cudart__symbols_8cpp_1a513a33d6c552db36be7edc5b3e9e0765" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cudaError_t</type>
        <definition>cudaError_t cudaEventDestroy</definition>
        <argsstring>(cudaEvent_t event)</argsstring>
        <name>cudaEventDestroy</name>
        <param>
          <type>cudaEvent_t</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Definition of CUDA&apos;s <computeroutput>cudaEventDestroy</computeroutput> function using dynamically loaded cudart library. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" line="130" column="13" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" bodystart="130" bodyend="144"/>
        <references refid="classcudartSymbols_1a99161bd609c1844125807f92a6de2413" compoundref="cudart__symbols_8h" startline="55">cudartSymbols::cudaEventDestroy</references>
        <references refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" compoundref="cudart__symbols_8cpp" startline="54" endline="91">cudartSymbols::get_lib_name</references>
        <referencedby refid="classCudaTimer_1a1399cfa1437978db51c918ef5b9eeb70" compoundref="cuda__timer_8cu" startline="40" endline="44">CudaTimer::~CudaTimer</referencedby>
      </memberdef>
      <memberdef kind="function" id="cudart__symbols_8cpp_1a14c387cc57ce2e328f6669854e6020a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cudaError_t</type>
        <definition>cudaError_t cudaEventElapsedTime</definition>
        <argsstring>(float *ms, cudaEvent_t start, cudaEvent_t end)</argsstring>
        <name>cudaEventElapsedTime</name>
        <param>
          <type>float *</type>
          <declname>ms</declname>
        </param>
        <param>
          <type>cudaEvent_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>cudaEvent_t</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Definition of CUDA&apos;s <computeroutput>cudaEventElapsedTime</computeroutput> function using dynamically loaded cudart library. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" line="154" column="13" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" bodystart="154" bodyend="171"/>
        <references refid="classcudartSymbols_1ae4c104f14a430b3fbe81ea0dde0e89bd" compoundref="cudart__symbols_8h" startline="56">cudartSymbols::cudaEventElapsedTime</references>
        <references refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" compoundref="cudart__symbols_8cpp" startline="54" endline="91">cudartSymbols::get_lib_name</references>
        <referencedby refid="classCudaTimer_1ab7853cd930e7c0500da53565d8e431d2" compoundref="cuda__timer_8cu" startline="80" endline="88">CudaTimer::elapsed</referencedby>
      </memberdef>
      <memberdef kind="function" id="cudart__symbols_8cpp_1aa50793c0412e7d1aa9b184c576888732" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cudaError_t</type>
        <definition>cudaError_t cudaEventRecord</definition>
        <argsstring>(cudaEvent_t event, cudaStream_t stream)</argsstring>
        <name>cudaEventRecord</name>
        <param>
          <type>cudaEvent_t</type>
          <declname>event</declname>
        </param>
        <param>
          <type>cudaStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Definition of CUDA&apos;s <computeroutput>cudaEventRecord</computeroutput> function using dynamically loaded cudart library. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" line="181" column="13" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" bodystart="181" bodyend="195"/>
        <references refid="classcudartSymbols_1a8e99a02eb0fb34f9883507103e79d40f" compoundref="cudart__symbols_8h" startline="57">cudartSymbols::cudaEventRecord</references>
        <references refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" compoundref="cudart__symbols_8cpp" startline="54" endline="91">cudartSymbols::get_lib_name</references>
        <referencedby refid="classCudaTimer_1a5db3e05cd63573015bf1a9f55cc37e32" compoundref="cuda__timer_8cu" startline="54" endline="57">CudaTimer::start</referencedby>
        <referencedby refid="classCudaTimer_1a20e3226471439fed515fdde5d6e4ce75" compoundref="cuda__timer_8cu" startline="67" endline="70">CudaTimer::stop</referencedby>
      </memberdef>
      <memberdef kind="function" id="cudart__symbols_8cpp_1a08241bcf5c5cb686b1882a8492f1e2d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cudaError_t</type>
        <definition>cudaError_t cudaEventSynchronize</definition>
        <argsstring>(cudaEvent_t event)</argsstring>
        <name>cudaEventSynchronize</name>
        <param>
          <type>cudaEvent_t</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Definition of CUDA&apos;s <computeroutput>cudaEventSynchronize</computeroutput> function using dynamically loaded cudart library. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" line="205" column="13" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" bodystart="205" bodyend="219"/>
        <references refid="classcudartSymbols_1a1740daff311a7b25a02b7b46b8087a6a" compoundref="cudart__symbols_8h" startline="58">cudartSymbols::cudaEventSynchronize</references>
        <references refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" compoundref="cudart__symbols_8cpp" startline="54" endline="91">cudartSymbols::get_lib_name</references>
        <referencedby refid="classCudaTimer_1ab7853cd930e7c0500da53565d8e431d2" compoundref="cuda__timer_8cu" startline="80" endline="88">CudaTimer::elapsed</referencedby>
      </memberdef>
      <memberdef kind="function" id="cudart__symbols_8cpp_1a1795645d53ca669d84d2aff6f3706917" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cudaError_t</type>
        <definition>cudaError_t cudaGetDevice</definition>
        <argsstring>(int *device)</argsstring>
        <name>cudaGetDevice</name>
        <param>
          <type>int *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Definition of CUDA&apos;s <computeroutput>cudaGetDevice</computeroutput> function using dynamically loaded cudart library. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" line="229" column="13" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" bodystart="229" bodyend="243"/>
        <references refid="classcudartSymbols_1a866844e71c33e007d14ffde7777fc16d" compoundref="cudart__symbols_8h" startline="59">cudartSymbols::cudaGetDevice</references>
        <references refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" compoundref="cudart__symbols_8cpp" startline="54" endline="91">cudartSymbols::get_lib_name</references>
        <referencedby refid="classCudaInterface_1a29ab521266d2670951510179d719ead1" compoundref="cuda__interface_8cu" startline="206" endline="213">CudaInterface&lt; ArrayType &gt;::get_device</referencedby>
      </memberdef>
      <memberdef kind="function" id="cudart__symbols_8cpp_1a665468e8cb33be42434f11bee2684ec9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cudaError_t</type>
        <definition>cudaError_t cudaGetDeviceCount</definition>
        <argsstring>(int *count)</argsstring>
        <name>cudaGetDeviceCount</name>
        <param>
          <type>int *</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Definition of CUDA&apos;s <computeroutput>cudaGetDeviceCount</computeroutput> function using dynamically loaded cudart library. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" line="253" column="13" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" bodystart="253" bodyend="267"/>
        <references refid="classcudartSymbols_1a9db146f9df12943d584c85215c64b2eb" compoundref="cudart__symbols_8h" startline="60">cudartSymbols::cudaGetDeviceCount</references>
        <references refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" compoundref="cudart__symbols_8cpp" startline="54" endline="91">cudartSymbols::get_lib_name</references>
        <referencedby refid="query__device_8cu_1a6738c790bb99e337eb12d743f0b0652b" compoundref="query__device_8cu" startline="31" endline="67">query_device</referencedby>
        <referencedby refid="classcuLinearOperator_1a8dac55aff04e3f372468b21367a6dab8" compoundref="cu__linear__operator_8cu" startline="252" endline="270">cuLinearOperator&lt; DataType &gt;::query_gpu_devices</referencedby>
      </memberdef>
      <memberdef kind="function" id="cudart__symbols_8cpp_1ae46a70f938468d67438cec2ed2fefbb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cudaError_t</type>
        <definition>cudaError_t cudaGetDeviceProperties</definition>
        <argsstring>(cudaDeviceProp *prop, int device)</argsstring>
        <name>cudaGetDeviceProperties</name>
        <param>
          <type>cudaDeviceProp *</type>
          <declname>prop</declname>
        </param>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Definition of CUDA&apos;s <computeroutput>cudaGetDeviceProperties</computeroutput> function using dynamically loaded cudart library. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" line="277" column="13" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" bodystart="277" bodyend="293"/>
        <references refid="classcudartSymbols_1af4687160fc8cc14c5548fbd8eb50fb1c" compoundref="cudart__symbols_8h" startline="61">cudartSymbols::cudaGetDeviceProperties</references>
        <references refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" compoundref="cudart__symbols_8cpp" startline="54" endline="91">cudartSymbols::get_lib_name</references>
        <referencedby refid="query__device_8cu_1a6738c790bb99e337eb12d743f0b0652b" compoundref="query__device_8cu" startline="31" endline="67">query_device</referencedby>
      </memberdef>
      <memberdef kind="function" id="cudart__symbols_8cpp_1ab17fef862d4d1fefb9dba35bd62a187e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cudaError_t</type>
        <definition>cudaError_t cudaFree</definition>
        <argsstring>(void *devPtr)</argsstring>
        <name>cudaFree</name>
        <param>
          <type>void *</type>
          <declname>devPtr</declname>
        </param>
        <briefdescription>
<para>Definition of CUDA&apos;s <computeroutput>cudaFree</computeroutput> function using dynamically loaded cudart library. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" line="303" column="13" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" bodystart="303" bodyend="316"/>
        <references refid="classcudartSymbols_1adddc0765e7978f269faf9a8eb4489d09" compoundref="cudart__symbols_8h" startline="62">cudartSymbols::cudaFree</references>
        <references refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" compoundref="cudart__symbols_8cpp" startline="54" endline="91">cudartSymbols::get_lib_name</references>
        <referencedby refid="classCudaInterface_1a427b7203f73cf821e35234e5f724064b" compoundref="cuda__interface_8cu" startline="166" endline="174">CudaInterface&lt; ArrayType &gt;::del</referencedby>
      </memberdef>
      <memberdef kind="function" id="cudart__symbols_8cpp_1ac63ffd93e344b939d6399199d8b12fef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cudaError_t</type>
        <definition>cudaError_t cudaMalloc</definition>
        <argsstring>(void **devPtr, size_t size)</argsstring>
        <name>cudaMalloc</name>
        <param>
          <type>void **</type>
          <declname>devPtr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Definition of CUDA&apos;s <computeroutput>cudaMalloc</computeroutput> function using dynamically loaded cudart library. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" line="326" column="13" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" bodystart="326" bodyend="340"/>
        <references refid="classcudartSymbols_1a27c13dcf820b6d1f8ff2774ba0c58a67" compoundref="cudart__symbols_8h" startline="63">cudartSymbols::cudaMalloc</references>
        <references refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" compoundref="cudart__symbols_8cpp" startline="54" endline="91">cudartSymbols::get_lib_name</references>
        <referencedby refid="classCudaInterface_1a65875bf1fdfe213562b31e3459f04b33" compoundref="cuda__interface_8cu" startline="36" endline="60">CudaInterface&lt; ArrayType &gt;::alloc</referencedby>
        <referencedby refid="classCudaInterface_1a45411db9045668d1c0407e33d7b4e825" compoundref="cuda__interface_8cu" startline="115" endline="125">CudaInterface&lt; ArrayType &gt;::alloc_bytes</referencedby>
      </memberdef>
      <memberdef kind="function" id="cudart__symbols_8cpp_1ac6037fee0e6fa6d528cb60e1c8e7ba26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cudaError_t</type>
        <definition>cudaError_t cudaMemcpy</definition>
        <argsstring>(void *dst, const void *src, size_t count, cudaMemcpyKind kind)</argsstring>
        <name>cudaMemcpy</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>cudaMemcpyKind</type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Definition of CUDA&apos;s <computeroutput>cudaMemcpy</computeroutput> function using dynamically loaded cudart library. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" line="350" column="13" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" bodystart="350" bodyend="368"/>
        <references refid="classcudartSymbols_1a4143994a7240140b2f0fd9caf85926d1" compoundref="cudart__symbols_8h" startline="64">cudartSymbols::cudaMemcpy</references>
        <references refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" compoundref="cudart__symbols_8cpp" startline="54" endline="91">cudartSymbols::get_lib_name</references>
        <referencedby refid="classCudaInterface_1a95efada2ca34b3490f96ccfa97b4d6eb" compoundref="cuda__interface_8cu" startline="142" endline="151">CudaInterface&lt; ArrayType &gt;::copy_to_device</referencedby>
      </memberdef>
      <memberdef kind="function" id="cudart__symbols_8cpp_1a418c299b069c4803bfb7cab4943da383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cudaError_t</type>
        <definition>cudaError_t cudaSetDevice</definition>
        <argsstring>(int device)</argsstring>
        <name>cudaSetDevice</name>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Definition of CUDA&apos;s <computeroutput>cudaSetDevice</computeroutput> function using dynamically loaded cudart library. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" line="378" column="13" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" bodystart="378" bodyend="392"/>
        <references refid="classcudartSymbols_1ac7eb5608f9c5a0f79b3049bb1abda5b8" compoundref="cudart__symbols_8h" startline="65">cudartSymbols::cudaSetDevice</references>
        <references refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" compoundref="cudart__symbols_8cpp" startline="54" endline="91">cudartSymbols::get_lib_name</references>
        <referencedby refid="classCudaInterface_1aba5754e3b4c02d3b151fdee31fa0fd46" compoundref="cuda__interface_8cu" startline="188" endline="192">CudaInterface&lt; ArrayType &gt;::set_device</referencedby>
      </memberdef>
      <memberdef kind="function" id="cudart__symbols_8cpp_1a0e398a10d2ae6b0f2667c38db583d408" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void** __cudaRegisterFatBinary</definition>
        <argsstring>(void *fatCubin)</argsstring>
        <name>__cudaRegisterFatBinary</name>
        <param>
          <type>void *</type>
          <declname>fatCubin</declname>
        </param>
        <briefdescription>
<para>Definition of CUDA&apos;s <computeroutput>__cudaRegisterFatBinary</computeroutput> function using dynamically loaded cudart library. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" line="402" column="6" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" bodystart="402" bodyend="416"/>
        <references refid="classcudartSymbols_1a5dc1251d3782a5040c8bff90202995b6" compoundref="cudart__symbols_8h" startline="66">cudartSymbols::__cudaRegisterFatBinary</references>
        <references refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" compoundref="cudart__symbols_8cpp" startline="54" endline="91">cudartSymbols::get_lib_name</references>
      </memberdef>
      <memberdef kind="function" id="cudart__symbols_8cpp_1a5016ff9880d3be90adec7d3e55c44f74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void __cudaRegisterFatBinaryEnd</definition>
        <argsstring>(void **fatCubinHandle)</argsstring>
        <name>__cudaRegisterFatBinaryEnd</name>
        <param>
          <type>void **</type>
          <declname>fatCubinHandle</declname>
        </param>
        <briefdescription>
<para>Definition of CUDA&apos;s <computeroutput>__cudaRegisterFatBinaryEnd</computeroutput> function using dynamically loaded cudart library. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" line="426" column="6" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" bodystart="426" bodyend="440"/>
        <references refid="classcudartSymbols_1a1985af1646384a14fea66aaaf35377dd" compoundref="cudart__symbols_8h" startline="67">cudartSymbols::__cudaRegisterFatBinaryEnd</references>
        <references refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" compoundref="cudart__symbols_8cpp" startline="54" endline="91">cudartSymbols::get_lib_name</references>
      </memberdef>
      <memberdef kind="function" id="cudart__symbols_8cpp_1aca3de54c4d2838044768ba05ff76cbf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void __cudaUnregisterFatBinary</definition>
        <argsstring>(void **fatCubinHandle)</argsstring>
        <name>__cudaUnregisterFatBinary</name>
        <param>
          <type>void **</type>
          <declname>fatCubinHandle</declname>
        </param>
        <briefdescription>
<para>Definition of CUDA&apos;s <computeroutput>__cudaUnregisterFatBinary</computeroutput> function using dynamically loaded cudart library. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" line="450" column="6" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp" bodystart="450" bodyend="464"/>
        <references refid="classcudartSymbols_1a1ab071e3a3d72de31406b954dbddde28" compoundref="cudart__symbols_8h" startline="68">cudartSymbols::__cudaUnregisterFatBinary</references>
        <references refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" compoundref="cudart__symbols_8cpp" startline="54" endline="91">cudartSymbols::get_lib_name</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-FileCopyrightText:<sp/>Copyright<sp/>2021,<sp/>Siavash<sp/>Ameli<sp/>&lt;sameli@berkeley.edu&gt;</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>SPDX-FileType:<sp/>SOURCE</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>license<sp/>found<sp/>in<sp/>the<sp/>LICENSE.txt<sp/>file<sp/>in<sp/>the<sp/>root</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>directory<sp/>of<sp/>this<sp/>source<sp/>tree.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Headers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cudart__symbols_8h" kindref="compound">./cudart_symbols.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cuda_runtime_api.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cudaError_t,<sp/>cudaEvent_t,<sp/>cudaStream_t,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cudaDeviceProp,<sp/>cudaMemcpyKind</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::ostringstream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dynamic__loading_8h" kindref="compound">./dynamic_loading.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dynamic_loading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=========================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Initialize<sp/>static<sp/>members</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=========================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><ref refid="cudart__types_8h_1ae67b19a0c3dd4de67545a965fdaf6fbd" kindref="member">cudaEventCreate_type</ref><sp/><ref refid="classcudartSymbols_1a156c42bf5798d18233e5ebe315226d15" kindref="member">cudartSymbols::cudaEventCreate</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><ref refid="cudart__types_8h_1aa998a0924819a1885cbce23dcca1b05a" kindref="member">cudaEventDestroy_type</ref><sp/><ref refid="classcudartSymbols_1a99161bd609c1844125807f92a6de2413" kindref="member">cudartSymbols::cudaEventDestroy</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><ref refid="cudart__types_8h_1af2c9857c395f8f52313a93c66d4ac90b" kindref="member">cudaEventElapsedTime_type</ref><sp/><ref refid="classcudartSymbols_1ae4c104f14a430b3fbe81ea0dde0e89bd" kindref="member">cudartSymbols::cudaEventElapsedTime</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><ref refid="cudart__types_8h_1a6f3f9b5a42dfbf3224fe4278cef7c33a" kindref="member">cudaEventRecord_type</ref><sp/><ref refid="classcudartSymbols_1a8e99a02eb0fb34f9883507103e79d40f" kindref="member">cudartSymbols::cudaEventRecord</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="cudart__types_8h_1a277fda2f633fa19df7c8e24a4770def0" kindref="member">cudaEventSynchronize_type</ref><sp/><ref refid="classcudartSymbols_1a1740daff311a7b25a02b7b46b8087a6a" kindref="member">cudartSymbols::cudaEventSynchronize</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><ref refid="cudart__types_8h_1a4da08a0bdcb1e8e61e344293bd00647c" kindref="member">cudaGetDevice_type</ref><sp/><ref refid="classcudartSymbols_1a866844e71c33e007d14ffde7777fc16d" kindref="member">cudartSymbols::cudaGetDevice</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><ref refid="cudart__types_8h_1a1f035047da4c53f62a2bd22389fb4380" kindref="member">cudaGetDeviceCount_type</ref><sp/><ref refid="classcudartSymbols_1a9db146f9df12943d584c85215c64b2eb" kindref="member">cudartSymbols::cudaGetDeviceCount</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><ref refid="cudart__types_8h_1a7ad36acdde862c42a4bae561302e537a" kindref="member">cudaGetDeviceProperties_type</ref><sp/><ref refid="classcudartSymbols_1af4687160fc8cc14c5548fbd8eb50fb1c" kindref="member">cudartSymbols::cudaGetDeviceProperties</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><ref refid="cudart__types_8h_1a704d7fafc4657a3857353ff1b9a56390" kindref="member">cudaFree_type</ref><sp/><ref refid="classcudartSymbols_1adddc0765e7978f269faf9a8eb4489d09" kindref="member">cudartSymbols::cudaFree</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="cudart__types_8h_1af0dd7c7f0d4b25b5eae4079fc65b2813" kindref="member">cudaMalloc_type</ref><sp/><ref refid="classcudartSymbols_1a27c13dcf820b6d1f8ff2774ba0c58a67" kindref="member">cudartSymbols::cudaMalloc</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><ref refid="cudart__types_8h_1aef37ae8e24a1058e8206c6ca51bb4a43" kindref="member">cudaMemcpy_type</ref><sp/><ref refid="classcudartSymbols_1a4143994a7240140b2f0fd9caf85926d1" kindref="member">cudartSymbols::cudaMemcpy</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><ref refid="cudart__types_8h_1a662dccf3888cee88365e7d83d370e556" kindref="member">cudaSetDevice_type</ref><sp/><ref refid="classcudartSymbols_1ac7eb5608f9c5a0f79b3049bb1abda5b8" kindref="member">cudartSymbols::cudaSetDevice</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><ref refid="cudart__types_8h_1a8ba77889f2397fe1b41a5828d433283d" kindref="member">__cudaRegisterFatBinary_type</ref><sp/><ref refid="classcudartSymbols_1a5dc1251d3782a5040c8bff90202995b6" kindref="member">cudartSymbols::__cudaRegisterFatBinary</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><ref refid="cudart__types_8h_1a1e4ee21179992633deaa0ea9f9da6e9b" kindref="member">__cudaRegisterFatBinaryEnd_type</ref><sp/><ref refid="classcudartSymbols_1a1985af1646384a14fea66aaaf35377dd" kindref="member">cudartSymbols::__cudaRegisterFatBinaryEnd</ref><sp/>=<sp/>\</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><ref refid="cudart__types_8h_1aa137d2c7b09b0ffd11404fde378a9fda" kindref="member">__cudaUnregisterFatBinary_type</ref><sp/><ref refid="classcudartSymbols_1a1ab071e3a3d72de31406b954dbddde28" kindref="member">cudartSymbols::__cudaUnregisterFatBinary</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>get<sp/>lib<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" kindref="member">cudartSymbols::get_lib_name</ref>()</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>extension<sp/>name<sp/>of<sp/>a<sp/>shared<sp/>library<sp/>depending<sp/>on<sp/>OS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>lib_extension;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>defined(WIN32)<sp/>||<sp/>defined(_WIN32)<sp/>||<sp/>defined(__WIN32)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defined(__NT__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lib_extension<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;lib&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif<sp/>__APPLE__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lib_extension<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;dylib&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif<sp/>__linux__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lib_extension<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;so&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#error<sp/>&quot;Unknown<sp/>compiler&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>cudart<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>#ifndef<sp/>CUDART_VERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>#error<sp/>&quot;CUDART_VERSION<sp/>is<sp/>not<sp/>defined.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CUDART_VERSION<sp/>is<sp/>something<sp/>like<sp/>11020,<sp/>which<sp/>means<sp/>major<sp/>version<sp/>11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>minor<sp/>version<sp/>2.<sp/>To<sp/>get<sp/>the<sp/>major<sp/>version,<sp/>strip<sp/>off<sp/>last<sp/>three</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>digits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>int<sp/>cuda_version_major<sp/>=<sp/>CUDART_VERSION<sp/>/<sp/>1000;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cudart<sp/>shared<sp/>library<sp/>base<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>lib_base_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;libcudart&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>the<sp/>lib<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/>lib_base_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>lib_extension;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>oss<sp/>&lt;&lt;<sp/>lib_base_name<sp/>&lt;&lt;<sp/>&quot;.&quot;<sp/>&lt;&lt;<sp/>lib_extension<sp/>&lt;&lt;<sp/>&quot;.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::to_string(cuda_version_major);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>lib_name<sp/>=<sp/>oss.str();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lib_name;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cuda<sp/>Event<sp/>Create</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="cudart__symbols_8cpp_1a320ab51604f3a7a082795202e7eaf774" refkind="member"><highlight class="normal">cudaError_t<sp/><ref refid="cudart__symbols_8cpp_1a320ab51604f3a7a082795202e7eaf774" kindref="member">cudaEventCreate</ref>(cudaEvent_t*<sp/>event)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcudartSymbols_1a156c42bf5798d18233e5ebe315226d15" kindref="member">cudartSymbols::cudaEventCreate</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>lib_name<sp/>=<sp/><ref refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" kindref="member">cudartSymbols::get_lib_name</ref>();</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>symbol_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cudaEventCreate&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcudartSymbols_1a156c42bf5798d18233e5ebe315226d15" kindref="member">cudartSymbols::cudaEventCreate</ref><sp/>=<sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamic_loading::load_symbol&lt;cudaEventCreate_type&gt;(</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lib_name.c_str(),</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbol_name);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcudartSymbols_1a156c42bf5798d18233e5ebe315226d15" kindref="member">cudartSymbols::cudaEventCreate</ref>(event);</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cuda<sp/>Event<sp/>Destroy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="cudart__symbols_8cpp_1a513a33d6c552db36be7edc5b3e9e0765" refkind="member"><highlight class="normal">cudaError_t<sp/><ref refid="cudart__symbols_8cpp_1a513a33d6c552db36be7edc5b3e9e0765" kindref="member">cudaEventDestroy</ref>(cudaEvent_t<sp/>event)</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcudartSymbols_1a99161bd609c1844125807f92a6de2413" kindref="member">cudartSymbols::cudaEventDestroy</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>lib_name<sp/>=<sp/><ref refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" kindref="member">cudartSymbols::get_lib_name</ref>();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>symbol_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cudaEventDestroy&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcudartSymbols_1a99161bd609c1844125807f92a6de2413" kindref="member">cudartSymbols::cudaEventDestroy</ref><sp/>=<sp/>\</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamic_loading::load_symbol&lt;cudaEventDestroy_type&gt;(</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lib_name.c_str(),</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbol_name);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcudartSymbols_1a99161bd609c1844125807f92a6de2413" kindref="member">cudartSymbols::cudaEventDestroy</ref>(event);</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cuda<sp/>Event<sp/>Elapsed<sp/>Time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=======================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="cudart__symbols_8cpp_1a14c387cc57ce2e328f6669854e6020a5" refkind="member"><highlight class="normal">cudaError_t<sp/><ref refid="cudart__symbols_8cpp_1a14c387cc57ce2e328f6669854e6020a5" kindref="member">cudaEventElapsedTime</ref>(</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>ms,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaEvent_t<sp/>start,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaEvent_t<sp/>end)</highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcudartSymbols_1ae4c104f14a430b3fbe81ea0dde0e89bd" kindref="member">cudartSymbols::cudaEventElapsedTime</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>lib_name<sp/>=<sp/><ref refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" kindref="member">cudartSymbols::get_lib_name</ref>();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>symbol_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cudaEventElapsedTime&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcudartSymbols_1ae4c104f14a430b3fbe81ea0dde0e89bd" kindref="member">cudartSymbols::cudaEventElapsedTime</ref><sp/>=<sp/>\</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamic_loading::load_symbol&lt;cudaEventElapsedTime_type&gt;(</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lib_name.c_str(),</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbol_name);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcudartSymbols_1ae4c104f14a430b3fbe81ea0dde0e89bd" kindref="member">cudartSymbols::cudaEventElapsedTime</ref>(ms,<sp/>start,<sp/>end);</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cuda<sp/>Event<sp/>Record</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="cudart__symbols_8cpp_1aa50793c0412e7d1aa9b184c576888732" refkind="member"><highlight class="normal">cudaError_t<sp/><ref refid="cudart__symbols_8cpp_1aa50793c0412e7d1aa9b184c576888732" kindref="member">cudaEventRecord</ref>(cudaEvent_t<sp/>event,<sp/>cudaStream_t<sp/>stream)</highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcudartSymbols_1a8e99a02eb0fb34f9883507103e79d40f" kindref="member">cudartSymbols::cudaEventRecord</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>lib_name<sp/>=<sp/><ref refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" kindref="member">cudartSymbols::get_lib_name</ref>();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>symbol_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cudaEventRecord&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcudartSymbols_1a8e99a02eb0fb34f9883507103e79d40f" kindref="member">cudartSymbols::cudaEventRecord</ref><sp/>=<sp/>\</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamic_loading::load_symbol&lt;cudaEventRecord_type&gt;(</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lib_name.c_str(),</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbol_name);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcudartSymbols_1a8e99a02eb0fb34f9883507103e79d40f" kindref="member">cudartSymbols::cudaEventRecord</ref>(event,<sp/>stream);</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>======================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cuda<sp/>Event<sp/>Synchronize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">//<sp/>======================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="cudart__symbols_8cpp_1a08241bcf5c5cb686b1882a8492f1e2d9" refkind="member"><highlight class="normal">cudaError_t<sp/><ref refid="cudart__symbols_8cpp_1a08241bcf5c5cb686b1882a8492f1e2d9" kindref="member">cudaEventSynchronize</ref>(cudaEvent_t<sp/>event)</highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcudartSymbols_1a1740daff311a7b25a02b7b46b8087a6a" kindref="member">cudartSymbols::cudaEventSynchronize</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>lib_name<sp/>=<sp/><ref refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" kindref="member">cudartSymbols::get_lib_name</ref>();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>symbol_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cudaEventSynchronize&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcudartSymbols_1a1740daff311a7b25a02b7b46b8087a6a" kindref="member">cudartSymbols::cudaEventSynchronize</ref><sp/>=<sp/>\</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamic_loading::load_symbol&lt;cudaEventSynchronize_type&gt;(</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lib_name.c_str(),</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbol_name);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcudartSymbols_1a1740daff311a7b25a02b7b46b8087a6a" kindref="member">cudartSymbols::cudaEventSynchronize</ref>(event);</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cuda<sp/>Get<sp/>Device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="cudart__symbols_8cpp_1a1795645d53ca669d84d2aff6f3706917" refkind="member"><highlight class="normal">cudaError_t<sp/><ref refid="cudart__symbols_8cpp_1a1795645d53ca669d84d2aff6f3706917" kindref="member">cudaGetDevice</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>device)</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcudartSymbols_1a866844e71c33e007d14ffde7777fc16d" kindref="member">cudartSymbols::cudaGetDevice</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>lib_name<sp/>=<sp/><ref refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" kindref="member">cudartSymbols::get_lib_name</ref>();</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>symbol_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cudaGetDevice&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcudartSymbols_1a866844e71c33e007d14ffde7777fc16d" kindref="member">cudartSymbols::cudaGetDevice</ref><sp/>=<sp/>\</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamic_loading::load_symbol&lt;cudaGetDevice_type&gt;(</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lib_name.c_str(),</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbol_name);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcudartSymbols_1a866844e71c33e007d14ffde7777fc16d" kindref="member">cudartSymbols::cudaGetDevice</ref>(device);</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=====================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cuda<sp/>Get<sp/>Device<sp/>Count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=====================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253" refid="cudart__symbols_8cpp_1a665468e8cb33be42434f11bee2684ec9" refkind="member"><highlight class="normal">cudaError_t<sp/><ref refid="cudart__symbols_8cpp_1a665468e8cb33be42434f11bee2684ec9" kindref="member">cudaGetDeviceCount</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>count)</highlight></codeline>
<codeline lineno="254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcudartSymbols_1a9db146f9df12943d584c85215c64b2eb" kindref="member">cudartSymbols::cudaGetDeviceCount</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>lib_name<sp/>=<sp/><ref refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" kindref="member">cudartSymbols::get_lib_name</ref>();</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>symbol_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cudaGetDeviceCount&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcudartSymbols_1a9db146f9df12943d584c85215c64b2eb" kindref="member">cudartSymbols::cudaGetDeviceCount</ref><sp/>=<sp/>\</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamic_loading::load_symbol&lt;cudaGetDeviceCount_type&gt;(</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lib_name.c_str(),</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbol_name);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcudartSymbols_1a9db146f9df12943d584c85215c64b2eb" kindref="member">cudartSymbols::cudaGetDeviceCount</ref>(count);</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cuda<sp/>Get<sp/>Device<sp/>Properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="cudart__symbols_8cpp_1ae46a70f938468d67438cec2ed2fefbb4" refkind="member"><highlight class="normal">cudaError_t<sp/><ref refid="cudart__symbols_8cpp_1ae46a70f938468d67438cec2ed2fefbb4" kindref="member">cudaGetDeviceProperties</ref>(</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaDeviceProp*<sp/>prop,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device)</highlight></codeline>
<codeline lineno="280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcudartSymbols_1af4687160fc8cc14c5548fbd8eb50fb1c" kindref="member">cudartSymbols::cudaGetDeviceProperties</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>lib_name<sp/>=<sp/><ref refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" kindref="member">cudartSymbols::get_lib_name</ref>();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>symbol_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cudaGetDeviceProperties&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcudartSymbols_1af4687160fc8cc14c5548fbd8eb50fb1c" kindref="member">cudartSymbols::cudaGetDeviceProperties</ref><sp/>=<sp/>\</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamic_loading::load_symbol&lt;cudaGetDeviceProperties_type&gt;(</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lib_name.c_str(),</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbol_name);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcudartSymbols_1af4687160fc8cc14c5548fbd8eb50fb1c" kindref="member">cudartSymbols::cudaGetDeviceProperties</ref>(prop,<sp/>device);</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cuda<sp/>Free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303" refid="cudart__symbols_8cpp_1ab17fef862d4d1fefb9dba35bd62a187e" refkind="member"><highlight class="normal">cudaError_t<sp/><ref refid="cudart__symbols_8cpp_1ab17fef862d4d1fefb9dba35bd62a187e" kindref="member">cudaFree</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>devPtr)</highlight></codeline>
<codeline lineno="304"><highlight class="normal">{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcudartSymbols_1adddc0765e7978f269faf9a8eb4489d09" kindref="member">cudartSymbols::cudaFree</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>lib_name<sp/>=<sp/><ref refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" kindref="member">cudartSymbols::get_lib_name</ref>();</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>symbol_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cudaFree&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcudartSymbols_1adddc0765e7978f269faf9a8eb4489d09" kindref="member">cudartSymbols::cudaFree</ref><sp/>=<sp/>dynamic_loading::load_symbol&lt;cudaFree_type&gt;(</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lib_name.c_str(),</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbol_name);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcudartSymbols_1adddc0765e7978f269faf9a8eb4489d09" kindref="member">cudartSymbols::cudaFree</ref>(devPtr);</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cuda<sp/>Malloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326" refid="cudart__symbols_8cpp_1ac63ffd93e344b939d6399199d8b12fef" refkind="member"><highlight class="normal">cudaError_t<sp/><ref refid="cudart__symbols_8cpp_1ac63ffd93e344b939d6399199d8b12fef" kindref="member">cudaMalloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>devPtr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="327"><highlight class="normal">{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcudartSymbols_1a27c13dcf820b6d1f8ff2774ba0c58a67" kindref="member">cudartSymbols::cudaMalloc</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>lib_name<sp/>=<sp/><ref refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" kindref="member">cudartSymbols::get_lib_name</ref>();</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>symbol_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cudaMalloc&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcudartSymbols_1a27c13dcf820b6d1f8ff2774ba0c58a67" kindref="member">cudartSymbols::cudaMalloc</ref><sp/>=<sp/>\</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamic_loading::load_symbol&lt;cudaMalloc_type&gt;(</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lib_name.c_str(),</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbol_name);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcudartSymbols_1a27c13dcf820b6d1f8ff2774ba0c58a67" kindref="member">cudartSymbols::cudaMalloc</ref>(devPtr,<sp/>size);</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cuda<sp/>Memcpy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350" refid="cudart__symbols_8cpp_1ac6037fee0e6fa6d528cb60e1c8e7ba26" refkind="member"><highlight class="normal">cudaError_t<sp/><ref refid="cudart__symbols_8cpp_1ac6037fee0e6fa6d528cb60e1c8e7ba26" kindref="member">cudaMemcpy</ref>(</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>src,</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaMemcpyKind<sp/>kind)</highlight></codeline>
<codeline lineno="355"><highlight class="normal">{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcudartSymbols_1a4143994a7240140b2f0fd9caf85926d1" kindref="member">cudartSymbols::cudaMemcpy</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>lib_name<sp/>=<sp/><ref refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" kindref="member">cudartSymbols::get_lib_name</ref>();</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>symbol_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cudaMemcpy&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcudartSymbols_1a4143994a7240140b2f0fd9caf85926d1" kindref="member">cudartSymbols::cudaMemcpy</ref><sp/>=<sp/>\</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamic_loading::load_symbol&lt;cudaMemcpy_type&gt;(</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lib_name.c_str(),</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbol_name);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcudartSymbols_1a4143994a7240140b2f0fd9caf85926d1" kindref="member">cudartSymbols::cudaMemcpy</ref>(dst,<sp/>src,<sp/>count,<sp/>kind);</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cuda<sp/>Memcpy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378" refid="cudart__symbols_8cpp_1a418c299b069c4803bfb7cab4943da383" refkind="member"><highlight class="normal">cudaError_t<sp/><ref refid="cudart__symbols_8cpp_1a418c299b069c4803bfb7cab4943da383" kindref="member">cudaSetDevice</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>device)</highlight></codeline>
<codeline lineno="379"><highlight class="normal">{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcudartSymbols_1ac7eb5608f9c5a0f79b3049bb1abda5b8" kindref="member">cudartSymbols::cudaSetDevice</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>lib_name<sp/>=<sp/><ref refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" kindref="member">cudartSymbols::get_lib_name</ref>();</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>symbol_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cudaSetDevice&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcudartSymbols_1ac7eb5608f9c5a0f79b3049bb1abda5b8" kindref="member">cudartSymbols::cudaSetDevice</ref><sp/>=<sp/>\</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamic_loading::load_symbol&lt;cudaSetDevice_type&gt;(</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lib_name.c_str(),</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbol_name);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcudartSymbols_1ac7eb5608f9c5a0f79b3049bb1abda5b8" kindref="member">cudartSymbols::cudaSetDevice</ref>(device);</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">//<sp/>========================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cuda<sp/>Register<sp/>Fat<sp/>Binary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">//<sp/>========================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402" refid="cudart__symbols_8cpp_1a0e398a10d2ae6b0f2667c38db583d408" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><ref refid="cudart__symbols_8cpp_1a0e398a10d2ae6b0f2667c38db583d408" kindref="member">__cudaRegisterFatBinary</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*fatCubin)</highlight></codeline>
<codeline lineno="403"><highlight class="normal">{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcudartSymbols_1a5dc1251d3782a5040c8bff90202995b6" kindref="member">cudartSymbols::__cudaRegisterFatBinary</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>lib_name<sp/>=<sp/><ref refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" kindref="member">cudartSymbols::get_lib_name</ref>();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>symbol_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;__cudaRegisterFatBinary&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcudartSymbols_1a5dc1251d3782a5040c8bff90202995b6" kindref="member">cudartSymbols::__cudaRegisterFatBinary</ref><sp/>=<sp/>\</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamic_loading::load_symbol&lt;__cudaRegisterFatBinary_type&gt;(</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lib_name.c_str(),</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbol_name);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcudartSymbols_1a5dc1251d3782a5040c8bff90202995b6" kindref="member">cudartSymbols::__cudaRegisterFatBinary</ref>(fatCubin);</highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cuda<sp/>Register<sp/>Fat<sp/>Binary<sp/>End</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426" refid="cudart__symbols_8cpp_1a5016ff9880d3be90adec7d3e55c44f74" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cudart__symbols_8cpp_1a5016ff9880d3be90adec7d3e55c44f74" kindref="member">__cudaRegisterFatBinaryEnd</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**fatCubinHandle)</highlight></codeline>
<codeline lineno="427"><highlight class="normal">{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcudartSymbols_1a1985af1646384a14fea66aaaf35377dd" kindref="member">cudartSymbols::__cudaRegisterFatBinaryEnd</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>lib_name<sp/>=<sp/><ref refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" kindref="member">cudartSymbols::get_lib_name</ref>();</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>symbol_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;__cudaRegisterFatBinaryEnd&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcudartSymbols_1a1985af1646384a14fea66aaaf35377dd" kindref="member">cudartSymbols::__cudaRegisterFatBinaryEnd</ref><sp/>=<sp/>\</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamic_loading::load_symbol&lt;__cudaRegisterFatBinaryEnd_type&gt;(</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lib_name.c_str(),</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbol_name);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcudartSymbols_1a1985af1646384a14fea66aaaf35377dd" kindref="member">cudartSymbols::__cudaRegisterFatBinaryEnd</ref>(fatCubinHandle);</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cuda<sp/>Unregister<sp/>Fat<sp/>Binary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450" refid="cudart__symbols_8cpp_1aca3de54c4d2838044768ba05ff76cbf1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cudart__symbols_8cpp_1aca3de54c4d2838044768ba05ff76cbf1" kindref="member">__cudaUnregisterFatBinary</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**fatCubinHandle)</highlight></codeline>
<codeline lineno="451"><highlight class="normal">{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcudartSymbols_1a1ab071e3a3d72de31406b954dbddde28" kindref="member">cudartSymbols::__cudaUnregisterFatBinary</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>lib_name<sp/>=<sp/><ref refid="classcudartSymbols_1a9ecf36abdbb090bbc573672be6e538eb" kindref="member">cudartSymbols::get_lib_name</ref>();</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>symbol_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;__cudaUnregisterFatBinary&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcudartSymbols_1a1ab071e3a3d72de31406b954dbddde28" kindref="member">cudartSymbols::__cudaUnregisterFatBinary</ref><sp/>=<sp/>\</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynamic_loading::load_symbol&lt;__cudaUnregisterFatBinary_type&gt;(</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lib_name.c_str(),</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbol_name);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcudartSymbols_1a1ab071e3a3d72de31406b954dbddde28" kindref="member">cudartSymbols::__cudaUnregisterFatBinary</ref>(fatCubinHandle);</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_dynamic_loading/cudart_symbols.cpp"/>
  </compounddef>
</doxygen>
