<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classFunction" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>Function</compoundname>
    <derivedcompoundref refid="classExponential" prot="public" virt="non-virtual">Exponential</derivedcompoundref>
    <derivedcompoundref refid="classGaussian" prot="public" virt="non-virtual">Gaussian</derivedcompoundref>
    <derivedcompoundref refid="classIdentity" prot="public" virt="non-virtual">Identity</derivedcompoundref>
    <derivedcompoundref refid="classInverse" prot="public" virt="non-virtual">Inverse</derivedcompoundref>
    <derivedcompoundref refid="classLogarithm" prot="public" virt="non-virtual">Logarithm</derivedcompoundref>
    <derivedcompoundref refid="classPower" prot="public" virt="non-virtual">Power</derivedcompoundref>
    <derivedcompoundref refid="classSmoothStep" prot="public" virt="non-virtual">SmoothStep</derivedcompoundref>
    <includes refid="functions_8h" local="no">functions.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classFunction_1a3b03f7cf0b75d16edebdda1dee1db6fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>Function::~Function</definition>
        <argsstring>()</argsstring>
        <name>~Function</name>
        <briefdescription>
<para>Default virtual destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/functions/functions.h" line="40" column="17" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/functions/functions.cpp" bodystart="34" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classFunction_1a603a10dedebd89b477a23a5f8f705935" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>float</type>
        <definition>virtual float Function::function</definition>
        <argsstring>(const float lambda_) const =0</argsstring>
        <name>function</name>
        <reimplementedby refid="classIdentity_1a3d50a8681f6ee06103f27755bb098fdc">function</reimplementedby>
        <reimplementedby refid="classInverse_1ae76b2dfc34a33becb930b61f0be2788e">function</reimplementedby>
        <reimplementedby refid="classLogarithm_1aac7c57d6fa2c60e1d8235894405b5caf">function</reimplementedby>
        <reimplementedby refid="classExponential_1ab3f2d3de0ef66c88746ead4801cf3250">function</reimplementedby>
        <reimplementedby refid="classPower_1ae7607f79541b3d8c239ded5b823cfb55">function</reimplementedby>
        <reimplementedby refid="classGaussian_1a5ec3ee1581fa298163b49dfc80795150">function</reimplementedby>
        <reimplementedby refid="classSmoothStep_1af4ff0fd64f152b6b7b7d233be2efb1cf">function</reimplementedby>
        <param>
          <type>const float</type>
          <declname>lambda_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/functions/functions.h" line="41" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classFunction_1abb983ee238adf9b49ed7f1a7442e3019" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double Function::function</definition>
        <argsstring>(const double lambda_) const =0</argsstring>
        <name>function</name>
        <reimplementedby refid="classIdentity_1a8adf764d26a5cb8e858d76cc2f331a71">function</reimplementedby>
        <reimplementedby refid="classInverse_1a028e322d734b7ede2baf2bce490271a7">function</reimplementedby>
        <reimplementedby refid="classLogarithm_1a57bd4094533400976784a94b2516341f">function</reimplementedby>
        <reimplementedby refid="classExponential_1aaedbd96805d9afb80ff0046a56c2f20b">function</reimplementedby>
        <reimplementedby refid="classPower_1ad89b37a8ec090fa2265207d234688f62">function</reimplementedby>
        <reimplementedby refid="classGaussian_1a0b3dc75613303f5530e1521f012612e4">function</reimplementedby>
        <reimplementedby refid="classSmoothStep_1a1ec4fe15e82fb5b8d12ebab674b55844">function</reimplementedby>
        <param>
          <type>const double</type>
          <declname>lambda_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/functions/functions.h" line="42" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classFunction_1a1e83c965a17529850d96015fb2d91968" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>long double</type>
        <definition>virtual long double Function::function</definition>
        <argsstring>(const long double lambda_) const =0</argsstring>
        <name>function</name>
        <reimplementedby refid="classIdentity_1a75fb1deefe32816d79aa05c15ded292b">function</reimplementedby>
        <reimplementedby refid="classInverse_1ab6135270a313da4b0d30a2fcb7255e5e">function</reimplementedby>
        <reimplementedby refid="classLogarithm_1adad5c679c0bf152b0bda05fdd4ee357c">function</reimplementedby>
        <reimplementedby refid="classExponential_1ab016309f22ba6adce5b19c078162c686">function</reimplementedby>
        <reimplementedby refid="classPower_1a05eff78d58cfd11a41766688b9277edc">function</reimplementedby>
        <reimplementedby refid="classGaussian_1ac8d10edec313d5f0807e7f8d0cdf2c70">function</reimplementedby>
        <reimplementedby refid="classSmoothStep_1ac7b9bc61a6d47a63b0b9a279010fd14a">function</reimplementedby>
        <param>
          <type>const long double</type>
          <declname>lambda_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/functions/functions.h" line="43" column="29"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Defines the function <formula id="38">$ f: \lambda \mapsto \lambda $</formula>. </para>
    </briefdescription>
    <detaileddescription>
<para>The matrix function <formula id="39">$ f: \mathbb{R}^{n \times n} \to \mathbb{R}^{n \times n} $</formula> is used in</para>
<para><formula id="40">\[ \mathrm{trace} \left( f(\mathbf{A}) \right). \]</formula></para>
<para>However, instead of a matrix function, the equivalent scalar function <formula id="41">$ f: \mathbb{R} \to \mathbb{R} $</formula> is defiend which acts on the eigenvalues of the matrix.</para>
<para><simplesect kind="note"><para>This class is a base class for other classes and serves as an interface. To create a new matrix function, derive a class from <computeroutput><ref refid="classFunction" kindref="compound">Function</ref></computeroutput> class and implement the <computeroutput>function</computeroutput> method. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Function</label>
        <link refid="classFunction"/>
      </node>
      <node id="3">
        <label>Gaussian</label>
        <link refid="classGaussian"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>Logarithm</label>
        <link refid="classLogarithm"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>Power</label>
        <link refid="classPower"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>Inverse</label>
        <link refid="classInverse"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Exponential</label>
        <link refid="classExponential"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>Identity</label>
        <link refid="classIdentity"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>SmoothStep</label>
        <link refid="classSmoothStep"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/functions/functions.h" line="37" column="1" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/functions/functions.h" bodystart="38" bodyend="44"/>
    <listofallmembers>
      <member refid="classFunction_1a603a10dedebd89b477a23a5f8f705935" prot="public" virt="pure-virtual"><scope>Function</scope><name>function</name></member>
      <member refid="classFunction_1abb983ee238adf9b49ed7f1a7442e3019" prot="public" virt="pure-virtual"><scope>Function</scope><name>function</name></member>
      <member refid="classFunction_1a1e83c965a17529850d96015fb2d91968" prot="public" virt="pure-virtual"><scope>Function</scope><name>function</name></member>
      <member refid="classFunction_1a3b03f7cf0b75d16edebdda1dee1db6fd" prot="public" virt="virtual"><scope>Function</scope><name>~Function</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
