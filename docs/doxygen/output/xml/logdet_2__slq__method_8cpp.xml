<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="logdet_2__slq__method_8cpp" kind="file" language="C++">
    <compoundname>_slq_method.cpp</compoundname>
    <includes local="yes">Python.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/sia/work/github/imate/imate/logdet/_slq_method.cpp</label>
        <link refid="logdet_2__slq__method_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Python.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="logdet_2__slq__method_8cpp_1ac9efdaac9411d0868b715edccca3269d" prot="public" static="no">
        <name>PY_SSIZE_T_CLEAN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/github/imate/imate/logdet/_slq_method.cpp" line="176" column="9" bodyfile="/home/sia/work/github/imate/imate/logdet/_slq_method.cpp" bodystart="176" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Generated<sp/>by<sp/>Cython<sp/>0.29.36<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>BEGIN:<sp/>Cython<sp/>Metadata</highlight></codeline>
<codeline lineno="4"><highlight class="comment">{</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>&quot;distutils&quot;:<sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;define_macros&quot;:<sp/>[</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_NO_DEPRECATED_API&quot;,</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_1_7_API_VERSION&quot;</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;CYTHON_EXTERN_C&quot;,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;extern<sp/>\&quot;C\&quot;&quot;</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_NO_DEPRECATED_API&quot;,</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_1_7_API_VERSION&quot;</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;CYTHON_EXTERN_C&quot;,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;extern<sp/>\&quot;C\&quot;&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_NO_DEPRECATED_API&quot;,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_1_7_API_VERSION&quot;</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;CYTHON_EXTERN_C&quot;,</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;extern<sp/>\&quot;C\&quot;&quot;</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_NO_DEPRECATED_API&quot;,</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_1_7_API_VERSION&quot;</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;CYTHON_EXTERN_C&quot;,</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;extern<sp/>\&quot;C\&quot;&quot;</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_NO_DEPRECATED_API&quot;,</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_1_7_API_VERSION&quot;</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;CYTHON_EXTERN_C&quot;,</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;extern<sp/>\&quot;C\&quot;&quot;</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_NO_DEPRECATED_API&quot;,</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_1_7_API_VERSION&quot;</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;CYTHON_EXTERN_C&quot;,</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;extern<sp/>\&quot;C\&quot;&quot;</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_NO_DEPRECATED_API&quot;,</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_1_7_API_VERSION&quot;</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;CYTHON_EXTERN_C&quot;,</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;extern<sp/>\&quot;C\&quot;&quot;</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_NO_DEPRECATED_API&quot;,</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_1_7_API_VERSION&quot;</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;CYTHON_EXTERN_C&quot;,</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;extern<sp/>\&quot;C\&quot;&quot;</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_NO_DEPRECATED_API&quot;,</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_1_7_API_VERSION&quot;</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;CYTHON_EXTERN_C&quot;,</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;extern<sp/>\&quot;C\&quot;&quot;</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_NO_DEPRECATED_API&quot;,</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_1_7_API_VERSION&quot;</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;CYTHON_EXTERN_C&quot;,</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;extern<sp/>\&quot;C\&quot;&quot;</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_NO_DEPRECATED_API&quot;,</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_1_7_API_VERSION&quot;</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;CYTHON_EXTERN_C&quot;,</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;extern<sp/>\&quot;C\&quot;&quot;</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_NO_DEPRECATED_API&quot;,</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_1_7_API_VERSION&quot;</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;CYTHON_EXTERN_C&quot;,</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;extern<sp/>\&quot;C\&quot;&quot;</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_NO_DEPRECATED_API&quot;,</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_1_7_API_VERSION&quot;</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;CYTHON_EXTERN_C&quot;,</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;extern<sp/>\&quot;C\&quot;&quot;</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_NO_DEPRECATED_API&quot;,</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_1_7_API_VERSION&quot;</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;CYTHON_EXTERN_C&quot;,</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;extern<sp/>\&quot;C\&quot;&quot;</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_NO_DEPRECATED_API&quot;,</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;NPY_1_7_API_VERSION&quot;</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;CYTHON_EXTERN_C&quot;,</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;extern<sp/>\&quot;C\&quot;&quot;</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;depends&quot;:<sp/>[</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;imate/functions/exponential.h&quot;,</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;imate/functions/functions.h&quot;,</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;imate/functions/gaussian.h&quot;,</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;imate/functions/homographic.h&quot;,</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;imate/functions/identity.h&quot;,</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;imate/functions/indicator.h&quot;,</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;imate/functions/inverse.h&quot;,</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;imate/functions/logarithm.h&quot;,</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;imate/functions/smoothstep.h&quot;</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;include_dirs&quot;:<sp/>[</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;./imate/functions&quot;,</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;./imate/logdet&quot;,</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;i&quot;,</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;m&quot;,</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;a&quot;,</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;t&quot;,</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;e&quot;,</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;/&quot;,</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;f&quot;,</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;u&quot;,</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;n&quot;,</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;c&quot;,</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;o&quot;,</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;s&quot;</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;language&quot;:<sp/>&quot;c++&quot;,</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;imate.logdet._slq_method&quot;,</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;sources&quot;:<sp/>[</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;./imate/logdet/_slq_method.pyx&quot;,</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;imate/functions/inverse.cpp&quot;,</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;imate/functions/functions.cpp&quot;,</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;imate/functions/indicator.cpp&quot;,</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;imate/functions/homographic.cpp&quot;,</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;imate/functions/logarithm.cpp&quot;,</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;imate/functions/gaussian.cpp&quot;,</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;imate/functions/power.cpp&quot;,</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;imate/functions/identity.cpp&quot;,</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;imate/functions/exponential.cpp&quot;,</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;imate/functions/smoothstep.cpp&quot;</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/><sp/>&quot;module_name&quot;:<sp/>&quot;imate.logdet._slq_method&quot;</highlight></codeline>
<codeline lineno="172"><highlight class="comment">}</highlight></codeline>
<codeline lineno="173"><highlight class="comment">END:<sp/>Cython<sp/>Metadata<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PY_SSIZE_T_CLEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="logdet_2__slq__method_8cpp_1ac9efdaac9411d0868b715edccca3269d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PY_SSIZE_T_CLEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>PY_SSIZE_T_CLEAN<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Python.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_PYTHON_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#error<sp/>Python<sp/>headers<sp/>needed<sp/>to<sp/>compile<sp/>C<sp/>extensions,<sp/>please<sp/>install<sp/>development<sp/>version<sp/>of<sp/>Python.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x02060000<sp/>||<sp/>(0x03000000<sp/>&lt;=<sp/>PY_VERSION_HEX<sp/>&amp;&amp;<sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x03030000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#error<sp/>Cython<sp/>requires<sp/>Python<sp/>2.6+<sp/>or<sp/>Python<sp/>3.3+.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CYTHON_ABI<sp/>&quot;0_29_36&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CYTHON_HEX_VERSION<sp/>0x001D24F0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CYTHON_FUTURE_DIVISION<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>offsetof</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>offsetof(type,<sp/>member)<sp/>(<sp/>(size_t)<sp/>&amp;<sp/>((type*)0)<sp/>-&gt;<sp/>member<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(WIN32)<sp/>&amp;&amp;<sp/>!defined(MS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>__stdcall</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__stdcall</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>__cdecl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__cdecl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>__fastcall</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__fastcall</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DL_IMPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>DL_IMPORT(t)<sp/>t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DL_EXPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>DL_EXPORT(t)<sp/>t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PYX_COMMA<sp/>,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HAVE_LONG_LONG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x02070000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>HAVE_LONG_LONG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PY_LONG_LONG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PY_LONG_LONG<sp/>LONG_LONG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_HUGE_VAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>Py_HUGE_VAL<sp/>HUGE_VAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PYPY_VERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_COMPILING_IN_PYPY<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_COMPILING_IN_PYSTON<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_COMPILING_IN_CPYTHON<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_COMPILING_IN_NOGIL<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_USE_TYPE_SLOTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_USE_TYPE_SLOTS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_USE_PYTYPE_LOOKUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_USE_PYTYPE_LOOKUP<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x03050000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>CYTHON_USE_ASYNC_SLOTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_USE_ASYNC_SLOTS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#elif<sp/>!defined(CYTHON_USE_ASYNC_SLOTS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_USE_ASYNC_SLOTS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_USE_PYLIST_INTERNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_USE_PYLIST_INTERNALS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_USE_UNICODE_INTERNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_USE_UNICODE_INTERNALS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_USE_UNICODE_WRITER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_USE_UNICODE_WRITER<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_USE_PYLONG_INTERNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_USE_PYLONG_INTERNALS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_AVOID_BORROWED_REFS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_AVOID_BORROWED_REFS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_ASSUME_SAFE_MACROS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_ASSUME_SAFE_MACROS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_UNPACK_METHODS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_UNPACK_METHODS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_FAST_THREAD_STATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_FAST_THREAD_STATE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_FAST_PYCALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_FAST_PYCALL<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x03090000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>CYTHON_PEP489_MULTI_PHASE_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_PEP489_MULTI_PHASE_INIT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#elif<sp/>!defined(CYTHON_PEP489_MULTI_PHASE_INIT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_PEP489_MULTI_PHASE_INIT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_USE_TP_FINALIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_USE_TP_FINALIZE<sp/>(PY_VERSION_HEX<sp/>&gt;=<sp/>0x030400a1<sp/>&amp;&amp;<sp/>PYPY_VERSION_NUM<sp/>&gt;=<sp/>0x07030C00)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_USE_DICT_VERSIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_USE_DICT_VERSIONS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_USE_EXC_INFO_STACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_USE_EXC_INFO_STACK<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_UPDATE_DESCRIPTOR_DOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_UPDATE_DESCRIPTOR_DOC<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PYSTON_VERSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_COMPILING_IN_PYPY<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_COMPILING_IN_PYSTON<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_COMPILING_IN_CPYTHON<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_COMPILING_IN_NOGIL<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_USE_TYPE_SLOTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_USE_TYPE_SLOTS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_USE_PYTYPE_LOOKUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_USE_PYTYPE_LOOKUP<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_USE_ASYNC_SLOTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_USE_ASYNC_SLOTS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_USE_PYLIST_INTERNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_USE_PYLIST_INTERNALS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_USE_UNICODE_INTERNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_USE_UNICODE_INTERNALS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_USE_UNICODE_WRITER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_USE_UNICODE_WRITER<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_USE_PYLONG_INTERNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_USE_PYLONG_INTERNALS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_AVOID_BORROWED_REFS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_AVOID_BORROWED_REFS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_ASSUME_SAFE_MACROS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_ASSUME_SAFE_MACROS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_UNPACK_METHODS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_UNPACK_METHODS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_FAST_THREAD_STATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_FAST_THREAD_STATE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_FAST_PYCALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_FAST_PYCALL<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_PEP489_MULTI_PHASE_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_PEP489_MULTI_PHASE_INIT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_USE_TP_FINALIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_USE_TP_FINALIZE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_USE_DICT_VERSIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_USE_DICT_VERSIONS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_USE_EXC_INFO_STACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_USE_EXC_INFO_STACK<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_UPDATE_DESCRIPTOR_DOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_UPDATE_DESCRIPTOR_DOC<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(PY_NOGIL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_COMPILING_IN_PYPY<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_COMPILING_IN_PYSTON<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_COMPILING_IN_CPYTHON<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_COMPILING_IN_NOGIL<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_USE_TYPE_SLOTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_USE_TYPE_SLOTS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_USE_PYTYPE_LOOKUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_USE_PYTYPE_LOOKUP<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_USE_ASYNC_SLOTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_USE_ASYNC_SLOTS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_USE_PYLIST_INTERNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_USE_PYLIST_INTERNALS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_USE_UNICODE_INTERNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_USE_UNICODE_INTERNALS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_USE_UNICODE_WRITER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_USE_UNICODE_WRITER<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_USE_PYLONG_INTERNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_USE_PYLONG_INTERNALS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_AVOID_BORROWED_REFS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_AVOID_BORROWED_REFS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_ASSUME_SAFE_MACROS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_ASSUME_SAFE_MACROS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_UNPACK_METHODS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_UNPACK_METHODS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_FAST_THREAD_STATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_FAST_THREAD_STATE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_FAST_PYCALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_FAST_PYCALL<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_PEP489_MULTI_PHASE_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_PEP489_MULTI_PHASE_INIT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_USE_TP_FINALIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_USE_TP_FINALIZE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_USE_DICT_VERSIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_USE_DICT_VERSIONS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_USE_EXC_INFO_STACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_USE_EXC_INFO_STACK<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_COMPILING_IN_PYPY<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_COMPILING_IN_PYSTON<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_COMPILING_IN_CPYTHON<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_COMPILING_IN_NOGIL<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_USE_TYPE_SLOTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_USE_TYPE_SLOTS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x02070000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>CYTHON_USE_PYTYPE_LOOKUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_USE_PYTYPE_LOOKUP<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#elif<sp/>!defined(CYTHON_USE_PYTYPE_LOOKUP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_USE_PYTYPE_LOOKUP<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>CYTHON_USE_ASYNC_SLOTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_USE_ASYNC_SLOTS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#elif<sp/>!defined(CYTHON_USE_ASYNC_SLOTS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_USE_ASYNC_SLOTS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x02070000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>CYTHON_USE_PYLONG_INTERNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_USE_PYLONG_INTERNALS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#elif<sp/>!defined(CYTHON_USE_PYLONG_INTERNALS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_USE_PYLONG_INTERNALS<sp/>(PY_VERSION_HEX<sp/>&lt;<sp/>0x030C00A5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_USE_PYLIST_INTERNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_USE_PYLIST_INTERNALS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_USE_UNICODE_INTERNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_USE_UNICODE_INTERNALS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x030300F0<sp/>||<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x030B00A2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>CYTHON_USE_UNICODE_WRITER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_USE_UNICODE_WRITER<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#elif<sp/>!defined(CYTHON_USE_UNICODE_WRITER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_USE_UNICODE_WRITER<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_AVOID_BORROWED_REFS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_AVOID_BORROWED_REFS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_ASSUME_SAFE_MACROS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_ASSUME_SAFE_MACROS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_UNPACK_METHODS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_UNPACK_METHODS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x030B00A4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>CYTHON_FAST_THREAD_STATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_FAST_THREAD_STATE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#elif<sp/>!defined(CYTHON_FAST_THREAD_STATE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_FAST_THREAD_STATE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_FAST_PYCALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_FAST_PYCALL<sp/>(PY_VERSION_HEX<sp/>&lt;<sp/>0x030A0000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_PEP489_MULTI_PHASE_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_PEP489_MULTI_PHASE_INIT<sp/>(PY_VERSION_HEX<sp/>&gt;=<sp/>0x03050000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_USE_TP_FINALIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_USE_TP_FINALIZE<sp/>(PY_VERSION_HEX<sp/>&gt;=<sp/>0x030400a1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_USE_DICT_VERSIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_USE_DICT_VERSIONS<sp/>((PY_VERSION_HEX<sp/>&gt;=<sp/>0x030600B1)<sp/>&amp;&amp;<sp/>(PY_VERSION_HEX<sp/>&lt;<sp/>0x030C00A5))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x030B00A4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>CYTHON_USE_EXC_INFO_STACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_USE_EXC_INFO_STACK<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#elif<sp/>!defined(CYTHON_USE_EXC_INFO_STACK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_USE_EXC_INFO_STACK<sp/>(PY_VERSION_HEX<sp/>&gt;=<sp/>0x030700A3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_UPDATE_DESCRIPTOR_DOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_UPDATE_DESCRIPTOR_DOC<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CYTHON_FAST_PYCCALL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CYTHON_FAST_PYCCALL<sp/><sp/>(CYTHON_FAST_PYCALL<sp/>&amp;&amp;<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x030600B1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_USE_PYLONG_INTERNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&quot;longintrepr.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>SHIFT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>BASE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>MASK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>SIZEOF_VOID_P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>__pyx_check_sizeof_voidp<sp/>=<sp/>1<sp/>/<sp/>(int)(SIZEOF_VOID_P<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*))<sp/>};</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__has_attribute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__has_attribute(x)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__has_cpp_attribute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__has_cpp_attribute(x)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CYTHON_RESTRICT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_RESTRICT<sp/>__restrict__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#elif<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>_MSC_VER<sp/>&gt;=<sp/>1400</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_RESTRICT<sp/>__restrict</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#elif<sp/>defined<sp/>(__STDC_VERSION__)<sp/>&amp;&amp;<sp/>__STDC_VERSION__<sp/>&gt;=<sp/>199901L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_RESTRICT<sp/>restrict</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_RESTRICT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CYTHON_UNUSED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>if<sp/>!(defined(__cplusplus))<sp/>||<sp/>(__GNUC__<sp/>&gt;<sp/>3<sp/>||<sp/>(__GNUC__<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>__GNUC_MINOR__<sp/>&gt;=<sp/>4))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>CYTHON_UNUSED<sp/>__attribute__<sp/>((__unused__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/>define<sp/>CYTHON_UNUSED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>elif<sp/>defined(__ICC)<sp/>||<sp/>(defined(__INTEL_COMPILER)<sp/>&amp;&amp;<sp/>!defined(_MSC_VER))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>CYTHON_UNUSED<sp/>__attribute__<sp/>((__unused__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>CYTHON_UNUSED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CYTHON_MAYBE_UNUSED_VAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(__cplusplus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CYTHON_MAYBE_UNUSED_VAR(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CYTHON_MAYBE_UNUSED_VAR(x)<sp/>(void)(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CYTHON_NCP_UNUSED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>CYTHON_COMPILING_IN_CPYTHON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CYTHON_NCP_UNUSED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CYTHON_NCP_UNUSED<sp/>CYTHON_UNUSED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_void_to_None(void_result)<sp/>((void)(void_result),<sp/>Py_INCREF(Py_None),<sp/>Py_None)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifndef<sp/>_MSC_STDINT_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>_MSC_VER<sp/>&lt;<sp/>1300</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint8_t;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int8<sp/><sp/><sp/>uint8_t;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int32<sp/><sp/>uint32_t;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CYTHON_FALLTHROUGH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>defined(__cplusplus)<sp/>&amp;&amp;<sp/>__cplusplus<sp/>&gt;=<sp/>201103L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>__has_cpp_attribute(fallthrough)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_FALLTHROUGH<sp/>[[fallthrough]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif<sp/>__has_cpp_attribute(clang::fallthrough)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_FALLTHROUGH<sp/>[[clang::fallthrough]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif<sp/>__has_cpp_attribute(gnu::fallthrough)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_FALLTHROUGH<sp/>[[gnu::fallthrough]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>CYTHON_FALLTHROUGH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>__has_attribute(fallthrough)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_FALLTHROUGH<sp/>__attribute__((fallthrough))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_FALLTHROUGH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>defined(__clang__<sp/>)<sp/>&amp;&amp;<sp/>defined(__apple_build_version__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>__apple_build_version__<sp/>&lt;<sp/>7000000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#undef<sp/><sp/>CYTHON_FALLTHROUGH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_FALLTHROUGH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#error<sp/>&quot;Cython<sp/>files<sp/>generated<sp/>with<sp/>the<sp/>C++<sp/>option<sp/>must<sp/>be<sp/>compiled<sp/>with<sp/>a<sp/>C++<sp/>compiler.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CYTHON_INLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_INLINE<sp/>__inline__<sp/>__attribute__<sp/>((__unused__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_INLINE<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_call_destructor(T&amp;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>x.~T();</highlight></codeline>
<codeline lineno="543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">__Pyx_FakeReference<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_FakeReference()<sp/>:<sp/>ptr(NULL)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_FakeReference(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>ref)<sp/>:<sp/>ptr(const_cast&lt;T*&gt;(&amp;ref))<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>*operator-&gt;()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;<sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>*operator&amp;()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;<sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>T&amp;()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*ptr;<sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>==(U<sp/>other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*ptr<sp/>==<sp/>other;<sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>!=(U<sp/>other)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*ptr<sp/>!=<sp/>other;<sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>*ptr;</highlight></codeline>
<codeline lineno="556"><highlight class="normal">};</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PYX_BUILD_PY_SSIZE_T<sp/>&quot;n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CYTHON_FORMAT_SSIZE_T<sp/>&quot;z&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_BUILTIN_MODULE_NAME<sp/>&quot;__builtin__&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyCode_New(a,<sp/>k,<sp/>l,<sp/>s,<sp/>f,<sp/>code,<sp/>c,<sp/>n,<sp/>v,<sp/>fv,<sp/>cell,<sp/>fn,<sp/>name,<sp/>fline,<sp/>lnos)\</highlight></codeline>
<codeline lineno="563"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyCode_New(a+k,<sp/>l,<sp/>s,<sp/>f,<sp/>code,<sp/>c,<sp/>n,<sp/>v,<sp/>fv,<sp/>cell,<sp/>fn,<sp/>name,<sp/>fline,<sp/>lnos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_DefaultClassType<sp/>PyClass_Type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_BUILTIN_MODULE_NAME<sp/>&quot;builtins&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_DefaultClassType<sp/>PyType_Type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x030B00A1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyCodeObject*<sp/>__Pyx_PyCode_New(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f,</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*code,<sp/>PyObject<sp/>*c,<sp/>PyObject*<sp/>n,<sp/>PyObject<sp/>*v,</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*fv,<sp/>PyObject<sp/>*cell,<sp/>PyObject*<sp/>fn,</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fline,<sp/>PyObject<sp/>*lnos)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*kwds=NULL,<sp/>*argcount=NULL,<sp/>*posonlyargcount=NULL,<sp/>*kwonlyargcount=NULL;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*nlocals=NULL,<sp/>*stacksize=NULL,<sp/>*flags=NULL,<sp/>*replace=NULL,<sp/>*call_result=NULL,<sp/>*empty=NULL;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fn_cstr=NULL;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name_cstr=NULL;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyCodeObject*<sp/>co=NULL;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*type,<sp/>*value,<sp/>*traceback;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Fetch(&amp;type,<sp/>&amp;value,<sp/>&amp;traceback);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(kwds=PyDict_New()))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(argcount=PyLong_FromLong(a)))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyDict_SetItemString(kwds,<sp/></highlight><highlight class="stringliteral">&quot;co_argcount&quot;</highlight><highlight class="normal">,<sp/>argcount)<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(posonlyargcount=PyLong_FromLong(0)))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyDict_SetItemString(kwds,<sp/></highlight><highlight class="stringliteral">&quot;co_posonlyargcount&quot;</highlight><highlight class="normal">,<sp/>posonlyargcount)<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(kwonlyargcount=PyLong_FromLong(k)))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyDict_SetItemString(kwds,<sp/></highlight><highlight class="stringliteral">&quot;co_kwonlyargcount&quot;</highlight><highlight class="normal">,<sp/>kwonlyargcount)<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(nlocals=PyLong_FromLong(l)))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyDict_SetItemString(kwds,<sp/></highlight><highlight class="stringliteral">&quot;co_nlocals&quot;</highlight><highlight class="normal">,<sp/>nlocals)<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(stacksize=PyLong_FromLong(s)))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyDict_SetItemString(kwds,<sp/></highlight><highlight class="stringliteral">&quot;co_stacksize&quot;</highlight><highlight class="normal">,<sp/>stacksize)<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(flags=PyLong_FromLong(f)))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyDict_SetItemString(kwds,<sp/></highlight><highlight class="stringliteral">&quot;co_flags&quot;</highlight><highlight class="normal">,<sp/>flags)<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyDict_SetItemString(kwds,<sp/></highlight><highlight class="stringliteral">&quot;co_code&quot;</highlight><highlight class="normal">,<sp/>code)<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyDict_SetItemString(kwds,<sp/></highlight><highlight class="stringliteral">&quot;co_consts&quot;</highlight><highlight class="normal">,<sp/>c)<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyDict_SetItemString(kwds,<sp/></highlight><highlight class="stringliteral">&quot;co_names&quot;</highlight><highlight class="normal">,<sp/>n)<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyDict_SetItemString(kwds,<sp/></highlight><highlight class="stringliteral">&quot;co_varnames&quot;</highlight><highlight class="normal">,<sp/>v)<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyDict_SetItemString(kwds,<sp/></highlight><highlight class="stringliteral">&quot;co_freevars&quot;</highlight><highlight class="normal">,<sp/>fv)<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyDict_SetItemString(kwds,<sp/></highlight><highlight class="stringliteral">&quot;co_cellvars&quot;</highlight><highlight class="normal">,<sp/>cell)<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyDict_SetItemString(kwds,<sp/></highlight><highlight class="stringliteral">&quot;co_linetable&quot;</highlight><highlight class="normal">,<sp/>lnos)<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(fn_cstr=PyUnicode_AsUTF8AndSize(fn,<sp/>NULL)))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(name_cstr=PyUnicode_AsUTF8AndSize(name,<sp/>NULL)))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(co<sp/>=<sp/>PyCode_NewEmpty(fn_cstr,<sp/>name_cstr,<sp/>fline)))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(replace<sp/>=<sp/>PyObject_GetAttrString((PyObject*)co,<sp/></highlight><highlight class="stringliteral">&quot;replace&quot;</highlight><highlight class="normal">)))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>cleanup_code_too;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(empty<sp/>=<sp/>PyTuple_New(0)))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>cleanup_code_too;<sp/></highlight><highlight class="comment">//<sp/>unfortunately<sp/>__pyx_empty_tuple<sp/>isn&apos;t<sp/>available<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(call_result<sp/>=<sp/>PyObject_Call(replace,<sp/>empty,<sp/>kwds)))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>cleanup_code_too;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF((PyObject*)co);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co<sp/>=<sp/>(PyCodeObject*)call_result;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call_result<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cleanup_code_too:</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF((PyObject*)co);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end:</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(kwds);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(argcount);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(posonlyargcount);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(kwonlyargcount);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(nlocals);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(stacksize);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(replace);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(call_result);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(empty);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Restore(type,<sp/>value,<sp/>traceback);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>co;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyCode_New(a,<sp/>k,<sp/>l,<sp/>s,<sp/>f,<sp/>code,<sp/>c,<sp/>n,<sp/>v,<sp/>fv,<sp/>cell,<sp/>fn,<sp/>name,<sp/>fline,<sp/>lnos)\</highlight></codeline>
<codeline lineno="631"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyCode_New(a,<sp/>k,<sp/>l,<sp/>s,<sp/>f,<sp/>code,<sp/>c,<sp/>n,<sp/>v,<sp/>fv,<sp/>cell,<sp/>fn,<sp/>name,<sp/>fline,<sp/>lnos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_DefaultClassType<sp/>PyType_Type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x030900F0<sp/>&amp;&amp;<sp/>!CYTHON_COMPILING_IN_PYPY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyObject_GC_IsFinalized(o)<sp/>PyObject_GC_IsFinalized(o)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyObject_GC_IsFinalized(o)<sp/>_PyGC_FINALIZED(o)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_TPFLAGS_CHECKTYPES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>Py_TPFLAGS_CHECKTYPES<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_TPFLAGS_HAVE_INDEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>Py_TPFLAGS_HAVE_INDEX<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_TPFLAGS_HAVE_NEWBUFFER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>Py_TPFLAGS_HAVE_NEWBUFFER<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_TPFLAGS_HAVE_FINALIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>Py_TPFLAGS_HAVE_FINALIZE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>METH_STACKLESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>METH_STACKLESS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_VERSION_HEX<sp/>&lt;=<sp/>0x030700A3<sp/>||<sp/>!defined(METH_FASTCALL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>METH_FASTCALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>#define<sp/>METH_FASTCALL<sp/>0x80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PyObject<sp/>*(*__Pyx_PyCFunctionFast)<sp/>(PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*args,<sp/>Py_ssize_t<sp/>nargs);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PyObject<sp/>*(*__Pyx_PyCFunctionFastWithKeywords)<sp/>(PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*args,</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>nargs,<sp/>PyObject<sp/>*kwnames);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyCFunctionFast<sp/>_PyCFunctionFast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyCFunctionFastWithKeywords<sp/>_PyCFunctionFastWithKeywords</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_FAST_PYCCALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyFastCFunction_Check(func)\</highlight></codeline>
<codeline lineno="668"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((PyCFunction_Check(func)<sp/>&amp;&amp;<sp/>(METH_FASTCALL<sp/>==<sp/>(PyCFunction_GET_FLAGS(func)<sp/>&amp;<sp/>~(METH_CLASS<sp/>|<sp/>METH_STATIC<sp/>|<sp/>METH_COEXIST<sp/>|<sp/>METH_KEYWORDS<sp/>|<sp/>METH_STACKLESS)))))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyFastCFunction_Check(func)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_PYPY<sp/>&amp;&amp;<sp/>!defined(PyObject_Malloc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyObject_Malloc(s)<sp/><sp/><sp/>PyMem_Malloc(s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyObject_Free(p)<sp/><sp/><sp/><sp/><sp/>PyMem_Free(p)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyObject_Realloc(p)<sp/><sp/>PyMem_Realloc(p)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_CPYTHON<sp/>&amp;&amp;<sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x030400A1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyMem_RawMalloc(n)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyMem_Malloc(n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyMem_RawRealloc(p,<sp/>n)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyMem_Realloc(p,<sp/>n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyMem_RawFree(p)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyMem_Free(p)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_PYSTON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyCode_HasFreeVars(co)<sp/><sp/>PyCode_HasFreeVars(co)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyFrame_SetLineNumber(frame,<sp/>lineno)<sp/>PyFrame_SetLineNumber(frame,<sp/>lineno)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyCode_HasFreeVars(co)<sp/><sp/>(PyCode_GetNumFree(co)<sp/>&gt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyFrame_SetLineNumber(frame,<sp/>lineno)<sp/><sp/>(frame)-&gt;f_lineno<sp/>=<sp/>(lineno)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!CYTHON_FAST_THREAD_STATE<sp/>||<sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x02070000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyThreadState_Current<sp/>PyThreadState_GET()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x03060000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyThreadState_Current<sp/>_PyThreadState_UncheckedGet()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x03000000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyThreadState_Current<sp/>PyThreadState_GET()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyThreadState_Current<sp/>_PyThreadState_Current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x030700A2<sp/>&amp;&amp;<sp/>!defined(PyThread_tss_create)<sp/>&amp;&amp;<sp/>!defined(Py_tss_NEEDS_INIT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pythread.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_tss_NEEDS_INIT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Py_tss_t;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PyThread_tss_create(Py_tss_t<sp/>*key)<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>*key<sp/>=<sp/>PyThread_create_key();</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>Py_tss_t<sp/>*<sp/>PyThread_tss_alloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>Py_tss_t<sp/>*key<sp/>=<sp/>(Py_tss_t<sp/>*)PyObject_Malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Py_tss_t));</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>*key<sp/>=<sp/>Py_tss_NEEDS_INIT;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key;</highlight></codeline>
<codeline lineno="710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PyThread_tss_free(Py_tss_t<sp/>*key)<sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>PyObject_Free(key);</highlight></codeline>
<codeline lineno="713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PyThread_tss_is_created(Py_tss_t<sp/>*key)<sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*key<sp/>!=<sp/>Py_tss_NEEDS_INIT;</highlight></codeline>
<codeline lineno="716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PyThread_tss_delete(Py_tss_t<sp/>*key)<sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>PyThread_delete_key(*key);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>*key<sp/>=<sp/>Py_tss_NEEDS_INIT;</highlight></codeline>
<codeline lineno="720"><highlight class="normal">}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PyThread_tss_set(Py_tss_t<sp/>*key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*value)<sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyThread_set_key_value(*key,<sp/>value);</highlight></codeline>
<codeline lineno="723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>PyThread_tss_get(Py_tss_t<sp/>*key)<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyThread_get_key_value(*key);</highlight></codeline>
<codeline lineno="726"><highlight class="normal">}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_CPYTHON<sp/>||<sp/>defined(_PyDict_NewPresized)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyDict_NewPresized(n)<sp/><sp/>((n<sp/>&lt;=<sp/>8)<sp/>?<sp/>PyDict_New()<sp/>:<sp/>_PyDict_NewPresized(n))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyDict_NewPresized(n)<sp/><sp/>PyDict_New()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3<sp/>||<sp/>CYTHON_FUTURE_DIVISION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyNumber_Divide(x,y)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyNumber_TrueDivide(x,y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyNumber_InPlaceDivide(x,y)<sp/><sp/>PyNumber_InPlaceTrueDivide(x,y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyNumber_Divide(x,y)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyNumber_Divide(x,y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyNumber_InPlaceDivide(x,y)<sp/><sp/>PyNumber_InPlaceDivide(x,y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_CPYTHON<sp/>&amp;&amp;<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x030500A1<sp/>&amp;&amp;<sp/>CYTHON_USE_UNICODE_INTERNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyDict_GetItemStr(dict,<sp/>name)<sp/><sp/>_PyDict_GetItem_KnownHash(dict,<sp/>name,<sp/>((PyASCIIObject<sp/>*)<sp/>name)-&gt;hash)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyDict_GetItemStr(dict,<sp/>name)<sp/><sp/>PyDict_GetItem(dict,<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_VERSION_HEX<sp/>&gt;<sp/>0x03030000<sp/>&amp;&amp;<sp/>defined(PyUnicode_KIND)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_PEP393_ENABLED<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x030C0000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__Pyx_PyUnicode_READY(op)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__Pyx_PyUnicode_READY(op)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(likely(PyUnicode_IS_READY(op))<sp/>?\</highlight></codeline>
<codeline lineno="751"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/>:<sp/>_PyUnicode_Ready((PyObject<sp/>*)(op)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyUnicode_GET_LENGTH(u)<sp/><sp/><sp/>PyUnicode_GET_LENGTH(u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyUnicode_READ_CHAR(u,<sp/>i)<sp/>PyUnicode_READ_CHAR(u,<sp/>i)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyUnicode_MAX_CHAR_VALUE(u)<sp/><sp/><sp/>PyUnicode_MAX_CHAR_VALUE(u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyUnicode_KIND(u)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyUnicode_KIND(u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyUnicode_DATA(u)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyUnicode_DATA(u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyUnicode_READ(k,<sp/>d,<sp/>i)<sp/><sp/><sp/>PyUnicode_READ(k,<sp/>d,<sp/>i)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyUnicode_WRITE(k,<sp/>d,<sp/>i,<sp/>ch)<sp/><sp/>PyUnicode_WRITE(k,<sp/>d,<sp/>i,<sp/>ch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x030C0000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__Pyx_PyUnicode_IS_TRUE(u)<sp/><sp/><sp/><sp/><sp/><sp/>(0<sp/>!=<sp/>PyUnicode_GET_LENGTH(u))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>CYTHON_COMPILING_IN_CPYTHON<sp/>&amp;&amp;<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x03090000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__Pyx_PyUnicode_IS_TRUE(u)<sp/><sp/><sp/><sp/><sp/><sp/>(0<sp/>!=<sp/>(likely(PyUnicode_IS_READY(u))<sp/>?<sp/>PyUnicode_GET_LENGTH(u)<sp/>:<sp/>((PyCompactUnicodeObject<sp/>*)(u))-&gt;wstr_length))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__Pyx_PyUnicode_IS_TRUE(u)<sp/><sp/><sp/><sp/><sp/><sp/>(0<sp/>!=<sp/>(likely(PyUnicode_IS_READY(u))<sp/>?<sp/>PyUnicode_GET_LENGTH(u)<sp/>:<sp/>PyUnicode_GET_SIZE(u)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_PEP393_ENABLED<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyUnicode_1BYTE_KIND<sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyUnicode_2BYTE_KIND<sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyUnicode_4BYTE_KIND<sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyUnicode_READY(op)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyUnicode_GET_LENGTH(u)<sp/><sp/><sp/>PyUnicode_GET_SIZE(u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyUnicode_READ_CHAR(u,<sp/>i)<sp/>((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyUnicode_MAX_CHAR_VALUE(u)<sp/><sp/><sp/>((sizeof(Py_UNICODE)<sp/>==<sp/>2)<sp/>?<sp/>65535<sp/>:<sp/>1114111)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyUnicode_KIND(u)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(sizeof(Py_UNICODE))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyUnicode_DATA(u)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((void*)PyUnicode_AS_UNICODE(u))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyUnicode_READ(k,<sp/>d,<sp/>i)<sp/><sp/><sp/>((void)(k),<sp/>(Py_UCS4)(((Py_UNICODE*)d)[i]))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyUnicode_WRITE(k,<sp/>d,<sp/>i,<sp/>ch)<sp/><sp/>(((void)(k)),<sp/>((Py_UNICODE*)d)[i]<sp/>=<sp/>ch)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyUnicode_IS_TRUE(u)<sp/><sp/><sp/><sp/><sp/><sp/>(0<sp/>!=<sp/>PyUnicode_GET_SIZE(u))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_PYPY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyUnicode_Concat(a,<sp/>b)<sp/><sp/><sp/><sp/><sp/><sp/>PyNumber_Add(a,<sp/>b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyUnicode_ConcatSafe(a,<sp/>b)<sp/><sp/>PyNumber_Add(a,<sp/>b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyUnicode_Concat(a,<sp/>b)<sp/><sp/><sp/><sp/><sp/><sp/>PyUnicode_Concat(a,<sp/>b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyUnicode_ConcatSafe(a,<sp/>b)<sp/><sp/>((unlikely((a)<sp/>==<sp/>Py_None)<sp/>||<sp/>unlikely((b)<sp/>==<sp/>Py_None))<sp/>?\</highlight></codeline>
<codeline lineno="790"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>PyNumber_Add(a,<sp/>b)<sp/>:<sp/>__Pyx_PyUnicode_Concat(a,<sp/>b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_PYPY<sp/>&amp;&amp;<sp/>!defined(PyUnicode_Contains)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyUnicode_Contains(u,<sp/>s)<sp/><sp/>PySequence_Contains(u,<sp/>s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_PYPY<sp/>&amp;&amp;<sp/>!defined(PyByteArray_Check)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyByteArray_Check(obj)<sp/><sp/>PyObject_TypeCheck(obj,<sp/>&amp;PyByteArray_Type)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_PYPY<sp/>&amp;&amp;<sp/>!defined(PyObject_Format)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyObject_Format(obj,<sp/>fmt)<sp/><sp/>PyObject_CallMethod(obj,<sp/>&quot;__format__&quot;</highlight><highlight class="normal">,<sp/>&quot;O&quot;,<sp/>fmt)</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyString_FormatSafe(a,<sp/>b)<sp/><sp/><sp/>((unlikely((a)<sp/>==<sp/>Py_None<sp/>||<sp/>(PyString_Check(b)<sp/>&amp;&amp;<sp/>!PyString_CheckExact(b))))<sp/>?<sp/>PyNumber_Remainder(a,<sp/>b)<sp/>:<sp/>__Pyx_PyString_Format(a,<sp/>b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyUnicode_FormatSafe(a,<sp/>b)<sp/><sp/>((unlikely((a)<sp/>==<sp/>Py_None<sp/>||<sp/>(PyUnicode_Check(b)<sp/>&amp;&amp;<sp/>!PyUnicode_CheckExact(b))))<sp/>?<sp/>PyNumber_Remainder(a,<sp/>b)<sp/>:<sp/>PyUnicode_Format(a,<sp/>b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyString_Format(a,<sp/>b)<sp/><sp/>PyUnicode_Format(a,<sp/>b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyString_Format(a,<sp/>b)<sp/><sp/>PyString_Format(a,<sp/>b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3<sp/>&amp;&amp;<sp/>!defined(PyObject_ASCII)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyObject_ASCII(o)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject_Repr(o)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyBaseString_Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyUnicode_Type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyStringObject<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyUnicodeObject</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyString_Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyUnicode_Type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyString_Check<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyUnicode_Check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyString_CheckExact<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyUnicode_CheckExact</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PyObject_Unicode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyObject_Unicode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject_Str</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyBaseString_Check(obj)<sp/>PyUnicode_Check(obj)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyBaseString_CheckExact(obj)<sp/>PyUnicode_CheckExact(obj)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyBaseString_Check(obj)<sp/>(PyString_Check(obj)<sp/>||<sp/>PyUnicode_Check(obj))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyBaseString_CheckExact(obj)<sp/>(PyString_CheckExact(obj)<sp/>||<sp/>PyUnicode_CheckExact(obj))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PySet_CheckExact</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PySet_CheckExact(obj)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Py_TYPE(obj)<sp/>==<sp/>&amp;PySet_Type)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x030900A4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_SET_REFCNT(obj,<sp/>refcnt)<sp/>Py_SET_REFCNT(obj,<sp/>refcnt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_SET_SIZE(obj,<sp/>size)<sp/>Py_SET_SIZE(obj,<sp/>size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_SET_REFCNT(obj,<sp/>refcnt)<sp/>Py_REFCNT(obj)<sp/>=<sp/>(refcnt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_SET_SIZE(obj,<sp/>size)<sp/>Py_SIZE(obj)<sp/>=<sp/>(size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_ASSUME_SAFE_MACROS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PySequence_SIZE(seq)<sp/><sp/>Py_SIZE(seq)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PySequence_SIZE(seq)<sp/><sp/>PySequence_Size(seq)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyIntObject<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyLongObject</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyInt_Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyLong_Type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyInt_Check(op)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyLong_Check(op)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyInt_CheckExact(op)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyLong_CheckExact(op)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyInt_FromString<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyLong_FromString</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyInt_FromUnicode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyLong_FromUnicode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyInt_FromLong<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyLong_FromLong</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyInt_FromSize_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyLong_FromSize_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyInt_FromSsize_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyLong_FromSsize_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyInt_AsLong<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyLong_AsLong</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyInt_AS_LONG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyLong_AS_LONG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyInt_AsSsize_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyLong_AsSsize_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyInt_AsUnsignedLongMask<sp/><sp/><sp/><sp/><sp/>PyLong_AsUnsignedLongMask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyInt_AsUnsignedLongLongMask<sp/>PyLong_AsUnsignedLongLongMask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyNumber_Int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyNumber_Long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>PyBoolObject<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyLongObject</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3<sp/>&amp;&amp;<sp/>CYTHON_COMPILING_IN_PYPY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>PyUnicode_InternFromString</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>PyUnicode_InternFromString(s)<sp/>PyUnicode_FromString(s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x030200A4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Py_hash_t;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyInt_FromHash_t<sp/>PyInt_FromLong</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyInt_AsHash_t<sp/><sp/><sp/>__Pyx_PyIndex_AsHash_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyInt_FromHash_t<sp/>PyInt_FromSsize_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyInt_AsHash_t<sp/><sp/><sp/>__Pyx_PyIndex_AsSsize_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyMethod_New(func,<sp/>self,<sp/>klass)<sp/>((self)<sp/>?<sp/>((void)(klass),<sp/>PyMethod_New(func,<sp/>self))<sp/>:<sp/>__Pyx_NewRef(func))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyMethod_New(func,<sp/>self,<sp/>klass)<sp/>PyMethod_New(func,<sp/>self,<sp/>klass)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_USE_ASYNC_SLOTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x030500B1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__Pyx_PyAsyncMethodsStruct<sp/>PyAsyncMethods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__Pyx_PyType_AsAsync(obj)<sp/>(Py_TYPE(obj)-&gt;tp_as_async)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__Pyx_PyType_AsAsync(obj)<sp/>((__Pyx_PyAsyncMethodsStruct*)<sp/>(Py_TYPE(obj)-&gt;tp_reserved))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyType_AsAsync(obj)<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__Pyx_PyAsyncMethodsStruct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unaryfunc<sp/>am_await;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unaryfunc<sp/>am_aiter;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unaryfunc<sp/>am_anext;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>__Pyx_PyAsyncMethodsStruct;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)<sp/>||<sp/>defined(WIN32)<sp/>||<sp/>defined(MS_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>!defined(_USE_MATH_DEFINES)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>_USE_MATH_DEFINES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PYX_NAN()<sp/>((float)<sp/>NAN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>__PYX_NAN()<sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>memset(&amp;value,<sp/>0xFF,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(value));</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__CYGWIN__)<sp/>&amp;&amp;<sp/>defined(_LDBL_EQ_DBL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_truncl<sp/>trunc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_truncl<sp/>truncl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PYX_MARK_ERR_POS(f_index,<sp/>lineno)<sp/>\</highlight></codeline>
<codeline lineno="921"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>__pyx_filename<sp/>=<sp/>__pyx_f[f_index];<sp/>(void)__pyx_filename;<sp/>__pyx_lineno<sp/>=<sp/>lineno;<sp/>(void)__pyx_lineno;<sp/>__pyx_clineno<sp/>=<sp/>__LINE__;<sp/>(void)__pyx_clineno;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PYX_ERR(f_index,<sp/>lineno,<sp/>Ln_error)<sp/>\</highlight></codeline>
<codeline lineno="923"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>__PYX_MARK_ERR_POS(f_index,<sp/>lineno)<sp/>goto<sp/>Ln_error;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__PYX_EXTERN_C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__PYX_EXTERN_C<sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__PYX_EXTERN_C<sp/>extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PYX_HAVE__imate__logdet___slq_method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PYX_HAVE_API__imate__logdet___slq_method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Early<sp/>includes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="functions_8h" kindref="compound">functions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="identity_8h" kindref="compound">identity.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ios&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;new&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stdexcept&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;typeinfo&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="indicator_8h" kindref="compound">indicator.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="inverse_8h" kindref="compound">inverse.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="homographic_8h" kindref="compound">homographic.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="logarithm_8h" kindref="compound">logarithm.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="exponential_8h" kindref="compound">exponential.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gaussian_8h" kindref="compound">gaussian.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="smoothstep_8h" kindref="compound">smoothstep.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;omp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_OPENMP<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PYREX_WITHOUT_ASSERTIONS)<sp/>&amp;&amp;<sp/>!defined(CYTHON_WITHOUT_ASSERTIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CYTHON_WITHOUT_ASSERTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{PyObject<sp/>**p;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_ssize_t<sp/>n;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>encoding;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>is_unicode;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>is_str;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>intern;<sp/>}<sp/>__Pyx_StringTabEntry;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PYX_DEFAULT_STRING_ENCODING_IS_ASCII<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PYX_DEFAULT_STRING_ENCODING_IS_UTF8<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT<sp/>(PY_MAJOR_VERSION<sp/>&gt;=<sp/>3<sp/>&amp;&amp;<sp/>__PYX_DEFAULT_STRING_ENCODING_IS_UTF8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PYX_DEFAULT_STRING_ENCODING<sp/>&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyObject_FromString<sp/>__Pyx_PyBytes_FromString</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyObject_FromStringAndSize<sp/>__Pyx_PyBytes_FromStringAndSize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_uchar_cast(c)<sp/>((unsigned<sp/>char)c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_long_cast(x)<sp/>((long)x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_fits_Py_ssize_t(v,<sp/>type,<sp/>is_signed)<sp/><sp/>(\</highlight></codeline>
<codeline lineno="969"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(sizeof(type)<sp/>&lt;<sp/>sizeof(Py_ssize_t))<sp/><sp/>||\</highlight></codeline>
<codeline lineno="970"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(sizeof(type)<sp/>&gt;<sp/>sizeof(Py_ssize_t)<sp/>&amp;&amp;\</highlight></codeline>
<codeline lineno="971"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>likely(v<sp/>&lt;<sp/>(type)PY_SSIZE_T_MAX<sp/>||\</highlight></codeline>
<codeline lineno="972"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>==<sp/>(type)PY_SSIZE_T_MAX)<sp/><sp/>&amp;&amp;\</highlight></codeline>
<codeline lineno="973"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!is_signed<sp/>||<sp/>likely(v<sp/>&gt;<sp/>(type)PY_SSIZE_T_MIN<sp/>||\</highlight></codeline>
<codeline lineno="974"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>==<sp/>(type)PY_SSIZE_T_MIN)))<sp/><sp/>||\</highlight></codeline>
<codeline lineno="975"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(sizeof(type)<sp/>==<sp/>sizeof(Py_ssize_t)<sp/>&amp;&amp;\</highlight></codeline>
<codeline lineno="976"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(is_signed<sp/>||<sp/>likely(v<sp/>&lt;<sp/>(type)PY_SSIZE_T_MAX<sp/>||\</highlight></codeline>
<codeline lineno="977"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>==<sp/>(type)PY_SSIZE_T_MAX)))<sp/><sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_is_valid_index(Py_ssize_t<sp/>i,<sp/>Py_ssize_t<sp/>limit)<sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>i<sp/>&lt;<sp/>(size_t)<sp/>limit;</highlight></codeline>
<codeline lineno="980"><highlight class="normal">}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(__cplusplus)<sp/>&amp;&amp;<sp/>__cplusplus<sp/>&gt;=<sp/>201103L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__Pyx_sst_abs(value)<sp/>std::abs(value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>SIZEOF_INT<sp/>&gt;=<sp/>SIZEOF_SIZE_T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__Pyx_sst_abs(value)<sp/>abs(value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>SIZEOF_LONG<sp/>&gt;=<sp/>SIZEOF_SIZE_T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__Pyx_sst_abs(value)<sp/>labs(value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined<sp/>(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__Pyx_sst_abs(value)<sp/>((Py_ssize_t)_abs64(value))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined<sp/>(__STDC_VERSION__)<sp/>&amp;&amp;<sp/>__STDC_VERSION__<sp/>&gt;=<sp/>199901L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__Pyx_sst_abs(value)<sp/>llabs(value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined<sp/>(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__Pyx_sst_abs(value)<sp/>__builtin_llabs(value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__Pyx_sst_abs(value)<sp/>((value&lt;0)<sp/>?<sp/>-value<sp/>:<sp/>value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>__Pyx_PyObject_AsString(PyObject*);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>__Pyx_PyObject_AsStringAndSize(PyObject*,<sp/>Py_ssize_t*<sp/>length);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyByteArray_FromString(s)<sp/>PyByteArray_FromStringAndSize((const<sp/>char*)s,<sp/>strlen((const<sp/>char*)s))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyByteArray_FromStringAndSize(s,<sp/>l)<sp/>PyByteArray_FromStringAndSize((const<sp/>char*)s,<sp/>l)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyBytes_FromString<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyBytes_FromString</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyBytes_FromStringAndSize<sp/>PyBytes_FromStringAndSize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyObject*<sp/>__Pyx_PyUnicode_FromString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__Pyx_PyStr_FromString<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_PyBytes_FromString</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__Pyx_PyStr_FromStringAndSize<sp/>__Pyx_PyBytes_FromStringAndSize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__Pyx_PyStr_FromString<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_PyUnicode_FromString</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>__Pyx_PyStr_FromStringAndSize<sp/>__Pyx_PyUnicode_FromStringAndSize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyBytes_AsWritableString(s)<sp/><sp/><sp/><sp/><sp/>((char*)<sp/>PyBytes_AS_STRING(s))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyBytes_AsWritableSString(s)<sp/><sp/><sp/><sp/>((signed<sp/>char*)<sp/>PyBytes_AS_STRING(s))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyBytes_AsWritableUString(s)<sp/><sp/><sp/><sp/>((unsigned<sp/>char*)<sp/>PyBytes_AS_STRING(s))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyBytes_AsString(s)<sp/><sp/><sp/><sp/><sp/>((const<sp/>char*)<sp/>PyBytes_AS_STRING(s))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyBytes_AsSString(s)<sp/><sp/><sp/><sp/>((const<sp/>signed<sp/>char*)<sp/>PyBytes_AS_STRING(s))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyBytes_AsUString(s)<sp/><sp/><sp/><sp/>((const<sp/>unsigned<sp/>char*)<sp/>PyBytes_AS_STRING(s))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyObject_AsWritableString(s)<sp/><sp/><sp/><sp/>((char*)<sp/>__Pyx_PyObject_AsString(s))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyObject_AsWritableSString(s)<sp/><sp/><sp/><sp/>((signed<sp/>char*)<sp/>__Pyx_PyObject_AsString(s))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyObject_AsWritableUString(s)<sp/><sp/><sp/><sp/>((unsigned<sp/>char*)<sp/>__Pyx_PyObject_AsString(s))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyObject_AsSString(s)<sp/><sp/><sp/><sp/>((const<sp/>signed<sp/>char*)<sp/>__Pyx_PyObject_AsString(s))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyObject_AsUString(s)<sp/><sp/><sp/><sp/>((const<sp/>unsigned<sp/>char*)<sp/>__Pyx_PyObject_AsString(s))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyObject_FromCString(s)<sp/><sp/>__Pyx_PyObject_FromString((const<sp/>char*)s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyBytes_FromCString(s)<sp/><sp/><sp/>__Pyx_PyBytes_FromString((const<sp/>char*)s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyByteArray_FromCString(s)<sp/><sp/><sp/>__Pyx_PyByteArray_FromString((const<sp/>char*)s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyStr_FromCString(s)<sp/><sp/><sp/><sp/><sp/>__Pyx_PyStr_FromString((const<sp/>char*)s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyUnicode_FromCString(s)<sp/>__Pyx_PyUnicode_FromString((const<sp/>char*)s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>__Pyx_Py_UNICODE_strlen(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*u)<sp/>{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_UNICODE<sp/>*u_end<sp/>=<sp/>u;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*u_end++)<sp/>;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(u_end<sp/>-<sp/>u<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyUnicode_FromUnicode(u)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyUnicode_FromUnicode(u,<sp/>__Pyx_Py_UNICODE_strlen(u))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyUnicode_FromUnicodeAndLength<sp/>PyUnicode_FromUnicode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyUnicode_AsUnicode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyUnicode_AsUnicode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_NewRef(obj)<sp/>(Py_INCREF(obj),<sp/>obj)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_Owned_Py_None(b)<sp/>__Pyx_NewRef(Py_None)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyObject<sp/>*<sp/>__Pyx_PyBool_FromLong(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_PyObject_IsTrue(PyObject*);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_PyObject_IsTrueAndDecref(PyObject*);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyObject*<sp/>__Pyx_PyNumber_IntOrLong(PyObject*<sp/>x);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PySequence_Tuple(obj)\</highlight></codeline>
<codeline lineno="1042"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(likely(PyTuple_CheckExact(obj))<sp/>?<sp/>__Pyx_NewRef(obj)<sp/>:<sp/>PySequence_Tuple(obj))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>Py_ssize_t<sp/>__Pyx_PyIndex_AsSsize_t(PyObject*);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyObject<sp/>*<sp/>__Pyx_PyInt_FromSize_t(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>Py_hash_t<sp/>__Pyx_PyIndex_AsHash_t(PyObject*);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_ASSUME_SAFE_MACROS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__pyx_PyFloat_AsDouble(x)<sp/>(PyFloat_CheckExact(x)<sp/>?<sp/>PyFloat_AS_DOUBLE(x)<sp/>:<sp/>PyFloat_AsDouble(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__pyx_PyFloat_AsDouble(x)<sp/>PyFloat_AsDouble(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__pyx_PyFloat_AsFloat(x)<sp/>((float)<sp/>__pyx_PyFloat_AsDouble(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyNumber_Int(x)<sp/>(PyLong_CheckExact(x)<sp/>?<sp/>__Pyx_NewRef(x)<sp/>:<sp/>PyNumber_Long(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyNumber_Int(x)<sp/>(PyInt_CheckExact(x)<sp/>?<sp/>__Pyx_NewRef(x)<sp/>:<sp/>PyNumber_Int(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyNumber_Float(x)<sp/>(PyFloat_CheckExact(x)<sp/>?<sp/>__Pyx_NewRef(x)<sp/>:<sp/>PyNumber_Float(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3<sp/>&amp;&amp;<sp/>__PYX_DEFAULT_STRING_ENCODING_IS_ASCII</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_sys_getdefaultencoding_not_ascii;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_init_sys_getdefaultencoding_params(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>sys;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>default_encoding<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>ascii_chars_u<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>ascii_chars_b<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>default_encoding_c;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>sys<sp/>=<sp/>PyImport_ImportModule(</highlight><highlight class="stringliteral">&quot;sys&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sys)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>default_encoding<sp/>=<sp/>PyObject_CallMethod(sys,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/></highlight><highlight class="stringliteral">&quot;getdefaultencoding&quot;</highlight><highlight class="normal">,<sp/>NULL);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_DECREF(sys);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!default_encoding)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>default_encoding_c<sp/>=<sp/>PyBytes_AsString(default_encoding);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!default_encoding_c)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(default_encoding_c,<sp/></highlight><highlight class="stringliteral">&quot;ascii&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_sys_getdefaultencoding_not_ascii<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ascii_chars[128];</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>128;<sp/>c++)<sp/>{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ascii_chars[c]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_sys_getdefaultencoding_not_ascii<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ascii_chars_u<sp/>=<sp/>PyUnicode_DecodeASCII(ascii_chars,<sp/>128,<sp/>NULL);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ascii_chars_u)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ascii_chars_b<sp/>=<sp/>PyUnicode_AsEncodedString(ascii_chars_u,<sp/>default_encoding_c,<sp/>NULL);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ascii_chars_b<sp/>||<sp/>!PyBytes_Check(ascii_chars_b)<sp/>||<sp/>memcmp(ascii_chars,<sp/>PyBytes_AS_STRING(ascii_chars_b),<sp/>128)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyExc_ValueError,</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>module<sp/>compiled<sp/>with<sp/>c_string_encoding=ascii,<sp/>but<sp/>default<sp/>encoding<sp/>&apos;%.200s&apos;<sp/>is<sp/>not<sp/>a<sp/>superset<sp/>of<sp/>ascii.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default_encoding_c);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(ascii_chars_u);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(ascii_chars_b);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_DECREF(default_encoding);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal">bad:</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(default_encoding);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(ascii_chars_u);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(ascii_chars_b);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT<sp/>&amp;&amp;<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyUnicode_FromStringAndSize(c_str,<sp/>size)<sp/>PyUnicode_DecodeUTF8(c_str,<sp/>size,<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyUnicode_FromStringAndSize(c_str,<sp/>size)<sp/>PyUnicode_Decode(c_str,<sp/>size,<sp/>__PYX_DEFAULT_STRING_ENCODING,<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>__PYX_DEFAULT_STRING_ENCODING;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_init_sys_getdefaultencoding_params(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>sys;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>default_encoding<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>default_encoding_c;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/>sys<sp/>=<sp/>PyImport_ImportModule(</highlight><highlight class="stringliteral">&quot;sys&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sys)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>default_encoding<sp/>=<sp/>PyObject_CallMethod(sys,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/></highlight><highlight class="stringliteral">&quot;getdefaultencoding&quot;</highlight><highlight class="normal">,<sp/>NULL);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_DECREF(sys);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!default_encoding)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>default_encoding_c<sp/>=<sp/>PyBytes_AsString(default_encoding);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!default_encoding_c)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>__PYX_DEFAULT_STRING_ENCODING<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>malloc(strlen(default_encoding_c)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!__PYX_DEFAULT_STRING_ENCODING)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(__PYX_DEFAULT_STRING_ENCODING,<sp/>default_encoding_c);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_DECREF(default_encoding);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal">bad:</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(default_encoding);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Test<sp/>for<sp/>GCC<sp/>&gt;<sp/>2.95<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(__GNUC__<sp/>&gt;<sp/>2<sp/>||<sp/>(__GNUC__<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>(__GNUC_MINOR__<sp/>&gt;<sp/>95)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>likely(x)<sp/><sp/><sp/>__builtin_expect(!!(x),<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>unlikely(x)<sp/>__builtin_expect(!!(x),<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>!__GNUC__<sp/>or<sp/>GCC<sp/>&lt;<sp/>2.95<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>likely(x)<sp/><sp/><sp/>(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>unlikely(x)<sp/>(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__GNUC__<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_pretend_to_initialize(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr)<sp/>{<sp/>(void)ptr;<sp/>}</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_m<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_d;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_b;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_cython_runtime<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_empty_tuple;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_empty_bytes;</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_empty_unicode;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pyx_lineno;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pyx_clineno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>__pyx_cfilenm=<sp/>__FILE__;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*__pyx_filename;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*__pyx_f[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;imate/logdet/_slq_method.pyx&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;imate/functions/py_functions.pxd&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1160"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight><highlight class="comment">/*---<sp/>Type<sp/>declarations<sp/>---*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__pyx_obj_5imate_9functions_12py_functions_pyFunction;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>&quot;imate/functions/py_functions.pxd&quot;:20</highlight></codeline>
<codeline lineno="1166"><highlight class="comment"><sp/>*<sp/>#<sp/>============</highlight></codeline>
<codeline lineno="1167"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1168"><highlight class="comment"><sp/>*<sp/>cdef<sp/>class<sp/>pyFunction(object):<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="1169"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1170"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>#<sp/>Member<sp/>data</highlight></codeline>
<codeline lineno="1171"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__pyx_obj_5imate_9functions_12py_functions_pyFunction<sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/>PyObject_HEAD</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__pyx_vtabstruct_5imate_9functions_12py_functions_pyFunction<sp/>*__pyx_vtab;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><ref refid="classFunction" kindref="compound">Function</ref><sp/>*matrix_function;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__pyx_vtabstruct_5imate_9functions_12py_functions_pyFunction<sp/>{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/>void<sp/>(*set_function)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__pyx_obj_5imate_9functions_12py_functions_pyFunction<sp/>*,<sp/><ref refid="classFunction" kindref="compound">Function</ref><sp/>*);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><ref refid="classFunction" kindref="compound">Function</ref><sp/>*(*get_function)(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__pyx_obj_5imate_9functions_12py_functions_pyFunction<sp/>*);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__pyx_vtabstruct_5imate_9functions_12py_functions_pyFunction<sp/>*__pyx_vtabptr_5imate_9functions_12py_functions_pyFunction;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>Runtime<sp/>support<sp/>code<sp/>(head)<sp/>---<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Refnanny.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CYTHON_REFNANNY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_REFNANNY<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_REFNANNY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*INCREF)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/>PyObject*,<sp/>int);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*DECREF)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/>PyObject*,<sp/>int);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*GOTREF)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/>PyObject*,<sp/>int);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*GIVEREF)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/>PyObject*,<sp/>int);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>(*SetupContext)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/>int,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*FinishContext)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/>}<sp/>__Pyx_RefNannyAPIStruct;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>__Pyx_RefNannyAPIStruct<sp/>*__Pyx_RefNanny<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>__Pyx_RefNannyAPIStruct<sp/>*__Pyx_RefNannyImportAPI(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*modname);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_RefNannyDeclarations<sp/>void<sp/>*__pyx_refnanny<sp/>=<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WITH_THREAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_RefNannySetupContext(name,<sp/>acquire_gil)\</highlight></codeline>
<codeline lineno="1205"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(acquire_gil)<sp/>{\</highlight></codeline>
<codeline lineno="1206"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>__pyx_gilstate_save<sp/>=<sp/>PyGILState_Ensure();\</highlight></codeline>
<codeline lineno="1207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_refnanny<sp/>=<sp/>__Pyx_RefNanny-&gt;SetupContext((name),<sp/>__LINE__,<sp/>__FILE__);\</highlight></codeline>
<codeline lineno="1208"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(__pyx_gilstate_save);\</highlight></codeline>
<codeline lineno="1209"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="1210"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_refnanny<sp/>=<sp/>__Pyx_RefNanny-&gt;SetupContext((name),<sp/>__LINE__,<sp/>__FILE__);\</highlight></codeline>
<codeline lineno="1211"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_RefNannySetupContext(name,<sp/>acquire_gil)\</highlight></codeline>
<codeline lineno="1214"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_refnanny<sp/>=<sp/>__Pyx_RefNanny-&gt;SetupContext((name),<sp/>__LINE__,<sp/>__FILE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_RefNannyFinishContext()\</highlight></codeline>
<codeline lineno="1217"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_RefNanny-&gt;FinishContext(&amp;__pyx_refnanny)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_INCREF(r)<sp/><sp/>__Pyx_RefNanny-&gt;INCREF(__pyx_refnanny,<sp/>(PyObject<sp/>*)(r),<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_DECREF(r)<sp/><sp/>__Pyx_RefNanny-&gt;DECREF(__pyx_refnanny,<sp/>(PyObject<sp/>*)(r),<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_GOTREF(r)<sp/><sp/>__Pyx_RefNanny-&gt;GOTREF(__pyx_refnanny,<sp/>(PyObject<sp/>*)(r),<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_GIVEREF(r)<sp/>__Pyx_RefNanny-&gt;GIVEREF(__pyx_refnanny,<sp/>(PyObject<sp/>*)(r),<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_XINCREF(r)<sp/><sp/>do<sp/>{<sp/>if((r)<sp/>!=<sp/>NULL)<sp/>{__Pyx_INCREF(r);<sp/>}}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_XDECREF(r)<sp/><sp/>do<sp/>{<sp/>if((r)<sp/>!=<sp/>NULL)<sp/>{__Pyx_DECREF(r);<sp/>}}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_XGOTREF(r)<sp/><sp/>do<sp/>{<sp/>if((r)<sp/>!=<sp/>NULL)<sp/>{__Pyx_GOTREF(r);<sp/>}}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_XGIVEREF(r)<sp/>do<sp/>{<sp/>if((r)<sp/>!=<sp/>NULL)<sp/>{__Pyx_GIVEREF(r);}}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_RefNannyDeclarations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_RefNannySetupContext(name,<sp/>acquire_gil)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_RefNannyFinishContext()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_INCREF(r)<sp/>Py_INCREF(r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_DECREF(r)<sp/>Py_DECREF(r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_GOTREF(r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_GIVEREF(r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_XINCREF(r)<sp/>Py_XINCREF(r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_XDECREF(r)<sp/>Py_XDECREF(r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_XGOTREF(r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_XGIVEREF(r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_XDECREF_SET(r,<sp/>v)<sp/>do<sp/>{\</highlight></codeline>
<codeline lineno="1240"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*tmp<sp/>=<sp/>(PyObject<sp/>*)<sp/>r;\</highlight></codeline>
<codeline lineno="1241"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>v;<sp/>__Pyx_XDECREF(tmp);\</highlight></codeline>
<codeline lineno="1242"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_DECREF_SET(r,<sp/>v)<sp/>do<sp/>{\</highlight></codeline>
<codeline lineno="1244"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*tmp<sp/>=<sp/>(PyObject<sp/>*)<sp/>r;\</highlight></codeline>
<codeline lineno="1245"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>v;<sp/>__Pyx_DECREF(tmp);\</highlight></codeline>
<codeline lineno="1246"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_CLEAR(r)<sp/><sp/><sp/><sp/>do<sp/>{<sp/>PyObject*<sp/>tmp<sp/>=<sp/>((PyObject*)(r));<sp/>r<sp/>=<sp/>NULL;<sp/>__Pyx_DECREF(tmp);}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_XCLEAR(r)<sp/><sp/><sp/>do<sp/>{<sp/>if((r)<sp/>!=<sp/>NULL)<sp/>{PyObject*<sp/>tmp<sp/>=<sp/>((PyObject*)(r));<sp/>r<sp/>=<sp/>NULL;<sp/>__Pyx_DECREF(tmp);}}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyObjectGetAttrStr.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_USE_TYPE_SLOTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyObject*<sp/>__Pyx_PyObject_GetAttrStr(PyObject*<sp/>obj,<sp/>PyObject*<sp/>attr_name);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyObject_GetAttrStr(o,n)<sp/>PyObject_GetAttr(o,n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>GetBuiltinName.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__Pyx_GetBuiltinName(PyObject<sp/>*name);</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>RaiseDoubleKeywords.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_RaiseDoubleKeywordsError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>func_name,<sp/>PyObject*<sp/>kw_name);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ParseKeywords.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_ParseOptionalKeywords(PyObject<sp/>*kwds,<sp/>PyObject<sp/>**argnames[],\</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*kwds2,<sp/>PyObject<sp/>*values[],<sp/>Py_ssize_t<sp/>num_pos_args,\</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>function_name);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>RaiseArgTupleInvalid.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_RaiseArgtupleInvalid(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>func_name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exact,</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>num_min,<sp/>Py_ssize_t<sp/>num_max,<sp/>Py_ssize_t<sp/>num_found);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyThreadStateGet.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_FAST_THREAD_STATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyThreadState_declare<sp/><sp/>PyThreadState<sp/>*__pyx_tstate;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyThreadState_assign<sp/><sp/>__pyx_tstate<sp/>=<sp/>__Pyx_PyThreadState_Current;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyErr_Occurred()<sp/><sp/>__pyx_tstate-&gt;curexc_type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyThreadState_declare</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyThreadState_assign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyErr_Occurred()<sp/><sp/>PyErr_Occurred()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyErrFetchRestore.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_FAST_THREAD_STATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyErr_Clear()<sp/>__Pyx_ErrRestore(NULL,<sp/>NULL,<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_ErrRestoreWithState(type,<sp/>value,<sp/>tb)<sp/><sp/>__Pyx_ErrRestoreInState(PyThreadState_GET(),<sp/>type,<sp/>value,<sp/>tb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_ErrFetchWithState(type,<sp/>value,<sp/>tb)<sp/><sp/><sp/><sp/>__Pyx_ErrFetchInState(PyThreadState_GET(),<sp/>type,<sp/>value,<sp/>tb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_ErrRestore(type,<sp/>value,<sp/>tb)<sp/><sp/>__Pyx_ErrRestoreInState(__pyx_tstate,<sp/>type,<sp/>value,<sp/>tb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_ErrFetch(type,<sp/>value,<sp/>tb)<sp/><sp/><sp/><sp/>__Pyx_ErrFetchInState(__pyx_tstate,<sp/>type,<sp/>value,<sp/>tb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_ErrRestoreInState(PyThreadState<sp/>*tstate,<sp/>PyObject<sp/>*type,<sp/>PyObject<sp/>*value,<sp/>PyObject<sp/>*tb);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_ErrFetchInState(PyThreadState<sp/>*tstate,<sp/>PyObject<sp/>**type,<sp/>PyObject<sp/>**value,<sp/>PyObject<sp/>**tb);</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_CPYTHON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyErr_SetNone(exc)<sp/>(Py_INCREF(exc),<sp/>__Pyx_ErrRestore((exc),<sp/>NULL,<sp/>NULL))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyErr_SetNone(exc)<sp/>PyErr_SetNone(exc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyErr_Clear()<sp/>PyErr_Clear()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyErr_SetNone(exc)<sp/>PyErr_SetNone(exc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_ErrRestoreWithState(type,<sp/>value,<sp/>tb)<sp/><sp/>PyErr_Restore(type,<sp/>value,<sp/>tb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_ErrFetchWithState(type,<sp/>value,<sp/>tb)<sp/><sp/>PyErr_Fetch(type,<sp/>value,<sp/>tb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_ErrRestoreInState(tstate,<sp/>type,<sp/>value,<sp/>tb)<sp/><sp/>PyErr_Restore(type,<sp/>value,<sp/>tb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_ErrFetchInState(tstate,<sp/>type,<sp/>value,<sp/>tb)<sp/><sp/>PyErr_Fetch(type,<sp/>value,<sp/>tb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_ErrRestore(type,<sp/>value,<sp/>tb)<sp/><sp/>PyErr_Restore(type,<sp/>value,<sp/>tb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_ErrFetch(type,<sp/>value,<sp/>tb)<sp/><sp/>PyErr_Fetch(type,<sp/>value,<sp/>tb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Profile.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CYTHON_PROFILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_PYPY<sp/>||<sp/>CYTHON_COMPILING_IN_PYSTON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_PROFILE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_PROFILE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CYTHON_TRACE_NOGIL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_TRACE_NOGIL<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>CYTHON_TRACE_NOGIL<sp/>&amp;&amp;<sp/>!defined(CYTHON_TRACE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_TRACE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CYTHON_TRACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_TRACE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_TRACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>CYTHON_PROFILE_REUSE_FRAME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CYTHON_PROFILE_REUSE_FRAME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CYTHON_PROFILE_REUSE_FRAME<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_PROFILE<sp/>||<sp/>CYTHON_TRACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&quot;compile.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&quot;frameobject.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&quot;traceback.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x030b00a6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>Py_BUILD_CORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>Py_BUILD_CORE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&quot;internal/pycore_frame.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>CYTHON_PROFILE_REUSE_FRAME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_FRAME_MODIFIER<sp/>static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_FRAME_DEL(frame)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_FRAME_MODIFIER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_FRAME_DEL(frame)<sp/>Py_CLEAR(frame)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_TraceDeclarations\</highlight></codeline>
<codeline lineno="1350"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>PyCodeObject<sp/>*__pyx_frame_code<sp/>=<sp/>NULL;\</highlight></codeline>
<codeline lineno="1351"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FRAME_MODIFIER<sp/>PyFrameObject<sp/>*__pyx_frame<sp/>=<sp/>NULL;\</highlight></codeline>
<codeline lineno="1352"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__Pyx_use_tracing<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_TraceFrameInit(codeobj)\</highlight></codeline>
<codeline lineno="1354"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(codeobj)<sp/>__pyx_frame_code<sp/>=<sp/>(PyCodeObject*)<sp/>codeobj;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x030b00a2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_IsTracing(tstate,<sp/>check_tracing,<sp/>check_funcs)\</highlight></codeline>
<codeline lineno="1357"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(unlikely((tstate)-&gt;cframe-&gt;use_tracing)<sp/>&amp;&amp;\</highlight></codeline>
<codeline lineno="1358"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!(check_tracing)<sp/>||<sp/>!(tstate)-&gt;tracing)<sp/>&amp;&amp;\</highlight></codeline>
<codeline lineno="1359"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!(check_funcs)<sp/>||<sp/>(tstate)-&gt;c_profilefunc<sp/>||<sp/>(CYTHON_TRACE<sp/>&amp;&amp;<sp/>(tstate)-&gt;c_tracefunc)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_EnterTracing(tstate)<sp/>PyThreadState_EnterTracing(tstate)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_LeaveTracing(tstate)<sp/>PyThreadState_LeaveTracing(tstate)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x030a00b1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_IsTracing(tstate,<sp/>check_tracing,<sp/>check_funcs)\</highlight></codeline>
<codeline lineno="1364"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(unlikely((tstate)-&gt;cframe-&gt;use_tracing)<sp/>&amp;&amp;\</highlight></codeline>
<codeline lineno="1365"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!(check_tracing)<sp/>||<sp/>!(tstate)-&gt;tracing)<sp/>&amp;&amp;\</highlight></codeline>
<codeline lineno="1366"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!(check_funcs)<sp/>||<sp/>(tstate)-&gt;c_profilefunc<sp/>||<sp/>(CYTHON_TRACE<sp/>&amp;&amp;<sp/>(tstate)-&gt;c_tracefunc)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_EnterTracing(tstate)\</highlight></codeline>
<codeline lineno="1368"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/>tstate-&gt;tracing++;<sp/>tstate-&gt;cframe-&gt;use_tracing<sp/>=<sp/>0;<sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_LeaveTracing(tstate)\</highlight></codeline>
<codeline lineno="1370"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{\</highlight></codeline>
<codeline lineno="1371"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstate-&gt;tracing--;\</highlight></codeline>
<codeline lineno="1372"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstate-&gt;cframe-&gt;use_tracing<sp/>=<sp/>((CYTHON_TRACE<sp/>&amp;&amp;<sp/>tstate-&gt;c_tracefunc<sp/>!=<sp/>NULL)\</highlight></codeline>
<codeline lineno="1373"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>tstate-&gt;c_profilefunc<sp/>!=<sp/>NULL);\</highlight></codeline>
<codeline lineno="1374"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_IsTracing(tstate,<sp/>check_tracing,<sp/>check_funcs)\</highlight></codeline>
<codeline lineno="1377"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(unlikely((tstate)-&gt;use_tracing)<sp/>&amp;&amp;\</highlight></codeline>
<codeline lineno="1378"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!(check_tracing)<sp/>||<sp/>!(tstate)-&gt;tracing)<sp/>&amp;&amp;\</highlight></codeline>
<codeline lineno="1379"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!(check_funcs)<sp/>||<sp/>(tstate)-&gt;c_profilefunc<sp/>||<sp/>(CYTHON_TRACE<sp/>&amp;&amp;<sp/>(tstate)-&gt;c_tracefunc)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_EnterTracing(tstate)\</highlight></codeline>
<codeline lineno="1381"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/>tstate-&gt;tracing++;<sp/>tstate-&gt;use_tracing<sp/>=<sp/>0;<sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_LeaveTracing(tstate)\</highlight></codeline>
<codeline lineno="1383"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{\</highlight></codeline>
<codeline lineno="1384"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstate-&gt;tracing--;\</highlight></codeline>
<codeline lineno="1385"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstate-&gt;use_tracing<sp/>=<sp/>((CYTHON_TRACE<sp/>&amp;&amp;<sp/>tstate-&gt;c_tracefunc<sp/>!=<sp/>NULL)\</highlight></codeline>
<codeline lineno="1386"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>tstate-&gt;c_profilefunc<sp/>!=<sp/>NULL);\</highlight></codeline>
<codeline lineno="1387"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>WITH_THREAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_TraceCall(funcname,<sp/>srcfile,<sp/>firstlineno,<sp/>nogil,<sp/>goto_error)\</highlight></codeline>
<codeline lineno="1391"><highlight class="preprocessor"><sp/><sp/>if<sp/>(nogil)<sp/>{\</highlight></codeline>
<codeline lineno="1392"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(CYTHON_TRACE_NOGIL)<sp/>{\</highlight></codeline>
<codeline lineno="1393"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyThreadState<sp/>*tstate;\</highlight></codeline>
<codeline lineno="1394"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>state<sp/>=<sp/>PyGILState_Ensure();\</highlight></codeline>
<codeline lineno="1395"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstate<sp/>=<sp/>__Pyx_PyThreadState_Current;\</highlight></codeline>
<codeline lineno="1396"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(__Pyx_IsTracing(tstate,<sp/>1,<sp/>1))<sp/>{\</highlight></codeline>
<codeline lineno="1397"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_use_tracing<sp/>=<sp/>__Pyx_TraceSetupAndCall(&amp;__pyx_frame_code,<sp/>&amp;__pyx_frame,<sp/>tstate,<sp/>funcname,<sp/>srcfile,<sp/>firstlineno);\</highlight></codeline>
<codeline lineno="1398"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1399"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(state);\</highlight></codeline>
<codeline lineno="1400"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(unlikely(__Pyx_use_tracing<sp/>&lt;<sp/>0))<sp/>goto_error;\</highlight></codeline>
<codeline lineno="1401"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1402"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="1403"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>PyThreadState*<sp/>tstate<sp/>=<sp/>PyThreadState_GET();\</highlight></codeline>
<codeline lineno="1404"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(__Pyx_IsTracing(tstate,<sp/>1,<sp/>1))<sp/>{\</highlight></codeline>
<codeline lineno="1405"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_use_tracing<sp/>=<sp/>__Pyx_TraceSetupAndCall(&amp;__pyx_frame_code,<sp/>&amp;__pyx_frame,<sp/>tstate,<sp/>funcname,<sp/>srcfile,<sp/>firstlineno);\</highlight></codeline>
<codeline lineno="1406"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(unlikely(__Pyx_use_tracing<sp/>&lt;<sp/>0))<sp/>goto_error;\</highlight></codeline>
<codeline lineno="1407"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1408"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_TraceCall(funcname,<sp/>srcfile,<sp/>firstlineno,<sp/>nogil,<sp/>goto_error)\</highlight></codeline>
<codeline lineno="1411"><highlight class="preprocessor"><sp/><sp/>{<sp/><sp/><sp/>PyThreadState*<sp/>tstate<sp/>=<sp/>PyThreadState_GET();\</highlight></codeline>
<codeline lineno="1412"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(__Pyx_IsTracing(tstate,<sp/>1,<sp/>1))<sp/>{\</highlight></codeline>
<codeline lineno="1413"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_use_tracing<sp/>=<sp/>__Pyx_TraceSetupAndCall(&amp;__pyx_frame_code,<sp/>&amp;__pyx_frame,<sp/>tstate,<sp/>funcname,<sp/>srcfile,<sp/>firstlineno);\</highlight></codeline>
<codeline lineno="1414"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(unlikely(__Pyx_use_tracing<sp/>&lt;<sp/>0))<sp/>goto_error;\</highlight></codeline>
<codeline lineno="1415"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1416"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_TraceException()\</highlight></codeline>
<codeline lineno="1419"><highlight class="preprocessor"><sp/><sp/>if<sp/>(likely(!__Pyx_use_tracing));<sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="1420"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>PyThreadState*<sp/>tstate<sp/>=<sp/>__Pyx_PyThreadState_Current;\</highlight></codeline>
<codeline lineno="1421"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(__Pyx_IsTracing(tstate,<sp/>0,<sp/>1))<sp/>{\</highlight></codeline>
<codeline lineno="1422"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_EnterTracing(tstate);\</highlight></codeline>
<codeline lineno="1423"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*exc_info<sp/>=<sp/>__Pyx_GetExceptionTuple(tstate);\</highlight></codeline>
<codeline lineno="1424"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(exc_info)<sp/>{\</highlight></codeline>
<codeline lineno="1425"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(CYTHON_TRACE<sp/>&amp;&amp;<sp/>tstate-&gt;c_tracefunc)\</highlight></codeline>
<codeline lineno="1426"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstate-&gt;c_tracefunc(\</highlight></codeline>
<codeline lineno="1427"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstate-&gt;c_traceobj,<sp/>__pyx_frame,<sp/>PyTrace_EXCEPTION,<sp/>exc_info);\</highlight></codeline>
<codeline lineno="1428"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstate-&gt;c_profilefunc(\</highlight></codeline>
<codeline lineno="1429"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstate-&gt;c_profileobj,<sp/>__pyx_frame,<sp/>PyTrace_EXCEPTION,<sp/>exc_info);\</highlight></codeline>
<codeline lineno="1430"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(exc_info);\</highlight></codeline>
<codeline lineno="1431"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1432"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_LeaveTracing(tstate);\</highlight></codeline>
<codeline lineno="1433"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1434"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_call_return_trace_func(PyThreadState<sp/>*tstate,<sp/>PyFrameObject<sp/>*frame,<sp/>PyObject<sp/>*result)<sp/>{</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*type,<sp/>*value,<sp/>*traceback;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_ErrFetchInState(tstate,<sp/>&amp;type,<sp/>&amp;value,<sp/>&amp;traceback);</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_EnterTracing(tstate);</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CYTHON_TRACE<sp/>&amp;&amp;<sp/>tstate-&gt;c_tracefunc)</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstate-&gt;c_tracefunc(tstate-&gt;c_traceobj,<sp/>frame,<sp/>PyTrace_RETURN,<sp/>result);</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tstate-&gt;c_profilefunc)</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstate-&gt;c_profilefunc(tstate-&gt;c_profileobj,<sp/>frame,<sp/>PyTrace_RETURN,<sp/>result);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FRAME_DEL(frame);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_LeaveTracing(tstate);</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_ErrRestoreInState(tstate,<sp/>type,<sp/>value,<sp/>traceback);</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>WITH_THREAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_TraceReturn(result,<sp/>nogil)\</highlight></codeline>
<codeline lineno="1449"><highlight class="preprocessor"><sp/><sp/>if<sp/>(likely(!__Pyx_use_tracing));<sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="1450"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(nogil)<sp/>{\</highlight></codeline>
<codeline lineno="1451"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(CYTHON_TRACE_NOGIL)<sp/>{\</highlight></codeline>
<codeline lineno="1452"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyThreadState<sp/>*tstate;\</highlight></codeline>
<codeline lineno="1453"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>state<sp/>=<sp/>PyGILState_Ensure();\</highlight></codeline>
<codeline lineno="1454"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstate<sp/>=<sp/>__Pyx_PyThreadState_Current;\</highlight></codeline>
<codeline lineno="1455"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(__Pyx_IsTracing(tstate,<sp/>0,<sp/>0))<sp/>{\</highlight></codeline>
<codeline lineno="1456"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_call_return_trace_func(tstate,<sp/>__pyx_frame,<sp/>(PyObject*)result);\</highlight></codeline>
<codeline lineno="1457"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1458"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(state);\</highlight></codeline>
<codeline lineno="1459"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1460"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="1461"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyThreadState*<sp/>tstate<sp/>=<sp/>__Pyx_PyThreadState_Current;\</highlight></codeline>
<codeline lineno="1462"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(__Pyx_IsTracing(tstate,<sp/>0,<sp/>0))<sp/>{\</highlight></codeline>
<codeline lineno="1463"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_call_return_trace_func(tstate,<sp/>__pyx_frame,<sp/>(PyObject*)result);\</highlight></codeline>
<codeline lineno="1464"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1465"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1466"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_TraceReturn(result,<sp/>nogil)\</highlight></codeline>
<codeline lineno="1469"><highlight class="preprocessor"><sp/><sp/>if<sp/>(likely(!__Pyx_use_tracing));<sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="1470"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>PyThreadState*<sp/>tstate<sp/>=<sp/>__Pyx_PyThreadState_Current;\</highlight></codeline>
<codeline lineno="1471"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(__Pyx_IsTracing(tstate,<sp/>0,<sp/>0))<sp/>{\</highlight></codeline>
<codeline lineno="1472"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_call_return_trace_func(tstate,<sp/>__pyx_frame,<sp/>(PyObject*)result);\</highlight></codeline>
<codeline lineno="1473"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1474"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyCodeObject<sp/>*__Pyx_createFrameCodeObject(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*funcname,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*srcfile,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>firstlineno);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_TraceSetupAndCall(PyCodeObject**<sp/>code,<sp/>PyFrameObject**<sp/>frame,<sp/>PyThreadState*<sp/>tstate,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*funcname,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*srcfile,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>firstlineno);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_TraceDeclarations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_TraceFrameInit(codeobj)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_TraceCall(funcname,<sp/>srcfile,<sp/>firstlineno,<sp/>nogil,<sp/>goto_error)<sp/><sp/><sp/>if<sp/>((1));<sp/>else<sp/>goto_error;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_TraceException()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_TraceReturn(result,<sp/>nogil)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_TRACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_call_line_trace_func(PyThreadState<sp/>*tstate,<sp/>PyFrameObject<sp/>*frame,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lineno)<sp/>{</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*type,<sp/>*value,<sp/>*traceback;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_ErrFetchInState(tstate,<sp/>&amp;type,<sp/>&amp;value,<sp/>&amp;traceback);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_PyFrame_SetLineNumber(frame,<sp/>lineno);</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_EnterTracing(tstate);</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>tstate-&gt;c_tracefunc(tstate-&gt;c_traceobj,<sp/>frame,<sp/>PyTrace_LINE,<sp/>NULL);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_LeaveTracing(tstate);</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(!ret))<sp/>{</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_ErrRestoreInState(tstate,<sp/>type,<sp/>value,<sp/>traceback);</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(type);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(value);</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(traceback);</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>WITH_THREAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_TraceLine(lineno,<sp/>nogil,<sp/>goto_error)\</highlight></codeline>
<codeline lineno="1505"><highlight class="preprocessor"><sp/><sp/>if<sp/>(likely(!__Pyx_use_tracing));<sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="1506"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(nogil)<sp/>{\</highlight></codeline>
<codeline lineno="1507"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(CYTHON_TRACE_NOGIL)<sp/>{\</highlight></codeline>
<codeline lineno="1508"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>ret<sp/>=<sp/>0;\</highlight></codeline>
<codeline lineno="1509"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyThreadState<sp/>*tstate;\</highlight></codeline>
<codeline lineno="1510"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>state<sp/>=<sp/>PyGILState_Ensure();\</highlight></codeline>
<codeline lineno="1511"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstate<sp/>=<sp/>__Pyx_PyThreadState_Current;\</highlight></codeline>
<codeline lineno="1512"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(__Pyx_IsTracing(tstate,<sp/>0,<sp/>0)<sp/>&amp;&amp;<sp/>tstate-&gt;c_tracefunc<sp/>&amp;&amp;<sp/>__pyx_frame-&gt;f_trace)<sp/>{\</highlight></codeline>
<codeline lineno="1513"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>__Pyx_call_line_trace_func(tstate,<sp/>__pyx_frame,<sp/>lineno);\</highlight></codeline>
<codeline lineno="1514"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1515"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(state);\</highlight></codeline>
<codeline lineno="1516"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(unlikely(ret))<sp/>goto_error;\</highlight></codeline>
<codeline lineno="1517"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1518"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="1519"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyThreadState*<sp/>tstate<sp/>=<sp/>__Pyx_PyThreadState_Current;\</highlight></codeline>
<codeline lineno="1520"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(__Pyx_IsTracing(tstate,<sp/>0,<sp/>0)<sp/>&amp;&amp;<sp/>tstate-&gt;c_tracefunc<sp/>&amp;&amp;<sp/>__pyx_frame-&gt;f_trace)<sp/>{\</highlight></codeline>
<codeline lineno="1521"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>ret<sp/>=<sp/>__Pyx_call_line_trace_func(tstate,<sp/>__pyx_frame,<sp/>lineno);\</highlight></codeline>
<codeline lineno="1522"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(unlikely(ret))<sp/>goto_error;\</highlight></codeline>
<codeline lineno="1523"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1524"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1525"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_TraceLine(lineno,<sp/>nogil,<sp/>goto_error)\</highlight></codeline>
<codeline lineno="1528"><highlight class="preprocessor"><sp/><sp/>if<sp/>(likely(!__Pyx_use_tracing));<sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="1529"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>PyThreadState*<sp/>tstate<sp/>=<sp/>__Pyx_PyThreadState_Current;\</highlight></codeline>
<codeline lineno="1530"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(__Pyx_IsTracing(tstate,<sp/>0,<sp/>0)<sp/>&amp;&amp;<sp/>tstate-&gt;c_tracefunc<sp/>&amp;&amp;<sp/>__pyx_frame-&gt;f_trace)<sp/>{\</highlight></codeline>
<codeline lineno="1531"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>ret<sp/>=<sp/>__Pyx_call_line_trace_func(tstate,<sp/>__pyx_frame,<sp/>lineno);\</highlight></codeline>
<codeline lineno="1532"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(unlikely(ret))<sp/>goto_error;\</highlight></codeline>
<codeline lineno="1533"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1534"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_TraceLine(lineno,<sp/>nogil,<sp/>goto_error)<sp/><sp/><sp/>if<sp/>((1));<sp/>else<sp/>goto_error;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyDictVersioning.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_USE_DICT_VERSIONS<sp/>&amp;&amp;<sp/>CYTHON_USE_TYPE_SLOTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PYX_DICT_VERSION_INIT<sp/><sp/>((PY_UINT64_T)<sp/>-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PYX_GET_DICT_VERSION(dict)<sp/><sp/>(((PyDictObject*)(dict))-&gt;ma_version_tag)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PYX_UPDATE_DICT_CACHE(dict,<sp/>value,<sp/>cache_var,<sp/>version_var)\</highlight></codeline>
<codeline lineno="1545"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(version_var)<sp/>=<sp/>__PYX_GET_DICT_VERSION(dict);\</highlight></codeline>
<codeline lineno="1546"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(cache_var)<sp/>=<sp/>(value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR,<sp/>DICT,<sp/>LOOKUP)<sp/>{\</highlight></codeline>
<codeline lineno="1548"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>PY_UINT64_T<sp/>__pyx_dict_version<sp/>=<sp/>0;\</highlight></codeline>
<codeline lineno="1549"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>PyObject<sp/>*__pyx_dict_cached_value<sp/>=<sp/>NULL;\</highlight></codeline>
<codeline lineno="1550"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(likely(__PYX_GET_DICT_VERSION(DICT)<sp/>==<sp/>__pyx_dict_version))<sp/>{\</highlight></codeline>
<codeline lineno="1551"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(VAR)<sp/>=<sp/>__pyx_dict_cached_value;\</highlight></codeline>
<codeline lineno="1552"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="1553"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(VAR)<sp/>=<sp/>__pyx_dict_cached_value<sp/>=<sp/>(LOOKUP);\</highlight></codeline>
<codeline lineno="1554"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_dict_version<sp/>=<sp/>__PYX_GET_DICT_VERSION(DICT);\</highlight></codeline>
<codeline lineno="1555"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1556"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PY_UINT64_T<sp/>__Pyx_get_tp_dict_version(PyObject<sp/>*obj);</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PY_UINT64_T<sp/>__Pyx_get_object_dict_version(PyObject<sp/>*obj);</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_object_dict_version_matches(PyObject*<sp/>obj,<sp/>PY_UINT64_T<sp/>tp_dict_version,<sp/>PY_UINT64_T<sp/>obj_dict_version);</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PYX_GET_DICT_VERSION(dict)<sp/><sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PYX_UPDATE_DICT_CACHE(dict,<sp/>value,<sp/>cache_var,<sp/>version_var)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR,<sp/>DICT,<sp/>LOOKUP)<sp/><sp/>(VAR)<sp/>=<sp/>(LOOKUP);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>GetModuleGlobalName.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_USE_DICT_VERSIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_GetModuleGlobalName(var,<sp/>name)<sp/><sp/>do<sp/>{\</highlight></codeline>
<codeline lineno="1569"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>PY_UINT64_T<sp/>__pyx_dict_version<sp/>=<sp/>0;\</highlight></codeline>
<codeline lineno="1570"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>PyObject<sp/>*__pyx_dict_cached_value<sp/>=<sp/>NULL;\</highlight></codeline>
<codeline lineno="1571"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(var)<sp/>=<sp/>(likely(__pyx_dict_version<sp/>==<sp/>__PYX_GET_DICT_VERSION(__pyx_d)))<sp/>?\</highlight></codeline>
<codeline lineno="1572"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(likely(__pyx_dict_cached_value)<sp/>?<sp/>__Pyx_NewRef(__pyx_dict_cached_value)<sp/>:<sp/>__Pyx_GetBuiltinName(name))<sp/>:\</highlight></codeline>
<codeline lineno="1573"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx__GetModuleGlobalName(name,<sp/>&amp;__pyx_dict_version,<sp/>&amp;__pyx_dict_cached_value);\</highlight></codeline>
<codeline lineno="1574"><highlight class="preprocessor">}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_GetModuleGlobalNameUncached(var,<sp/>name)<sp/><sp/>do<sp/>{\</highlight></codeline>
<codeline lineno="1576"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PY_UINT64_T<sp/>__pyx_dict_version;\</highlight></codeline>
<codeline lineno="1577"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>PyObject<sp/>*__pyx_dict_cached_value;\</highlight></codeline>
<codeline lineno="1578"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(var)<sp/>=<sp/>__Pyx__GetModuleGlobalName(name,<sp/>&amp;__pyx_dict_version,<sp/>&amp;__pyx_dict_cached_value);\</highlight></codeline>
<codeline lineno="1579"><highlight class="preprocessor">}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__Pyx__GetModuleGlobalName(PyObject<sp/>*name,<sp/>PY_UINT64_T<sp/>*dict_version,<sp/>PyObject<sp/>**dict_cached_value);</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_GetModuleGlobalName(var,<sp/>name)<sp/><sp/>(var)<sp/>=<sp/>__Pyx__GetModuleGlobalName(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_GetModuleGlobalNameUncached(var,<sp/>name)<sp/><sp/>(var)<sp/>=<sp/>__Pyx__GetModuleGlobalName(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyObject<sp/>*__Pyx__GetModuleGlobalName(PyObject<sp/>*name);</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyCFunctionFastCall.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_FAST_PYCCALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyObject<sp/>*__Pyx_PyCFunction_FastCall(PyObject<sp/>*func,<sp/>PyObject<sp/>**args,<sp/>Py_ssize_t<sp/>nargs);</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyCFunction_FastCall(func,<sp/>args,<sp/>nargs)<sp/><sp/>(assert(0),<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyFunctionFastCall.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_FAST_PYCALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyFunction_FastCall(func,<sp/>args,<sp/>nargs)\</highlight></codeline>
<codeline lineno="1597"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>__Pyx_PyFunction_FastCallDict((func),<sp/>(args),<sp/>(nargs),<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>1<sp/>||<sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x030600B1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__Pyx_PyFunction_FastCallDict(PyObject<sp/>*func,<sp/>PyObject<sp/>**args,<sp/>Py_ssize_t<sp/>nargs,<sp/>PyObject<sp/>*kwargs);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyFunction_FastCallDict(func,<sp/>args,<sp/>nargs,<sp/>kwargs)<sp/>_PyFunction_FastCallDict(func,<sp/>args,<sp/>nargs,<sp/>kwargs)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_BUILD_ASSERT_EXPR(cond)\</highlight></codeline>
<codeline lineno="1604"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(sizeof(char<sp/>[1<sp/>-<sp/>2*!(cond)])<sp/>-<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_MEMBER_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Py_MEMBER_SIZE(type,<sp/>member)<sp/>sizeof(((type<sp/>*)0)-&gt;member)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_FAST_PYCALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>__pyx_pyframe_localsplus_offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&quot;frameobject.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x030b00a6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>Py_BUILD_CORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>Py_BUILD_CORE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&quot;internal/pycore_frame.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pxy_PyFrame_Initialize_Offsets()\</highlight></codeline>
<codeline lineno="1618"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject)<sp/>==<sp/>offsetof(PyFrameObject,<sp/>f_localsplus)<sp/>+<sp/>Py_MEMBER_SIZE(PyFrameObject,<sp/>f_localsplus)),\</highlight></codeline>
<codeline lineno="1619"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(void)(__pyx_pyframe_localsplus_offset<sp/>=<sp/>((size_t)PyFrame_Type.tp_basicsize)<sp/>-<sp/>Py_MEMBER_SIZE(PyFrameObject,<sp/>f_localsplus)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__Pyx_PyFrame_GetLocalsplus(frame)\</highlight></codeline>
<codeline lineno="1621"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(assert(__pyx_pyframe_localsplus_offset),<sp/>(PyObject<sp/>**)(((char<sp/>*)(frame))<sp/>+<sp/>__pyx_pyframe_localsplus_offset))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CYTHON_FAST_PYCALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyObjectCall.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_CPYTHON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyObject*<sp/>__Pyx_PyObject_Call(PyObject<sp/>*func,<sp/>PyObject<sp/>*arg,<sp/>PyObject<sp/>*kw);</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyObject_Call(func,<sp/>arg,<sp/>kw)<sp/>PyObject_Call(func,<sp/>arg,<sp/>kw)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyObjectCall2Args.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_UNUSED<sp/>PyObject*<sp/>__Pyx_PyObject_Call2Args(PyObject*<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>PyObject*<sp/>arg1,<sp/>PyObject*<sp/>arg2);</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyObjectCallMethO.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_CPYTHON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyObject*<sp/>__Pyx_PyObject_CallMethO(PyObject<sp/>*func,<sp/>PyObject<sp/>*arg);</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyObjectCallOneArg.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyObject*<sp/>__Pyx_PyObject_CallOneArg(PyObject<sp/>*func,<sp/>PyObject<sp/>*arg);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyObjectCallNoArg.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_CPYTHON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyObject*<sp/>__Pyx_PyObject_CallNoArg(PyObject<sp/>*func);</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyObject_CallNoArg(func)<sp/>__Pyx_PyObject_Call(func,<sp/>__pyx_empty_tuple,<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>RaiseTooManyValuesToUnpack.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_RaiseTooManyValuesError(Py_ssize_t<sp/>expected);</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>RaiseNeedMoreValuesToUnpack.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_RaiseNeedMoreValuesError(Py_ssize_t<sp/>index);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>IterFinish.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_IterFinish(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>UnpackItemEndCheck.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_IternextUnpackEndCheck(PyObject<sp/>*retval,<sp/>Py_ssize_t<sp/>expected);</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>RaiseException.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_Raise(PyObject<sp/>*type,<sp/>PyObject<sp/>*value,<sp/>PyObject<sp/>*tb,<sp/>PyObject<sp/>*cause);</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>TypeImport.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__PYX_HAVE_RT_ImportType_proto_0_29_36</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PYX_HAVE_RT_ImportType_proto_0_29_36</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__STDC_VERSION__<sp/>&gt;=<sp/>201112L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdalign.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__STDC_VERSION__<sp/>&gt;=<sp/>201112L<sp/>||<sp/>__cplusplus<sp/>&gt;=<sp/>201103L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PYX_GET_STRUCT_ALIGNMENT_0_29_36(s)<sp/>alignof(s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PYX_GET_STRUCT_ALIGNMENT_0_29_36(s)<sp/>sizeof(void*)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>__Pyx_ImportType_CheckSize_0_29_36<sp/>{</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/>__Pyx_ImportType_CheckSize_Error_0_29_36<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/>__Pyx_ImportType_CheckSize_Warn_0_29_36<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/>__Pyx_ImportType_CheckSize_Ignore_0_29_36<sp/>=<sp/>2</highlight></codeline>
<codeline lineno="1680"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyTypeObject<sp/>*__Pyx_ImportType_0_29_36(PyObject*<sp/>module,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*module_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*class_name,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alignment,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>__Pyx_ImportType_CheckSize_0_29_36<sp/>check_size);</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>GetVTable.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>__Pyx_GetVtable(PyObject<sp/>*dict);</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Import.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__Pyx_Import(PyObject<sp/>*name,<sp/>PyObject<sp/>*from_list,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level);</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ImportFrom.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>__Pyx_ImportFrom(PyObject*<sp/>module,<sp/>PyObject*<sp/>name);</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>FetchCommonType.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyTypeObject*<sp/>__Pyx_FetchCommonType(PyTypeObject*<sp/>type);</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CythonFunctionShared.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_CyFunction_USED<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_CYFUNCTION_STATICMETHOD<sp/><sp/>0x01</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_CYFUNCTION_CLASSMETHOD<sp/><sp/><sp/>0x02</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_CYFUNCTION_CCLASS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x04</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_CyFunction_GetClosure(f)\</highlight></codeline>
<codeline lineno="1702"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(((__pyx_CyFunctionObject<sp/>*)<sp/>(f))-&gt;func_closure)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_CyFunction_GetClassObj(f)\</highlight></codeline>
<codeline lineno="1704"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(((__pyx_CyFunctionObject<sp/>*)<sp/>(f))-&gt;func_classobj)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_CyFunction_Defaults(type,<sp/>f)\</highlight></codeline>
<codeline lineno="1706"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((type<sp/>*)(((__pyx_CyFunctionObject<sp/>*)<sp/>(f))-&gt;defaults))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_CyFunction_SetDefaultsGetter(f,<sp/>g)\</highlight></codeline>
<codeline lineno="1708"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((__pyx_CyFunctionObject<sp/>*)<sp/>(f))-&gt;defaults_getter<sp/>=<sp/>(g)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/>PyCFunctionObject<sp/>func;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x030500A0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*func_weakreflist;</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*func_dict;</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*func_name;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*func_qualname;</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*func_doc;</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*func_globals;</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*func_code;</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*func_closure;</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*func_classobj;</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*defaults;</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>defaults_pyobjects;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>defaults_size;<sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>by<sp/>FusedFunction<sp/>for<sp/>copying<sp/>defaults</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags;</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*defaults_tuple;</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*defaults_kwdict;</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*(*defaults_getter)(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*func_annotations;</highlight></codeline>
<codeline lineno="1730"><highlight class="normal">}<sp/>__pyx_CyFunctionObject;</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyTypeObject<sp/>*__pyx_CyFunctionType<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_CyFunction_Check(obj)<sp/><sp/>(__Pyx_TypeCheck(obj,<sp/>__pyx_CyFunctionType))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__Pyx_CyFunction_Init(__pyx_CyFunctionObject*<sp/>op,<sp/>PyMethodDef<sp/>*ml,</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,<sp/>PyObject*<sp/>qualname,</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*module,<sp/>PyObject<sp/>*globals,</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>code);</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*__Pyx_CyFunction_InitDefaults(PyObject<sp/>*m,</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pyobjects);</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_CyFunction_SetDefaultsTuple(PyObject<sp/>*m,</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*tuple);</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_CyFunction_SetDefaultsKwDict(PyObject<sp/>*m,</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*dict);</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_CyFunction_SetAnnotationsDict(PyObject<sp/>*m,</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*dict);</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pyx_CyFunction_init(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CythonFunction.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__Pyx_CyFunction_New(PyMethodDef<sp/>*ml,</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,<sp/>PyObject*<sp/>qualname,</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*closure,</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*module,<sp/>PyObject<sp/>*globals,</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>code);</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CLineInTraceback.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CYTHON_CLINE_IN_TRACEBACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_CLineForTraceback(tstate,<sp/>c_line)<sp/><sp/>(((CYTHON_CLINE_IN_TRACEBACK))<sp/>?<sp/>c_line<sp/>:<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_CLineForTraceback(PyThreadState<sp/>*tstate,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c_line);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CodeObjectCache.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/>PyCodeObject*<sp/>code_object;</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code_line;</highlight></codeline>
<codeline lineno="1767"><highlight class="normal">}<sp/>__Pyx_CodeObjectCacheEntry;</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__Pyx_CodeObjectCache<sp/>{</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_count;</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_CodeObjectCacheEntry*<sp/>entries;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__Pyx_CodeObjectCache<sp/>__pyx_code_cache<sp/>=<sp/>{0,0,NULL};</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry*<sp/>entries,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code_line);</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyCodeObject<sp/>*__pyx_find_code_object(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code_line);</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__pyx_insert_code_object(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code_line,<sp/>PyCodeObject*<sp/>code_object);</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>AddTraceback.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_AddTraceback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*funcname,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c_line,</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>py_line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename);</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CppExceptionConversion.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__Pyx_CppExn2PyErr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;new&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeinfo&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ios&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_CppExn2PyErr()<sp/>{</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyErr_Occurred())</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/></highlight><highlight class="comment">//<sp/>let<sp/>the<sp/>latest<sp/>Python<sp/>exn<sp/>pass<sp/>through<sp/>and<sp/>ignore<sp/>the<sp/>current<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::bad_alloc&amp;<sp/>exn)<sp/>{</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_MemoryError,<sp/>exn.what());</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::bad_cast&amp;<sp/>exn)<sp/>{</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_TypeError,<sp/>exn.what());</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::bad_typeid&amp;<sp/>exn)<sp/>{</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_TypeError,<sp/>exn.what());</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::domain_error&amp;<sp/>exn)<sp/>{</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_ValueError,<sp/>exn.what());</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::invalid_argument&amp;<sp/>exn)<sp/>{</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_ValueError,<sp/>exn.what());</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::ios_base::failure&amp;<sp/>exn)<sp/>{</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_IOError,<sp/>exn.what());</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::out_of_range&amp;<sp/>exn)<sp/>{</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_IndexError,<sp/>exn.what());</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::overflow_error&amp;<sp/>exn)<sp/>{</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_OverflowError,<sp/>exn.what());</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::range_error&amp;<sp/>exn)<sp/>{</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_ArithmeticError,<sp/>exn.what());</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::underflow_error&amp;<sp/>exn)<sp/>{</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_ArithmeticError,<sp/>exn.what());</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception&amp;<sp/>exn)<sp/>{</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_RuntimeError,<sp/>exn.what());</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_RuntimeError,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>exception&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1821"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>GCCDiagnostics.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>(__GNUC__<sp/>&gt;<sp/>4<sp/>||<sp/>(__GNUC__<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>__GNUC_MINOR__<sp/>&gt;=<sp/>6))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_HAS_GCC_DIAGNOSTIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CIntToPy.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyObject*<sp/>__Pyx_PyInt_From_long(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CIntFromPy.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>__Pyx_PyInt_As_long(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CIntFromPy.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_PyInt_As_int(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>FastTypeChecks.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_CPYTHON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_TypeCheck(obj,<sp/>type)<sp/>__Pyx_IsSubtype(Py_TYPE(obj),<sp/>(PyTypeObject<sp/>*)type)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_IsSubtype(PyTypeObject<sp/>*a,<sp/>PyTypeObject<sp/>*b);</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_PyErr_GivenExceptionMatches(PyObject<sp/>*err,<sp/>PyObject<sp/>*type);</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_PyErr_GivenExceptionMatches2(PyObject<sp/>*err,<sp/>PyObject<sp/>*type1,<sp/>PyObject<sp/>*type2);</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_TypeCheck(obj,<sp/>type)<sp/>PyObject_TypeCheck(obj,<sp/>(PyTypeObject<sp/>*)type)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyErr_GivenExceptionMatches(err,<sp/>type)<sp/>PyErr_GivenExceptionMatches(err,<sp/>type)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyErr_GivenExceptionMatches2(err,<sp/>type1,<sp/>type2)<sp/>(PyErr_GivenExceptionMatches(err,<sp/>type1)<sp/>||<sp/>PyErr_GivenExceptionMatches(err,<sp/>type2))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyException_Check(obj)<sp/>__Pyx_TypeCheck(obj,<sp/>PyExc_Exception)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CheckBinaryVersion.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_check_binary_version(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"></highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>FunctionImport.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_ImportFunction_0_29_36(PyObject<sp/>*module,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*funcname,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(**f)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig);</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>InitStrings.proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_InitStrings(__Pyx_StringTabEntry<sp/>*t);</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Module<sp/>declarations<sp/>from<sp/>&apos;imate.functions.functions&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Module<sp/>declarations<sp/>from<sp/>&apos;imate.functions.py_functions&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyTypeObject<sp/>*__pyx_ptype_5imate_9functions_12py_functions_pyFunction<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Module<sp/>declarations<sp/>from<sp/>&apos;imate.functions&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Module<sp/>declarations<sp/>from<sp/>&apos;imate._trace_estimator.trace_estimator&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*(*__pyx_f_5imate_16_trace_estimator_15trace_estimator_trace_estimator)(PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__pyx_obj_5imate_9functions_12py_functions_pyFunction<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pyx_skip_dispatch);<sp/></highlight><highlight class="comment">/*proto*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Module<sp/>declarations<sp/>from<sp/>&apos;imate._trace_estimator&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Module<sp/>declarations<sp/>from<sp/>&apos;imate.logdet._slq_method&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_MODULE_NAME<sp/>&quot;imate.logdet._slq_method&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pyx_module_is_main_imate__logdet___slq_method;</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pyx_module_is_main_imate__logdet___slq_method<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Implementation<sp/>of<sp/>&apos;imate.logdet._slq_method&apos;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_builtin_TypeError;</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_A[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_p[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_gpu[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;gpu&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_gram[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;gram&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_info[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;info&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_main[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;__main__&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_name[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;__name__&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_plot[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;plot&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_test[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;__test__&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_trace[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;trace&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_import[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;__import__&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_verbose[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;verbose&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_TypeError[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TypeError&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_functions[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;functions&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_error_atol[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;error_atol&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_error_rtol[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;error_rtol&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_parameters[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;parameters&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_pyFunction[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;pyFunction&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_pyx_vtable[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;__pyx_vtable__&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_slq_method[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;slq_method&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_lanczos_tol[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;lanczos_tol&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_num_threads[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;num_threads&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_return_info[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;return_info&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_orthogonalize[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;orthogonalize&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_lanczos_degree[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;lanczos_degree&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_check_arguments[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;check_arguments&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_matrix_function[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;matrix_function&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_max_num_samples[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;max_num_samples&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_min_num_samples[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;min_num_samples&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_num_gpu_devices[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;num_gpu_devices&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_trace_estimator[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;_trace_estimator&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_confidence_level[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;confidence_level&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_trace_estimator_2[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;trace_estimator&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_cline_in_traceback[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cline_in_traceback&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_py_matrix_function[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;py_matrix_function&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_slq_method_line_24[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;slq_method<sp/>(line<sp/>24)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_imate_logdet__slq_method[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;imate.logdet._slq_method&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_outlier_significance_level[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;outlier_significance_level&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_imate_logdet__slq_method_pyx[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;imate/logdet/_slq_method.pyx&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_return_info_should_be_boolean[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\&quot;return_info\&quot;<sp/>should<sp/>be<sp/>boolean.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_k_Log_determinant_of_non_singular[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/>Log-determinant<sp/>of<sp/>non-singular<sp/>matrix<sp/>or<sp/>linear<sp/>operator<sp/>using<sp/>stochastic\n<sp/><sp/><sp/><sp/>Lanczos<sp/>quadrature<sp/>method.\n\n<sp/><sp/><sp/><sp/>Given<sp/>the<sp/>symmetric<sp/>matrix<sp/>or<sp/>linear<sp/>operator<sp/>:math:`\\mathbf{A}`<sp/>and<sp/>the\n<sp/><sp/><sp/><sp/>real<sp/>exponent<sp/>:math:`p`,<sp/>the<sp/>following<sp/>is<sp/>computed:\n\n<sp/><sp/><sp/><sp/>..<sp/>math::\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\mathrm{logdet}<sp/>\\left(\\mathbf{A}^p<sp/>\\right)<sp/>=<sp/>p<sp/>\\log_e<sp/>\\vert\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\det<sp/>(\\mathbf{A})<sp/>\\vert.\n\n<sp/><sp/><sp/><sp/>If<sp/>``gram``<sp/>is<sp/>`True`,<sp/>then<sp/>:math:`\\mathbf{A}`<sp/>in<sp/>the<sp/>above<sp/>is<sp/>replaced<sp/>by\n<sp/><sp/><sp/><sp/>the<sp/>Gramian<sp/>matrix<sp/>:math:`\\mathbf{A}^{\\intercal}<sp/>\\mathbf{A}`.<sp/>In<sp/>this\n<sp/><sp/><sp/><sp/>case,<sp/>if<sp/>the<sp/>matrix<sp/>:math:`\\mathvf{A}`<sp/>is<sp/>square,<sp/>then<sp/>the<sp/>following<sp/>is\n<sp/><sp/><sp/><sp/>instead<sp/>computed:\n\n<sp/><sp/><sp/><sp/>..<sp/>math::\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\mathrm{logdet}<sp/>\\left((\\mathbf{A}^{\\intercal}\\mathbf{A})^p\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\right)<sp/>=<sp/>2p<sp/>\\log_e<sp/>\\vert<sp/>\\det<sp/>(\\mathbf{A})<sp/>\\vert.\n\n<sp/><sp/><sp/><sp/>If<sp/>:math:`\\mathbf{A}<sp/>=<sp/>\\mathbf{A}(t)`<sp/>is<sp/>a<sp/>linear<sp/>operator<sp/>of<sp/>the<sp/>class\n<sp/><sp/><sp/><sp/>:class:`imate.AffineMatrixFunction`<sp/>with<sp/>the<sp/>parameter<sp/>:math:`t`,<sp/>then<sp/>for\n<sp/><sp/><sp/><sp/>an<sp/>input<sp/><sp/>tuple<sp/>:math:`t<sp/>=<sp/>(t_1,<sp/>\\dots,<sp/>t_q)`,<sp/>an<sp/>array<sp/>output<sp/>of<sp/>the\n<sp/><sp/><sp/><sp/>size<sp/>:math:`q`<sp/>is<sp/>returned,<sp/>namely:\n\n<sp/><sp/><sp/><sp/>..<sp/>math::\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\mathrm{logdet}<sp/>\\left((\\mathbf{A}(t_i))^p<sp/>\\right),\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\quad<sp/>i=1,<sp/>\\dots,<sp/>q.\n\n<sp/><sp/><sp/><sp/>Parameters\n<sp/><sp/><sp/><sp/>----------\n\n<sp/><sp/><sp/><sp/>A<sp/>:<sp/>numpy.ndarray,<sp/>scipy.sparse,<sp/>:class:`imate.Matrix`,<sp/>or<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:class:`imate.AffineMatrixFunction`\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>non-singular<sp/>sparse<sp/>or<sp/>dense<sp/>matrix<sp/>or<sp/>linear<sp/>operator.<sp/>If<sp/>``gram``\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>`False`,<sp/>then<sp/>`A`<sp/>should<sp/>be<sp/>symmetric.\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>..<sp/>warning::\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>symmetry<sp/>of<sp/>`A`<sp/>is<sp/>not<sp/>pre-checked<sp/>by<sp/>this<sp/>function.<sp/>If\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``gram``<sp/>is<sp/>`False`,<sp/>make<sp/>sure<sp/>`A`<sp/>is<sp/>symmetric.\n\n<sp/><sp/><sp/><sp/>gram<sp/>:<sp/>bool,<sp/>default=False\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>`True`,<sp/>the<sp/>log-determinant<sp/>of<sp/>the<sp/>Gramian<sp/>matrix,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`(\\mathbf{A}^{\\intercal}\\mathbf{A})^p`,<sp/>is<sp/>computed.<sp/>The\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Gramian<sp/>matrix<sp/>itself<sp/>is<sp/>not<sp/>directly<sp/>computed.<sp/>If<sp/>`False`,<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log-determinant<sp/>of<sp/>:math:`\\mathbf{A}^p`<sp/>is<sp/>computed.\n\n<sp/><sp/><sp/><sp/>p<sp/>:<sp/>float,<sp/>default=1.0\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>real<sp/>exponent<sp/>:&quot;</highlight><highlight class="stringliteral">&quot;math:`p`<sp/>in<sp/>:math:`\\mathbf{A}^p`.\n\n<sp/><sp/><sp/><sp/>return_info<sp/>:<sp/>bool,<sp/>default=False\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>`True`,<sp/>this<sp/>function<sp/>also<sp/>returns<sp/>a<sp/>dictionary<sp/>containing\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>information<sp/>about<sp/>the<sp/>inner<sp/>computation,<sp/>such<sp/>as<sp/>process<sp/>time,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>algorithm<sp/>settings,<sp/>etc.\n\n<sp/><sp/><sp/><sp/>parameters<sp/>:<sp/>array_like<sp/>[`float`],<sp/>default=one\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>argument<sp/>is<sp/>relevant<sp/>if<sp/>`A`<sp/>is<sp/>a<sp/>type<sp/>of\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:class:`AffineMatrixFunction`.<sp/>By<sp/>this<sp/>argument,<sp/>multiple<sp/>inquiries,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`(t_1,<sp/>\\dots,<sp/>t_q)`,<sp/>can<sp/>be<sp/>passed<sp/>to<sp/>the<sp/>parameter<sp/>:math:`t`<sp/>of\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>linear<sp/>operator<sp/>:math:`\\mathbf{A}(t)`.<sp/>The<sp/>output<sp/>of<sp/>this<sp/>function\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>becomes<sp/>an<sp/>array<sp/>of<sp/>the<sp/>size<sp/>:math:`q`<sp/>corresponding<sp/>to<sp/>each<sp/>of<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>matrices<sp/>:math:`\\mathbf{A}(t_i)`.\n\n<sp/><sp/><sp/><sp/>min_num_samples<sp/>:<sp/>int,<sp/>default=10\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>minimum<sp/>number<sp/>of<sp/>Monte-Carlo<sp/>samples.<sp/>If<sp/>the<sp/>convergence<sp/>criterion\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>reached<sp/>before<sp/>finishing<sp/>the<sp/>minimum<sp/>number<sp/>of<sp/>iterations,<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterations<sp/>are<sp/>forced<sp/>to<sp/>continue<sp/>till<sp/>the<sp/>minimum<sp/>number<sp/>of<sp/>iterations\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>finished.<sp/>This<sp/>value<sp/>should<sp/>be<sp/>smaller<sp/>than\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``maximum_num_samples``.\n\n<sp/><sp/><sp/><sp/>max_num_samples<sp/>:<sp/>int,<sp/>default=50\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>maximum<sp/>number<sp/>of<sp/>Monte-Carlo<sp/>samples.<sp/>If<sp/>the<sp/>convergence<sp/>criterion\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>not<sp/>reached<sp/>by<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>iterations,<sp/>the<sp/>iterations<sp/>are\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forced<sp/>to<sp/>stop.<sp/>This<sp/>value<sp/>should<sp/>be<sp/>larger<sp/>than\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``minimum_num_samples``.\n\n<sp/><sp/><sp/><sp/>error_atol<sp/>:<sp/>float,<sp/>default=None\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tolerance<sp/>of<sp/>the<sp/>absolute<sp/>error<sp/>of<sp/>convergence<sp/>of<sp/>the<sp/>output.<sp/>Once<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>of<sp/>convergence<sp/>reaches<sp/>``error_atol<sp/>+<sp/>error_rtol<sp/>*<sp/>output``,<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iteration<sp/>is<sp/>terminated.<sp/>If<sp/>the<sp/>convergence<sp/>criterion<sp/>is<sp/>not<sp/>met<sp/>by<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tolerance,<sp/>then<sp/>the<sp/>iterations<sp/>continue<sp/>till<sp/>reaching\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``max_num_samples``<sp/>iterations.<sp/>If<sp/>`None`,<sp/>the<sp/>termination<sp/>criterion\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>does<sp/>not<sp/>depend<sp/>on<sp/>this<sp/>parameter.\n\n<sp/><sp/><sp/><sp/>error_rtol<sp/>:<sp/>float,<sp/>default=None\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tolerance<sp/>of<sp/>the<sp/>relative<sp/>error<sp/>of<sp/>convergence<sp/>of<sp/>the<sp/>output.<sp/>Once<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>of<sp/>conve&quot;</highlight><highlight class="stringliteral">&quot;rgence<sp/>reaches<sp/>``error_atol<sp/>+<sp/>error_rtol<sp/>*<sp/>output``,<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iteration<sp/>is<sp/>terminated.<sp/>If<sp/>the<sp/>convergence<sp/>criterion<sp/>is<sp/>not<sp/>met<sp/>by<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tolerance,<sp/>then<sp/>the<sp/>iterations<sp/>continue<sp/>till<sp/>reaching\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``max_num_samples``<sp/>iterations.<sp/>If<sp/>`None`,<sp/>the<sp/>termination<sp/>criterion\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>does<sp/>not<sp/>depend<sp/>on<sp/>this<sp/>parameter.\n\n<sp/><sp/><sp/><sp/>confidence_level<sp/>:<sp/>float,<sp/>default=0.95\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Confidence<sp/>level<sp/>of<sp/>error,<sp/>which<sp/>is<sp/>a<sp/>number<sp/>between<sp/>`0`<sp/>and<sp/>`1`.<sp/>The\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>of<sp/>convergence<sp/>of<sp/>the<sp/>population<sp/>of<sp/>samples<sp/>is<sp/>defined<sp/>by<sp/>their\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>standard<sp/>deviation<sp/>times<sp/>the<sp/>Z-score,<sp/>which<sp/>depends<sp/>on<sp/>the<sp/>confidence\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>level.<sp/>See<sp/>notes<sp/>below<sp/>for<sp/>details.\n\n<sp/><sp/><sp/><sp/>outlier_significance_level<sp/>:<sp/>float,<sp/>default=0.001\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>One<sp/>minus<sp/>the<sp/>confidence<sp/>level<sp/>of<sp/>the<sp/>uncertainty<sp/>of<sp/>the<sp/>outliers<sp/>of\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>output<sp/>samples.<sp/>This<sp/>is<sp/>a<sp/>number<sp/>between<sp/>`0`<sp/>and<sp/>`1`.\n\n<sp/><sp/><sp/><sp/>lanczos_degree<sp/>:<sp/>int,<sp/>default=20\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>Lanczos<sp/>recursive<sp/>iterations.<sp/>The<sp/>larger<sp/>Lanczos<sp/>degree\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leads<sp/>to<sp/>better<sp/>estimation.<sp/>The<sp/>computational<sp/>cost<sp/>quadratically\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>increases<sp/>with<sp/>the<sp/>Lanczos<sp/>degree.\n\n<sp/><sp/><sp/><sp/>lanczos_tol<sp/>:<sp/>float,<sp/>default=None\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>tolerance<sp/>to<sp/>stop<sp/>the<sp/>Lanczos<sp/>recursive<sp/>iterations<sp/>before\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>end<sp/>of<sp/>iterations<sp/>reached.<sp/>If<sp/>the<sp/>tolerance<sp/>is<sp/>not<sp/>met,<sp/>all<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterations<sp/>(total<sp/>of<sp/>``lanczos_degree``<sp/>iterations)<sp/>continue<sp/>till<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end.<sp/>If<sp/>set<sp/>to<sp/>`None`<sp/>(default<sp/>value),<sp/>the<sp/>machine&apos;<sp/>epsilon<sp/>precision\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>used.<sp/>The<sp/>machine&apos;s<sp/>epsilon<sp/>precision<sp/>is<sp/>as<sp/>follows:\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>For<sp/>32-bit,<sp/>machine<sp/>precision<sp/>is\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`2^{-23}<sp/>=<sp/>1.1920929<sp/>\\times<sp/>10^{-7}`.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>For<sp/>64-bit,<sp/>machine<sp/>precision<sp/>is\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`2^{-52}<sp/>=<sp/>2.220446049250313<sp/>\\times<sp/>10^{-16}`,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>For<sp/>128-bit,<sp/>machine<sp/>precision<sp/>is\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`2^{-63}<sp/>=<sp/>-1.084202172485504434<sp/>\\times<sp/>10^{-19}`.\n\n<sp/><sp/><sp/><sp/>orthogonalize<sp/>:<sp/>int,<sp/>default=0\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Indicates<sp/>whether<sp/>to<sp/>re-orthogonalize<sp/>the<sp/>eigenvectors<sp/>during<sp/>Lanczos\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recursive<sp/>iterations.\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>set<sp/>to<sp/>`0&quot;</highlight><highlight class="stringliteral">&quot;`,<sp/>no<sp/>orthogonalization<sp/>is<sp/>performed.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>set<sp/>to<sp/>a<sp/>negative<sp/>integer<sp/>or<sp/>an<sp/>integer<sp/>larger<sp/>than\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``lanczos_degree``,<sp/>a<sp/>newly<sp/>computed<sp/>eigenvector<sp/>is<sp/>orthogonalized\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>against<sp/>all<sp/>the<sp/>previous<sp/>eigenvectors<sp/>(also<sp/>known<sp/>as\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>`full<sp/>reorthogonalization`).\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>set<sp/>to<sp/>a<sp/>positive<sp/>integer,<sp/>say<sp/>`q`,<sp/>but<sp/>less<sp/>than\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``lanczos_degree``,<sp/>the<sp/>newly<sp/>computed<sp/>eigenvector<sp/>is\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orthogonalized<sp/>against<sp/>a<sp/>window<sp/>of<sp/>last<sp/>`q`<sp/>previous<sp/>eigenvectors\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(known<sp/>as<sp/>`partial<sp/>reorthogonalization`).\n\n<sp/><sp/><sp/><sp/>num_threads<sp/>:<sp/>int,<sp/>default=0\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Number<sp/>of<sp/>processor<sp/>threads<sp/>to<sp/>employ<sp/>for<sp/>parallel<sp/>computation<sp/>on<sp/>CPU.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>set<sp/>to<sp/>`0`<sp/>or<sp/>a<sp/>number<sp/>larger<sp/>than<sp/>the<sp/>available<sp/>number<sp/>of<sp/>threads,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all<sp/>threads<sp/>of<sp/>the<sp/>processor<sp/>are<sp/>used.<sp/>The<sp/>parallelization<sp/>is<sp/>performed\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>over<sp/>the<sp/>Monte-Carlo<sp/>iterations.\n\n<sp/><sp/><sp/><sp/>num_gpu_devices<sp/>:<sp/>int<sp/>default=0\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Number<sp/>of<sp/>GPU<sp/>devices<sp/>(if<sp/>available)<sp/>to<sp/>use<sp/>for<sp/>parallel<sp/>multi-GPU\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processing.<sp/>If<sp/>set<sp/>to<sp/>`0`,<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>available<sp/>GPU<sp/>devices\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>used.<sp/>This<sp/>parameter<sp/>is<sp/>relevant<sp/>if<sp/>``gpu``<sp/>is<sp/>`True`.\n\n<sp/><sp/><sp/><sp/>gpu<sp/>:<sp/>bool,<sp/>default=False\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>`True`,<sp/>the<sp/>computations<sp/>are<sp/>performed<sp/>on<sp/>GPU<sp/>devices<sp/>where<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number<sp/>of<sp/>devices<sp/>can<sp/>be<sp/>set<sp/>by<sp/>``num_gpu_devices``.<sp/>If<sp/>no<sp/>GPU<sp/>device\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>found,<sp/>it<sp/>raises<sp/>an<sp/>error.\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>..<sp/>note::\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>performing<sp/>`repetitive`<sp/>computation<sp/>on<sp/>the<sp/>same<sp/>matrix<sp/>on<sp/>GPU,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>is<sp/>recommended<sp/>to<sp/>input<sp/>`A`<sp/>as<sp/>an<sp/>instance<sp/>of\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:class:`imate.Matrix`<sp/>class<sp/>instead<sp/>of<sp/>`numpy`<sp/>or<sp/>`scipy`<sp/>matrices.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>examples<sp/>below<sp/>for<sp/>clarification.\n\n<sp/><sp/><sp/><sp/>verbose<sp/>:<sp/>bool,<sp/>default=False\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Prints<sp/>extra<sp/>information<sp/>about<sp/>the<sp/>computations.\n\n<sp/><sp/><sp/><sp/>plot<sp/>:<sp/>bool,<sp/>default=False\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Plots<sp/>convergence<sp/>of<sp/>samples.<sp/>For<sp/>this,<sp/>the<sp/>packages<sp/>`matplotlib`<sp/>and\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>`seaborn`<sp/>should<sp/>be<sp/>installed.<sp/>If<sp/>no<sp/>display<sp/>is<sp/>available<sp/>(such<sp/>as\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>running<sp/>this<sp/>code<sp/>on<sp/>remote<sp/>machines),<sp/>the<sp/>plots<sp/>are<sp/>saved&quot;</highlight><highlight class="stringliteral">&quot;<sp/>as<sp/>an<sp/>`SVG`\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file<sp/>in<sp/>the<sp/>current<sp/>directory.\n\n<sp/><sp/><sp/><sp/>Returns\n<sp/><sp/><sp/><sp/>-------\n\n<sp/><sp/><sp/><sp/>logdet<sp/>:<sp/>float<sp/>or<sp/>numpy.array\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log-determinant<sp/>of<sp/>`A`.<sp/>If<sp/>`A`<sp/>is<sp/>of<sp/>type\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:class:`imate.AffineMatrixFunction`<sp/>with<sp/>an<sp/>array<sp/>of<sp/>``parameters``,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>then<sp/>the<sp/>output<sp/>is<sp/>an<sp/>array.\n\n<sp/><sp/><sp/><sp/>info<sp/>:<sp/>dict\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Only<sp/>if<sp/>``return_info``<sp/>is<sp/>`True`)<sp/>A<sp/>dictionary<sp/>of<sp/>information<sp/>with\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>following.\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``matrix``:\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``data_type``:<sp/>`str`,<sp/>{`float32`,<sp/>`float64`,<sp/>`float128`}.<sp/>Type<sp/>of\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>matrix<sp/>data.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``gram``:<sp/>`bool`,<sp/>whether<sp/>the<sp/>matrix<sp/>`A`<sp/>or<sp/>its<sp/>Gramian<sp/>is\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>considered.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``exponent``:<sp/>`float`,<sp/>the<sp/>exponent<sp/>`p`<sp/>in<sp/>:math:`\\mathbf{A}^p`.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``size``:<sp/>(int,<sp/>int)<sp/>The<sp/>size<sp/>of<sp/>matrix<sp/>`A`.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``sparse``:<sp/>`bool`,<sp/>whether<sp/>the<sp/>matrix<sp/>`A`<sp/>is<sp/>sparse<sp/>or<sp/>dense.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``nnz``:<sp/>`int`,<sp/>if<sp/>`A`<sp/>is<sp/>sparse,<sp/>the<sp/>number<sp/>of<sp/>non-zero<sp/>elements\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>`A`.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``density``:<sp/>`float`,<sp/>if<sp/>`A`<sp/>is<sp/>sparse,<sp/>the<sp/>density<sp/>of<sp/>`A`,<sp/>which\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>the<sp/>`nnz`<sp/>divided<sp/>by<sp/>size<sp/>squared.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``num_inquiries``:<sp/>`int`,<sp/>the<sp/>size<sp/>of<sp/>inquiries<sp/>of<sp/>each<sp/>parameter\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>linear<sp/>operator<sp/>`A`.<sp/>If<sp/>`A`<sp/>is<sp/>a<sp/>matrix,<sp/>this<sp/>is<sp/>always\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>`1`.<sp/>If<sp/>`A`<sp/>is<sp/>a<sp/>type<sp/>of<sp/>:class:`AffineMatrixFunction`,<sp/>this\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>is<sp/>the<sp/>number<sp/>of<sp/>:math:`t_i`<sp/>parameters.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``num_operator_parameters``:<sp/>`int`,<sp/>number<sp/>of<sp/>parameters<sp/>of<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator<sp/>`A`.<sp/>If<sp/>`A`<sp/>a<sp/>type<sp/>of<sp/>:class:`AffineMatrixFunction`,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>then<sp/>this<sp/>value<sp/>is<sp/>`1`<sp/>corresponding<sp/>to<sp/>one<sp/>parameter<sp/>:math:`t`\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>the<sp/>affine<sp/>function<sp/>`t<sp/>\\mapsto<sp/>\\mathbf{A}<sp/>+<sp/>t<sp/>\\mathbf{B}`.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``parameters``:<sp/>`list`<sp/>[`float`],<sp/>the<sp/>parameters<sp/>of<sp/>the<sp/>linear\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator<sp/>`A`.\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``convergence``:\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``all_converged``:<sp/>`bool`,<sp/>whether<sp/>the<sp/>Monte-Carlo<sp/>sampling\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>converged<sp/>for<sp/>all<sp/>requested<sp/>parameters<sp/>:math:`t_i`.<sp/>If<sp/>all&quot;</highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entries<sp/>of<sp/>the<sp/>array<sp/>for<sp/>``converged``<sp/>is<sp/>`True``,<sp/>then<sp/>this\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>is<sp/>also<sp/>``True``.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``converged``:<sp/>`array`<sp/>[`bool`],<sp/>whether<sp/>the<sp/>Monte-Carlo<sp/>sampling\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>converged<sp/>for<sp/>each<sp/>of<sp/>the<sp/>requested<sp/>parameters<sp/>:math:`t_i`.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convergence<sp/>is<sp/>defined<sp/>based<sp/>on<sp/>a<sp/>termination<sp/>criterion,<sp/>such\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>as<sp/>absolute<sp/>or<sp/>relative<sp/>error.<sp/>If<sp/>the<sp/>iterations<sp/>terminated<sp/>due\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>reaching<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>samples,<sp/>this<sp/>value<sp/>is<sp/>`False`.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``min_num_samples``:<sp/>`int`,<sp/>the<sp/>minimum<sp/>number<sp/>of<sp/>Monte-Carlo\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterations.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``max_num_samples``:<sp/>`int`,<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>Monte-Carlo\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterations.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``num_outliers``:<sp/>`int`,<sp/>number<sp/>of<sp/>outliers<sp/>found<sp/>during<sp/>search\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>outliers<sp/>among<sp/>the<sp/>array<sp/>of<sp/>output.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``num_samples_used``:<sp/>`int`,<sp/>number<sp/>of<sp/>Monte-Carlo<sp/>samples<sp/>used\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>produce<sp/>the<sp/>output.<sp/>This<sp/>is<sp/>the<sp/>total<sp/>number<sp/>of<sp/>iterations\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minus<sp/>the<sp/>number<sp/>of<sp/>outliers.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``samples``:<sp/>`array`<sp/>[`float`],<sp/>an<sp/>array<sp/>of<sp/>the<sp/>size\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>`max_num_samples`.<sp/>The<sp/>first<sp/>few<sp/>entries<sp/>(`num_samples_used`)<sp/>of\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>array<sp/>are<sp/>the<sp/>output<sp/>results<sp/>of<sp/>the<sp/>Monte-Carlo<sp/>sampling.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>average<sp/>of<sp/>these<sp/>samples<sp/>is<sp/>the<sp/>final<sp/>result.<sp/>The<sp/>rest<sp/>of\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>array<sp/>is<sp/>`nan`.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``samples_mean``:<sp/>`float`,<sp/>mean<sp/>of<sp/>the<sp/>`samples`<sp/>array,<sp/>excluding\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>`nan`<sp/>values.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``samples_processed_order``:<sp/>`array`<sp/>[`int`],<sp/>in<sp/>parallel\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processing,<sp/>samples<sp/>are<sp/>processed<sp/>in<sp/>non-sequential<sp/>order.<sp/>This\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array,<sp/>which<sp/>has<sp/>the<sp/>same<sp/>size<sp/>as<sp/>`samples`,<sp/>keeps<sp/>track<sp/>of<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>order<sp/>in<sp/>which<sp/>each<sp/>sample<sp/>is<sp/>processed.\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``error``:\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``absolute_error``:<sp/>`float`,<sp/>the<sp/>absolute<sp/>error<sp/>of<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convergence<sp/>of<sp/>samples.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``confidence_level``:<sp/>`float`,<sp/>the<sp/>confidence<sp/>level<sp/>used<sp/>to&quot;</highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calculate<sp/>the<sp/>error<sp/>from<sp/>standard<sp/>deviation<sp/>of<sp/>samples.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``error_atol``:<sp/>`float`,<sp/>the<sp/>tolerance<sp/>of<sp/>absolute<sp/>error<sp/>of<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convergence<sp/>of<sp/>samples.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``error_rtol``:<sp/>`float`,<sp/>the<sp/>tolerance<sp/>of<sp/>relative<sp/>error<sp/>of<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convergence<sp/>of<sp/>samples.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``outlier_significance_level``:<sp/>`float`,<sp/>the<sp/>significance<sp/>level\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used<sp/>to<sp/>determine<sp/>the<sp/>outliers<sp/>in<sp/>samples.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``relative_error``:<sp/>`float`,<sp/>the<sp/>relative<sp/>error<sp/>of<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convergence<sp/>of<sp/>samples.\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``device``:\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``num_cpu_threads``:<sp/>`int`,<sp/>number<sp/>of<sp/>CPU<sp/>threads<sp/>used<sp/>in<sp/>shared\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memory<sp/>parallel<sp/>processing.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``num_gpu_devices``:<sp/>`int`,<sp/>number<sp/>of<sp/>GPU<sp/>devices<sp/>used<sp/>in<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multi-GPU<sp/>(GPU<sp/>farm)<sp/>computation.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``num_gpu_multiprocessors``:<sp/>`int`,<sp/>number<sp/>of<sp/>GPU\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multi-processors.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``num_gpu_threads_per_multiprocessor``:<sp/>`int`,<sp/>number<sp/>of<sp/>GPU\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threads<sp/>on<sp/>each<sp/>GPU<sp/>multi-processor.\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``time``:\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``tot_wall_time``:<sp/>`float`,<sp/>total<sp/>elapsed<sp/>time<sp/>of<sp/>computation.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``alg_wall_time``:<sp/>`float`,<sp/>elapsed<sp/>time<sp/>of<sp/>computation<sp/>during\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>only<sp/>the<sp/>algorithm<sp/>execution.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``cpu_proc_time``:<sp/>`float`,<sp/>the<sp/>CPU<sp/>processing<sp/>time<sp/>of\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>computation.\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``solver``:\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``version``:<sp/>`str`,<sp/>version<sp/>of<sp/>imate.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``method``:<sp/>&apos;slq&apos;.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``lanczos_degree``:<sp/>`bool`,<sp/>Lanczos<sp/>degree.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``lanczos_tol``:<sp/>`float`,<sp/>Lanczos<sp/>tolerance.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``orthogonalize``:<sp/>`int`,<sp/>orthogonalization<sp/>flag.\n\n<sp/><sp/><sp/><sp/>Raises\n<sp/><sp/><sp/><sp/>------\n\n<sp/><sp/><sp/><sp/>ImportError\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>package<sp/>has<sp/>not<sp/>been<sp/>compiled<sp/>with<sp/>GPU<sp/>support,<sp/>but<sp/>``gpu``<sp/>is\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set<sp/>to<sp/>`True`.<sp/>To<sp/>resolve<sp/>the<sp/>issue,<sp/>set<sp/>``gpu``<sp/>to<sp/>`False`<sp/>to<sp/>be<sp/>able\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>use<sp/>the<sp/>existing<sp/>installation.<sp/>Alternatively,<sp/><sp/>export<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>environment<sp/>variable<sp/>``USE_CUDA=1``<sp/>and<sp/>recom&quot;</highlight><highlight class="stringliteral">&quot;pile<sp/>the<sp/>source<sp/>code<sp/>of\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>package.\n\n<sp/><sp/><sp/><sp/>See<sp/>Also\n<sp/><sp/><sp/><sp/>--------\n\n<sp/><sp/><sp/><sp/>imate.trace\n<sp/><sp/><sp/><sp/>imate.traceinv\n<sp/><sp/><sp/><sp/>imate.schatten\n\n<sp/><sp/><sp/><sp/>Notes\n<sp/><sp/><sp/><sp/>-----\n\n<sp/><sp/><sp/><sp/>**Computational<sp/>Complexity:**\n\n<sp/><sp/><sp/><sp/>This<sp/>method<sp/>uses<sp/>stochastic<sp/>Lanczos<sp/>quadrature<sp/>(SLQ),<sp/>which<sp/>is<sp/>a<sp/>randomized\n<sp/><sp/><sp/><sp/>algorithm.<sp/>The<sp/>computational<sp/>complexity<sp/>of<sp/>this<sp/>method<sp/>is\n\n<sp/><sp/><sp/><sp/>..<sp/>math::\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\mathcal{O}((\\rho<sp/>n^2<sp/>+<sp/>n<sp/>l)<sp/>s<sp/>l),\n\n<sp/><sp/><sp/><sp/>where<sp/>:math:`n`<sp/>is<sp/>the<sp/>matrix<sp/>size,<sp/>:math:`\\rho`<sp/>is<sp/>the<sp/>density<sp/>of\n<sp/><sp/><sp/><sp/>sparse<sp/>matrix<sp/>(for<sp/>dense<sp/>matrix,<sp/>:math:`\\rho=1`),<sp/>:math:`l`<sp/>is<sp/>the\n<sp/><sp/><sp/><sp/>Lanczos<sp/>degree<sp/>(set<sp/>with<sp/>``lanczos_degree``),<sp/>and<sp/>:math:`s`<sp/>is<sp/>the<sp/>number\n<sp/><sp/><sp/><sp/>of<sp/>samples<sp/>(set<sp/>with<sp/>``min_num_samples``<sp/>and<sp/>``max_num_samples``).\n\n<sp/><sp/><sp/><sp/>This<sp/>method<sp/>can<sp/>be<sp/>used<sp/>on<sp/>very<sp/>large<sp/>matrices<sp/>(:math:`n<sp/>&gt;<sp/>2^{12}`).<sp/>The\n<sp/><sp/><sp/><sp/>solution<sp/>is<sp/>an<sp/>approximation.\n\n<sp/><sp/><sp/><sp/>**Input<sp/>Matrix:**\n\n<sp/><sp/><sp/><sp/>The<sp/>input<sp/>`A`<sp/>can<sp/>be<sp/>either<sp/>of:\n\n<sp/><sp/><sp/><sp/>*<sp/>A<sp/>matrix,<sp/>such<sp/>as<sp/>`numpy.ndarray`,<sp/>or<sp/>`scipy.sparse`.\n<sp/><sp/><sp/><sp/>*<sp/>A<sp/>linear<sp/>operator<sp/>representing<sp/>a<sp/>matrix<sp/>using<sp/>:class:`imate.Matrix`.\n<sp/><sp/><sp/><sp/>*<sp/>A<sp/>linear<sp/>operator<sp/>representing<sp/>a<sp/>one-parameter<sp/>family<sp/>of<sp/>an<sp/>affine<sp/>matrix\n<sp/><sp/><sp/><sp/><sp/><sp/>function<sp/>:math:`t<sp/>\\mapsto<sp/>\\mathbf{A}<sp/>+<sp/>t\\mathbf{B}`<sp/>using\n<sp/><sp/><sp/><sp/><sp/><sp/>:class:`imate.AffineMatrixFunction`.\n\n<sp/><sp/><sp/><sp/>**Output:**\n\n<sp/><sp/><sp/><sp/>The<sp/>output<sp/>is<sp/>a<sp/>scalar.<sp/>However,<sp/>if<sp/>`A`<sp/>is<sp/>the<sp/>linear<sp/>operator\n<sp/><sp/><sp/><sp/>:math:`\\mathbf{A}(t)<sp/>=<sp/>\\mathbf{A}<sp/>+<sp/>t<sp/>\\mathbf{B}`<sp/>where<sp/>:math:`t`<sp/>is\n<sp/><sp/><sp/><sp/>given<sp/>as<sp/>the<sp/>tuple<sp/>:math:`t<sp/>=<sp/>(t_1,<sp/>\\dots,<sp/>t_q)`,<sp/>then<sp/>the<sp/>output<sp/>of<sp/>this\n<sp/><sp/><sp/><sp/>function<sp/>is<sp/>an<sp/>array<sp/>of<sp/>size<sp/>:math:`q`<sp/>corresponding<sp/>to<sp/>the\n<sp/><sp/><sp/><sp/>log-determinant<sp/>of<sp/>each<sp/>:math:`\\mathbf{A}(t_i)`.\n\n<sp/><sp/><sp/><sp/>..<sp/>note::\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>`A`<sp/>represents\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`\\mathbf{A}(t)<sp/>=<sp/>\\mathbf{A}<sp/>+<sp/>t<sp/>\\mathbf{I}`,<sp/>where\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`\\mathbf{I}`<sp/>is<sp/>the<sp/>identity<sp/>matrix,<sp/>and<sp/>:math:`t`<sp/>is<sp/>given<sp/>by\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>tuple<sp/>:math:`t<sp/>=<sp/>(t_1,<sp/>\\dots,<sp/>t_q)`,<sp/>the<sp/>computational<sp/>cost<sp/>of<sp/>an\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array<sp/>output<sp/>of<sp/>size<sp/>`q`<sp/>is<sp/>the<sp/>same<sp/>as<sp/>computing<sp/>for<sp/>a<sp/>single\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`t_i`.<sp/>Namely,<sp/>the<sp/>log-determinant<sp/>of<sp/>only\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:mat&quot;</highlight><highlight class="stringliteral">&quot;h:`\\mathbf{A}(t_1)`<sp/>is<sp/>computed,<sp/>and<sp/>the<sp/>log-determinant<sp/>of<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rest<sp/>of<sp/>:math:`i=2,<sp/>\\dots,<sp/>q`<sp/>are<sp/>obtained<sp/>from<sp/>the<sp/>result<sp/>of\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`t_1`<sp/>immediately.\n\n<sp/><sp/><sp/><sp/>**Algorithm:**\n\n<sp/><sp/><sp/><sp/>If<sp/>``gram``<sp/>is<sp/>`False`,<sp/>the<sp/>Lanczos<sp/>tri-diagonalization<sp/>method<sp/>is\n<sp/><sp/><sp/><sp/>used.<sp/>This<sp/>method<sp/>requires<sp/>only<sp/>matrix-vector<sp/>multiplication.<sp/>If\n<sp/><sp/><sp/><sp/>``gram``<sp/>is<sp/>`True`,<sp/>the<sp/>Golub-Kahn<sp/>bi-diagonalization<sp/>method<sp/>is<sp/>used.<sp/>This\n<sp/><sp/><sp/><sp/>method<sp/>requires<sp/>both<sp/>matrix-vector<sp/>multiplication<sp/>and<sp/>transposed-matrix\n<sp/><sp/><sp/><sp/>vector<sp/>multiplications.\n\n<sp/><sp/><sp/><sp/>**Convergence<sp/>criterion:**\n\n<sp/><sp/><sp/><sp/>Let<sp/>:math:`n_{\\min}`<sp/>and<sp/>:math:`n_{\\max}`<sp/>be<sp/>the<sp/>minimum<sp/>and<sp/>maximum\n<sp/><sp/><sp/><sp/>number<sp/>of<sp/>iterations<sp/>respectively<sp/>defined<sp/>by<sp/>``min_num_samples``<sp/>and\n<sp/><sp/><sp/><sp/>``max_num_samples``.<sp/>The<sp/>iterations<sp/>terminate<sp/>at\n<sp/><sp/><sp/><sp/>:math:`n_{\\min}<sp/>\\leq<sp/>i<sp/>\\leq<sp/>n_{\\max}`<sp/>where<sp/>:math:`i`<sp/>is<sp/>the\n<sp/><sp/><sp/><sp/>iteration<sp/>counter.<sp/>The<sp/>iterations<sp/>stop<sp/>earlier<sp/>at<sp/>:math:`i<sp/>&lt;<sp/>n_{\\max}`<sp/>if\n<sp/><sp/><sp/><sp/>the<sp/>convergence<sp/>error<sp/>of<sp/>the<sp/>mean<sp/>of<sp/>the<sp/>samples<sp/>is<sp/>satisfied,<sp/>as<sp/>follows.\n\n<sp/><sp/><sp/><sp/>Suppose<sp/>:math:`s(j)`<sp/>and<sp/>:math:`\\sigma(i)`<sp/>are<sp/>respectively<sp/>the<sp/>mean<sp/>and\n<sp/><sp/><sp/><sp/>standard<sp/>deviation<sp/>of<sp/>samples<sp/>after<sp/>:math:`j`<sp/>iterations.<sp/>The<sp/>error<sp/>of\n<sp/><sp/><sp/><sp/>convergence,<sp/>:math:`e(j)`,<sp/>is<sp/>defined<sp/>by\n\n<sp/><sp/><sp/><sp/>..<sp/>math::\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e(j)<sp/>=<sp/>\\frac{\\sigma(j)}{\\sqrt{j}}<sp/>Z\n\n<sp/><sp/><sp/><sp/>where<sp/>:math:`Z`<sp/>is<sp/>the<sp/>Z-score<sp/>defined<sp/>by\n\n<sp/><sp/><sp/><sp/>..<sp/>math::\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z<sp/>=<sp/>\\sqrt{2}<sp/>\\mathrm{erf}^{-1}(\\phi).\n\n<sp/><sp/><sp/><sp/>In<sp/>the<sp/>above,<sp/>:math:`\\phi`<sp/>is<sp/>the<sp/>confidence<sp/>level<sp/>and<sp/>set<sp/>by\n<sp/><sp/><sp/><sp/>``confidence_level``<sp/>argument,<sp/>and<sp/>:math:`\\mathrm{erf}^{-1}`<sp/>is<sp/>the\n<sp/><sp/><sp/><sp/>inverse<sp/>error<sp/>function.<sp/>A<sp/>confidence<sp/>level<sp/>of<sp/>95%,<sp/>for<sp/>instance,<sp/>means<sp/>that\n<sp/><sp/><sp/><sp/>the<sp/>Z-score<sp/>is<sp/>1.96,<sp/>which<sp/>means<sp/>the<sp/>confidence<sp/>interval<sp/>is\n<sp/><sp/><sp/><sp/>:math:`\\pm<sp/>1.96<sp/>\\sigma`.\n\n<sp/><sp/><sp/><sp/>The<sp/>termination<sp/>criterion<sp/>is\n\n<sp/><sp/><sp/><sp/>..<sp/>math::\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e(j)<sp/>&lt;<sp/>\\epsilon_a<sp/>+<sp/>s(j)<sp/>\\epsilon_r,\n\n<sp/><sp/><sp/><sp/>where<sp/>:math:`\\epsilon_{a}`<sp/>and<sp/>:math:`\\epsilon_r`<sp/>are<sp/>the<sp/>absolute<sp/>and\n<sp/><sp/><sp/><sp/>relative<sp/>error<sp/>tolerances<sp/>respectively,<sp/>and<sp/>they<sp/>are<sp/>set<sp/>by<sp/>``error_atol``\n<sp/><sp/><sp/><sp/>and<sp/>``error_rtol``.\n\n<sp/><sp/><sp/><sp/>**C&quot;</highlight><highlight class="stringliteral">&quot;onvergence<sp/>for<sp/>the<sp/>case<sp/>of<sp/>multiple<sp/>parameters:**\n\n<sp/><sp/><sp/><sp/>When<sp/>`A`<sp/>is<sp/>a<sp/>type<sp/>of<sp/>:class:`imate.AffineMatrixFunction`<sp/>representing<sp/>the\n<sp/><sp/><sp/><sp/>affine<sp/>matrix<sp/>function<sp/>:math:`\\mathbf{A}(t)<sp/>=<sp/>\\mathbf{A}<sp/>+<sp/>t<sp/>\\mathbf{B}`\n<sp/><sp/><sp/><sp/>and<sp/>if<sp/>multiple<sp/>parameters<sp/>:math:`t_i`,<sp/>:math:`i=1,\\dots,<sp/>q`<sp/>are<sp/>passed<sp/>to\n<sp/><sp/><sp/><sp/>this<sp/>function<sp/>through<sp/>``parameters``<sp/>argument,<sp/>the<sp/>convergence<sp/>criterion\n<sp/><sp/><sp/><sp/>has<sp/>to<sp/>be<sp/>satisfied<sp/>for<sp/>each<sp/>of<sp/>:math:`\\mathbf{A}(t_i)`.<sp/>Specifically,<sp/>the\n<sp/><sp/><sp/><sp/>iterations<sp/>are<sp/>terminated<sp/>as<sp/>follows:\n\n<sp/><sp/><sp/><sp/>*<sp/>If<sp/>:math:`\\mathbf{B}`<sp/>is<sp/>the<sp/>identity<sp/>matrix,<sp/>iterations<sp/>for<sp/>all\n<sp/><sp/><sp/><sp/><sp/><sp/>:math:`\\mathbf{A}(t_i)`<sp/>continue<sp/>till<sp/>the<sp/>convergence<sp/>criterion<sp/>for\n<sp/><sp/><sp/><sp/><sp/><sp/>*all*<sp/>:math:`t_i`<sp/>are<sp/>satisfied.<sp/>That<sp/>is,<sp/>even<sp/>if<sp/>:math:`t=t_i`<sp/>is\n<sp/><sp/><sp/><sp/><sp/><sp/>converged<sp/>but<sp/>:math:`t=t_j`<sp/>has<sp/>not<sp/>converged<sp/>yet,<sp/>the<sp/>iterations<sp/>for\n<sp/><sp/><sp/><sp/><sp/><sp/>:math:`t=t_i`<sp/>will<sp/>continue.\n<sp/><sp/><sp/><sp/><sp/><sp/>:\n<sp/><sp/><sp/><sp/>*<sp/>If<sp/>:math:`\\mathbf{B}`<sp/>is<sp/>not<sp/>the<sp/>identity<sp/>matrix,<sp/>the<sp/>iterations<sp/>for\n<sp/><sp/><sp/><sp/><sp/><sp/>each<sp/>of<sp/>:math:`t_i`<sp/>are<sp/>independent.<sp/>That<sp/>is,<sp/>if<sp/>:math:`t=t_i`<sp/>converges,\n<sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>iterations<sp/>for<sp/>that<sp/>parameter<sp/>will<sp/>stop<sp/>regardless<sp/>of<sp/>the<sp/>convergence\n<sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>of<sp/>other<sp/>parameters.\n\n<sp/><sp/><sp/><sp/>**Plotting:**\n\n<sp/><sp/><sp/><sp/>If<sp/>``plot``<sp/>is<sp/>set<sp/>to<sp/>`True`,<sp/>it<sp/>plots<sp/>the<sp/>convergence<sp/>of<sp/>samples<sp/>and<sp/>their\n<sp/><sp/><sp/><sp/>relative<sp/>error.\n\n<sp/><sp/><sp/><sp/>*<sp/>If<sp/>no<sp/>graphical<sp/>backend<sp/>exists<sp/>(such<sp/>as<sp/>running<sp/>the<sp/>code<sp/>on<sp/>a<sp/>remote\n<sp/><sp/><sp/><sp/><sp/><sp/>server<sp/>or<sp/>manually<sp/>disabling<sp/>the<sp/>X11<sp/>backend),<sp/>the<sp/>plot<sp/>will<sp/>not<sp/>be\n<sp/><sp/><sp/><sp/><sp/><sp/>shown,<sp/>rather,<sp/>it<sp/>will<sp/>be<sp/>saved<sp/>as<sp/>an<sp/>``svg``<sp/>file<sp/>in<sp/>the<sp/>current\n<sp/><sp/><sp/><sp/><sp/><sp/>directory.\n<sp/><sp/><sp/><sp/>*<sp/>If<sp/>the<sp/>executable<sp/>``latex``<sp/>is<sp/>available<sp/>on<sp/>``PATH``,<sp/>the<sp/>plot<sp/>is\n<sp/><sp/><sp/><sp/><sp/><sp/>rendered<sp/>using<sp/>:math:`\\rm\\LaTeX`<sp/>and<sp/>it<sp/>may<sp/>take<sp/>slightly<sp/>longer<sp/>to\n<sp/><sp/><sp/><sp/><sp/><sp/>produce<sp/>the<sp/>plot.\n<sp/><sp/><sp/><sp/>*<sp/>If<sp/>:math:`\\rm\\LaTeX`<sp/>is<sp/>not<sp/>installed,<sp/>it<sp/>uses<sp/>any<sp/>available<sp/>San-Serif\n<sp/><sp/><sp/><sp/><sp/><sp/>font<sp/>to<sp/>render<sp/>the<sp/>plot.\n\n<sp/><sp/><sp/><sp/>To<sp/>manually<sp/>disable<sp/>interactive<sp/>plot<sp/>display<sp/>and<sp/>save<sp/>the<sp/>plot<sp/>as\n<sp/><sp/><sp/><sp/>``svg``<sp/>instead,<sp/>add<sp/>the<sp/>following<sp/>at<sp/>the<sp/>very<sp/>beginning<sp/>of<sp/>your<sp/>code\n<sp/><sp/><sp/><sp/>before<sp/>importing<sp/>:mod:`imate`:\n\n<sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&quot;</highlight><highlight class="stringliteral">&quot;&gt;<sp/>import<sp/>os\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>os.environ[&apos;IMATE_NO_DISPLAY&apos;]<sp/>=<sp/>&apos;True&apos;\n\n<sp/><sp/><sp/><sp/>References\n<sp/><sp/><sp/><sp/>----------\n\n<sp/><sp/><sp/><sp/>*<sp/>`Ubaru,<sp/>S.,<sp/>Chen,<sp/>J.,<sp/>and<sp/>Saad,<sp/>Y.<sp/>(2017)\n<sp/><sp/><sp/><sp/><sp/><sp/>&lt;https://www-users.cs.umn.edu/~saad/PDF/ys-2016-04.pdf&gt;`_,\n<sp/><sp/><sp/><sp/><sp/><sp/>Fast<sp/>Estimation<sp/>of<sp/>:math:`\\mathrm{tr}(F(A))`<sp/>Via<sp/>Stochastic<sp/>Lanczos\n<sp/><sp/><sp/><sp/><sp/><sp/>Quadrature,<sp/>SIAM<sp/>J.<sp/>Matrix<sp/>Anal.<sp/>Appl.,<sp/>38(4),<sp/>1075-1099.\n\n<sp/><sp/><sp/><sp/>Examples\n<sp/><sp/><sp/><sp/>--------\n\n<sp/><sp/><sp/><sp/>**Symmetric<sp/>Input<sp/>Matrix:**\n\n<sp/><sp/><sp/><sp/>The<sp/>`slq`<sp/>method<sp/>requires<sp/>the<sp/>input<sp/>matrix<sp/>of<sp/>:func:`imate.logdet`<sp/>function\n<sp/><sp/><sp/><sp/>to<sp/>be<sp/>symmetric<sp/>when<sp/>``gram``<sp/>is<sp/>`False`.<sp/>For<sp/>the<sp/>first<sp/>example,<sp/>generate<sp/>a\n<sp/><sp/><sp/><sp/>symmetric<sp/>sample<sp/>matrix<sp/>using<sp/>:func:`imate.toeplitz`<sp/>function<sp/>as<sp/>follows:\n\n<sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Import<sp/>packages\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>imate<sp/>import<sp/>toeplitz\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Generate<sp/>a<sp/>symmetric<sp/>matrix<sp/>by<sp/>setting<sp/>gram=True.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>A<sp/>=<sp/>toeplitz(2,<sp/>1,<sp/>size=100,<sp/>gram=True)\n\n<sp/><sp/><sp/><sp/>In<sp/>the<sp/>above,<sp/>by<sp/>passing<sp/>``gram=True``<sp/>to<sp/>:func:`imate.toeplitz`<sp/>function,\n<sp/><sp/><sp/><sp/>the<sp/>Gramian<sp/>of<sp/>the<sp/>Toeplitz<sp/>matrix<sp/>is<sp/>returned,<sp/>which<sp/>is<sp/>symmetric.<sp/>Compute\n<sp/><sp/><sp/><sp/>the<sp/>log-determinant<sp/>of<sp/>:math:`\\mathbf{A}^{2.5}`:\n\n<sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Import<sp/>packages\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>imate<sp/>import<sp/>logdet\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Compute<sp/>the<sp/>log-determinant\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>logdet(A,<sp/>gram=False,<sp/>p=2.5,<sp/>method=&apos;slq&apos;)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>277.00578301560057\n\n<sp/><sp/><sp/><sp/>..<sp/>note:\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Since<sp/>`slq`<sp/>is<sp/>a<sp/>stochastic<sp/>method,<sp/>the<sp/>above<sp/>result<sp/>slightly\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>differs<sp/>after<sp/>each<sp/>run.\n\n<sp/><sp/><sp/><sp/>**Gramian<sp/>Matrix:**\n\n<sp/><sp/><sp/><sp/>Passing<sp/>``gram=True``<sp/>to<sp/>:func:`imate.logdet`<sp/>function<sp/>uses<sp/>the<sp/>Gramian\n<sp/><sp/><sp/><sp/>of<sp/>the<sp/>input<sp/>matrix.<sp/>n<sp/>this<sp/>case,<sp/>the<sp/>input<sp/>matrix<sp/>can<sp/>be<sp/>non-symmetric.\n<sp/><sp/><sp/><sp/>In<sp/>the<sp/>next<sp/>example,<sp/>generate<sp/>a<sp/>non-symmetric<sp/>matrix,<sp/>:math:`\\mathbf{B}`,\n<sp/><sp/><sp/><sp/>then<sp/>compute<sp/>the<sp/>log-determinant<sp/>of\n<sp/><sp/><sp/><sp/>:math:`(\\mathbf{B}^{\\intercal}<sp/>\\mathbf{B})^{2.5}`.\n\n<sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Generate<sp/>a<sp/>non-symmetric<sp/>matrix<sp/>by<sp/>setting<sp/>gram=False\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>B<sp/>=<sp/>toeplitz(2,<sp/>1,<sp/>size=100,<sp/>gram=False)\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Comput&quot;</highlight><highlight class="stringliteral">&quot;e<sp/>log-determinant<sp/>of<sp/>Gramian<sp/>by<sp/>passing<sp/>gram=True\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>logdet(B,<sp/>gram=True,<sp/>p=2.5,<sp/>method=&apos;slq&apos;)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>275.15518680196476\n\n<sp/><sp/><sp/><sp/>Note<sp/>that<sp/>the<sp/>result<sp/>of<sp/>the<sp/>two<sp/>examples<sp/>in<sp/>the<sp/>above<sp/>are<sp/>the<sp/>similar<sp/>since\n<sp/><sp/><sp/><sp/>the<sp/>input<sp/>matrix<sp/>:math:`\\mathbf{A}`<sp/>of<sp/>the<sp/>first<sp/>example<sp/>is<sp/>the<sp/>Gramian<sp/>of\n<sp/><sp/><sp/><sp/>the<sp/>input<sp/>matrix<sp/>:math:`\\mathbf{B}`<sp/>in<sp/>the<sp/>second<sp/>example,<sp/>that<sp/>is\n<sp/><sp/><sp/><sp/>:math:`\\mathbf{A}<sp/>=<sp/>\\mathbf{B}^{\\intercal}<sp/>\\mathbf{B}`.<sp/>Since<sp/>the\n<sp/><sp/><sp/><sp/>second<sp/>example<sp/>uses<sp/>the<sp/>Gramian<sp/>of<sp/>the<sp/>input<sp/>matrix,<sp/>it<sp/>computes<sp/>the<sp/>same\n<sp/><sp/><sp/><sp/>quantity<sp/>as<sp/>the<sp/>first<sp/>example.\n\n<sp/><sp/><sp/><sp/>**Verbose<sp/>output:**\n\n<sp/><sp/><sp/><sp/>By<sp/>setting<sp/>``verbose``<sp/>to<sp/>`True`,<sp/>useful<sp/>info<sp/>about<sp/>the<sp/>process<sp/>is\n<sp/><sp/><sp/><sp/>printed.\n\n<sp/><sp/><sp/><sp/>..<sp/>literalinclude::<sp/>../_static/data/imate.logdet.slq-verbose-1.txt\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:language:<sp/>python\n\n<sp/><sp/><sp/><sp/>**Output<sp/>information:**\n\n<sp/><sp/><sp/><sp/>Print<sp/>information<sp/>about<sp/>the<sp/>inner<sp/>computation:\n\n<sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>ld,<sp/>info<sp/>=<sp/>logdet(A,<sp/>method=&apos;slq&apos;,<sp/>return_info=True)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>print(ld)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>138.6294361119891\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Print<sp/>dictionary<sp/>neatly<sp/>using<sp/>pprint\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>pprint<sp/>import<sp/>pprint\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>pprint(info)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;matrix&apos;:<sp/>{\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;data_type&apos;:<sp/>b&apos;float64&apos;,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;density&apos;:<sp/>0.0298,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;exponent&apos;:<sp/>1.0,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;gram&apos;:<sp/>False,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;nnz&apos;:<sp/>298,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;num_inquiries&apos;:<sp/>1,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;num_operator_parameters&apos;:<sp/>0,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;parameters&apos;:<sp/>None,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;size&apos;:<sp/>(100,<sp/>100),\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;sparse&apos;:<sp/>True\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;convergence&apos;:<sp/>{\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;all_converged&apos;:<sp/>False,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;converged&apos;:<sp/>False,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;max_num_samples&apos;:<sp/>50,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;min_num_samples&apos;:<sp/>10,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;num_outliers&apos;:<sp/>0,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;num_samples_used&apos;:<sp/>50,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;samples&apos;:<sp/>array([124.65021242,<sp/>...,<sp/>143.27314446]),\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;samples_mean&apos;:<sp/>139.89509513079338,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;samples_processed_order&apos;:<sp/>array([<sp/>4,<sp/>...,<sp/>47])\n<sp/><sp/><sp/>&quot;</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;error&apos;:<sp/>{\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;absolute_error&apos;:<sp/>2.345203485787551,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;confidence_level&apos;:<sp/>0.95,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;error_atol&apos;:<sp/>0.0,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;error_rtol&apos;:<sp/>0.01,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;outlier_significance_level&apos;:<sp/>0.001,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;relative_error&apos;:<sp/>0.01676401508998531\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;solver&apos;:<sp/>{\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;lanczos_degree&apos;:<sp/>20,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;lanczos_tol&apos;:<sp/>2.220446049250313e-16,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;method&apos;:<sp/>&apos;slq&apos;,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;orthogonalize&apos;:<sp/>0,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;version&apos;:<sp/>&apos;0.15.0&apos;\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;device&apos;:<sp/>{\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;num_cpu_threads&apos;:<sp/>8,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;num_gpu_devices&apos;:<sp/>0,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;num_gpu_multiprocessors&apos;:<sp/>0,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;num_gpu_threads_per_multiprocessor&apos;:<sp/>0\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;time&apos;:<sp/>{\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;alg_wall_time&apos;:<sp/>0.002254009246826172,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;cpu_proc_time&apos;:<sp/>0.01330678200000035,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;tot_wall_time&apos;:<sp/>0.0023698790464550257\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\n\n<sp/><sp/><sp/><sp/>**Large<sp/>matrix:**\n\n<sp/><sp/><sp/><sp/>Compute<sp/>the<sp/>log-determinant<sp/>of<sp/>a<sp/>very<sp/>large<sp/>sparse<sp/>matrix<sp/>using<sp/>at<sp/>least\n<sp/><sp/><sp/><sp/>`100`<sp/>samples:\n\n<sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:emphasize-lines:<sp/>6,<sp/>7\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Generate<sp/>a<sp/>matrix<sp/>of<sp/>size<sp/>one<sp/>million\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>A<sp/>=<sp/>toeplitz(2,<sp/>1,<sp/>size=1000000,<sp/>gram=True)\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Approximate<sp/>log-determinant<sp/>using<sp/>stochastic<sp/>Lanczos<sp/>quadrature\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>with<sp/>at<sp/>least<sp/>100<sp/>Monte-Carlo<sp/>sampling\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>ld,<sp/>info<sp/>=<sp/>logdet(A,<sp/>method=&apos;slq&apos;,<sp/>min_num_samples=100,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_num_samples=200,<sp/>return_info=True)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>print(ld)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1386320.4734751645\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Find<sp/>the<sp/>time<sp/>it<sp/>took<sp/>to<sp/>compute<sp/>the<sp/>above\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>print(info[&apos;time&apos;])\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;tot_wall_time&apos;:<sp/>16.598053652094677,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;alg_wall_time&apos;:<sp/>16.57977867126465,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;cpu_proc_time&apos;:<sp/>113.03275911399999\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\n\n<sp/><sp/><sp/><sp/>Compare<sp/>the<sp/>result<sp/>of<sp/>the<sp/>above<sp/>approximation<sp/>with<sp/>the<sp/>exact<sp/>solution<sp/>of\n<sp/><sp/><sp/><sp/>the<sp/>log-determinant<sp/>&quot;</highlight><highlight class="stringliteral">&quot;using<sp/>the<sp/>analytic<sp/>relation<sp/>for<sp/>Toeplitz<sp/>matrix.<sp/>See\n<sp/><sp/><sp/><sp/>:func:`imate.sample_matrices.toeplitz_logdet`<sp/>for<sp/>details.\n\n<sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>imate.sample_matrices<sp/>import<sp/>toeplitz_logdet\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>toeplitz_logdet(2,<sp/>1,<sp/>size=1000000,<sp/>gram=True)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1386294.3611198906\n\n<sp/><sp/><sp/><sp/>It<sp/>can<sp/>be<sp/>seen<sp/>that<sp/>the<sp/>error<sp/>of<sp/>approximation<sp/>is<sp/>:math:`0.0018<sp/>\\%`.<sp/>This\n<sp/><sp/><sp/><sp/>accuracy<sp/>is<sp/>remarkable<sp/>considering<sp/>that<sp/>the<sp/>computation<sp/>on<sp/>such<sp/>a<sp/>large\n<sp/><sp/><sp/><sp/>matrix<sp/>took<sp/>only<sp/>16<sp/>seconds.<sp/>Computing<sp/>the<sp/>log-determinant<sp/>of<sp/>such<sp/>a\n<sp/><sp/><sp/><sp/>large<sp/>matrix<sp/>using<sp/>any<sp/>of<sp/>the<sp/>exact<sp/>methods<sp/>(such<sp/>as<sp/>``cholesky``<sp/>or\n<sp/><sp/><sp/><sp/>``eigenvalue``)<sp/>is<sp/>infeasible.\n\n<sp/><sp/><sp/><sp/>**Plotting:**\n\n<sp/><sp/><sp/><sp/>By<sp/>setting<sp/>``plot``<sp/>to<sp/>`True`,<sp/>plots<sp/>of<sp/>samples<sp/>during<sp/>Monte-Carlo\n<sp/><sp/><sp/><sp/>iterations<sp/>and<sp/>the<sp/>convergence<sp/>of<sp/>their<sp/>mean<sp/>are<sp/>generated.\n\n<sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>A<sp/>=<sp/>toeplitz(2,<sp/>1,<sp/>size=1000000,<sp/>gram=True)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>logdet(A,<sp/>method=&apos;slq&apos;,<sp/>min_num_samples=20,<sp/>max_num_samples=80,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_rtol=2e-4,<sp/>confidence_level=0.95,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outlier_significance_level=0.001,<sp/>plot=True)\n\n<sp/><sp/><sp/><sp/>..<sp/>image::<sp/>../_static/images/plots/logdet_slq_convergence_1.png\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:align:<sp/>center\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:class:<sp/>custom-dark\n\n<sp/><sp/><sp/><sp/>In<sp/>the<sp/>left<sp/>plot,<sp/>the<sp/>samples<sp/>are<sp/>shown<sp/>in<sp/>circles<sp/>and<sp/>the<sp/>cumulative<sp/>mean\n<sp/><sp/><sp/><sp/>of<sp/>the<sp/>samples<sp/>is<sp/>shown<sp/>by<sp/>a<sp/>solid<sp/>black<sp/>curve.<sp/>The<sp/>shaded<sp/>area<sp/>corresponds\n<sp/><sp/><sp/><sp/>to<sp/>the<sp/>95%<sp/>confidence<sp/>interval<sp/>:math:`\\pm<sp/>1.96<sp/>\\sigma`,<sp/>which<sp/>is<sp/>set<sp/>by\n<sp/><sp/><sp/><sp/>``confidence_level=0.95``.<sp/>The<sp/>samples<sp/>outside<sp/>the<sp/>interval<sp/>of<sp/>99.9%<sp/>are\n<sp/><sp/><sp/><sp/>considered<sp/>outliers,<sp/>which<sp/>is<sp/>set<sp/>by<sp/>the<sp/>significance<sp/>level\n<sp/><sp/><sp/><sp/>``outlier_significance_level=0.001``.\n\n<sp/><sp/><sp/><sp/>In<sp/>the<sp/>right<sp/>plot,<sp/>the<sp/>darker<sp/>shaded<sp/>area<sp/>in<sp/>the<sp/>interval<sp/>:math:`[0,<sp/>20]`\n<sp/><sp/><sp/><sp/>shows<sp/>the<sp/>minimum<sp/>number<sp/>of<sp/>samples<sp/>and<sp/>is<sp/>set<sp/>by<sp/>``min_num_samples=20``.\n<sp/><sp/><sp/><sp/>The<sp/>iterations<sp/>do<sp/>not<sp/>stop<sp/>till<sp/>the<sp/>minimum<sp/>number<sp/>of<sp/>iterations<sp/>is<sp/>passed.\n<sp/><sp/><sp/><sp/>We<sp/>can<sp/>observe<sp/>that<sp/>sampling<sp/>is<sp/>terminated<sp/>after<sp/>55<sp/>iterations<sp/>where<sp/>the\n<sp/><sp/><sp/><sp/>relative<sp/>error<sp/>of<sp/>samples<sp/>reac&quot;</highlight><highlight class="stringliteral">&quot;hes<sp/>0.02%<sp/>since<sp/>we<sp/>set<sp/>``error_rtol=2e-4``.\n<sp/><sp/><sp/><sp/>The<sp/>lighter<sp/>shaded<sp/>area<sp/>in<sp/>the<sp/>interval<sp/>:math:`[56,<sp/>80]`<sp/>corresponds<sp/>to<sp/>the\n<sp/><sp/><sp/><sp/>iterations<sp/>that<sp/>were<sp/>not<sp/>performed<sp/>to<sp/>reach<sp/>the<sp/>specified<sp/>maximum\n<sp/><sp/><sp/><sp/>iterations<sp/>by<sp/>``max_num_samples=80``.\n\n<sp/><sp/><sp/><sp/>**Matrix<sp/>operator:**\n\n<sp/><sp/><sp/><sp/>Use<sp/>an<sp/>object<sp/>of<sp/>:class:`imate.Matrix`<sp/>class<sp/>as<sp/>an<sp/>alternative<sp/>method<sp/>to\n<sp/><sp/><sp/><sp/>pass<sp/>the<sp/>matrix<sp/>`A`<sp/>to<sp/>the<sp/>`logdet`<sp/>function.\n\n<sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:emphasize-lines:<sp/>8\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Import<sp/>matrix<sp/>operator\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>imate<sp/>import<sp/>toeplitz,<sp/>logdet,<sp/>Matrix\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Generate<sp/>a<sp/>sample<sp/>matrix<sp/>(a<sp/>toeplitz<sp/>matrix)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>A<sp/>=<sp/>toeplitz(2,<sp/>1,<sp/>size=100,<sp/>gram=True)\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Create<sp/>a<sp/>matrix<sp/>operator<sp/>object<sp/>from<sp/>matrix<sp/>A\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>Aop<sp/>=<sp/>Matrix(A)\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Compute<sp/>log-determinant<sp/>of<sp/>Aop\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>logdet(Aop,<sp/>method=&apos;slq&apos;)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>141.52929878934194\n\n<sp/><sp/><sp/><sp/>An<sp/>advantage<sp/>of<sp/>passing<sp/>`Aop`<sp/>(instead<sp/>of<sp/>`A`)<sp/>to<sp/>the<sp/>`logdet`<sp/>function\n<sp/><sp/><sp/><sp/>will<sp/>be<sp/>clear<sp/>when<sp/>using<sp/>GPU.\n\n<sp/><sp/><sp/><sp/>**Computation<sp/>on<sp/>GPU:**\n\n<sp/><sp/><sp/><sp/>The<sp/>argument<sp/>``gpu=True``<sp/>performs<sp/>the<sp/>computations<sp/>on<sp/>GPU.<sp/>The<sp/>following\n<sp/><sp/><sp/><sp/>example<sp/>uses<sp/>the<sp/>object<sp/>`Aop`<sp/>created<sp/>earlier.\n\n<sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Compute<sp/>log-determinant<sp/>of<sp/>Aop\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>logdet(Aop,<sp/>method=&apos;slq&apos;,<sp/>gpu=True)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>141.52929878934194\n\n<sp/><sp/><sp/><sp/>The<sp/>above<sp/>function<sp/>call<sp/>triggers<sp/>the<sp/>object<sp/>`Aop`<sp/>to<sp/>automatically<sp/>load<sp/>the\n<sp/><sp/><sp/><sp/>matrix<sp/>data<sp/>on<sp/>the<sp/>GPU.\n\n<sp/><sp/><sp/><sp/>One<sp/>could<sp/>have<sp/>used<sp/>`A`<sp/>instead<sp/>of<sp/>`Aop`<sp/>in<sp/>the<sp/>above.<sp/>However,<sp/>an\n<sp/><sp/><sp/><sp/>advantage<sp/>of<sp/>using<sp/>`Aop`<sp/>(instead<sp/>of<sp/>the<sp/>matrix<sp/>`A`<sp/>directly)<sp/>is<sp/>that<sp/>by\n<sp/><sp/><sp/><sp/>calling<sp/>the<sp/>above<sp/>`logdet`<sp/>function<sp/>(or<sp/>another<sp/>function)<sp/>again<sp/>on<sp/>this\n<sp/><sp/><sp/><sp/>matrix,<sp/>the<sp/>data<sp/>of<sp/>this<sp/>matrix<sp/>does<sp/>not<sp/>have<sp/>to<sp/>be<sp/>re-allocated<sp/>on<sp/>the<sp/>GPU\n<sp/><sp/><sp/><sp/>device<sp/>again.<sp/>To<sp/>highlight<sp/>this<sp/>point,<sp/>call<sp/>the<sp/>above<sp/>function<sp/>again,<sp/>but\n<sp/><sp/><sp/><sp/>this<sp/>time,<sp/>set<sp/>``gram``<sp/>to<sp/>`True`<sp/>to<sp/>compute<sp/>something<sp/>different.\n\n<sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Compute<sp/>log-determinant<sp/>of<sp/>Aop\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>logdet(Aop,<sp/>method=&apos;slq&apos;,<sp/>gpu&quot;</highlight><highlight class="stringliteral">&quot;=True,<sp/>gram=True)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>141.52929878934194\n\n<sp/><sp/><sp/><sp/>In<sp/>the<sp/>above<sp/>example,<sp/>no<sp/>data<sp/>is<sp/>needed<sp/>to<sp/>be<sp/>transferred<sp/>from<sp/>CPU<sp/>host<sp/>to\n<sp/><sp/><sp/><sp/>GPU<sp/>device<sp/>again.<sp/>However,<sp/>if<sp/>`A`<sp/>was<sp/>used<sp/>instead<sp/>of<sp/>`Aop`,<sp/>the<sp/>data<sp/>would\n<sp/><sp/><sp/><sp/>have<sp/>been<sp/>transferred<sp/>from<sp/>CPU<sp/>to<sp/>GPU<sp/>again<sp/>for<sp/>the<sp/>second<sp/>time.<sp/>The<sp/>`Aop`\n<sp/><sp/><sp/><sp/>object<sp/>holds<sp/>the<sp/>data<sp/>on<sp/>GPU<sp/>for<sp/>later<sp/>use<sp/>as<sp/>long<sp/>as<sp/>this<sp/>object<sp/>does<sp/>no\n<sp/><sp/><sp/><sp/>go<sp/>out<sp/>of<sp/>the<sp/>scope<sp/>of<sp/>the<sp/>python<sp/>environment.<sp/>Once<sp/>the<sp/>variable<sp/>`Aop`<sp/>goes\n<sp/><sp/><sp/><sp/>out<sp/>of<sp/>scope,<sp/>the<sp/>matrix<sp/>data<sp/>on<sp/>all<sp/>the<sp/>GPU<sp/>devices<sp/>will<sp/>be<sp/>cleaned\n<sp/><sp/><sp/><sp/>automatically.\n\n<sp/><sp/><sp/><sp/>**Affine<sp/>matrix<sp/>operator:**\n\n<sp/><sp/><sp/><sp/>Use<sp/>an<sp/>object<sp/>of<sp/>:class:`imate.AffineMatrixFunction`<sp/>to<sp/>create<sp/>the<sp/>linear\n<sp/><sp/><sp/><sp/>operator\n\n<sp/><sp/><sp/><sp/>..<sp/>math::\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\mathbf{A}(t)<sp/>=<sp/>\\mathbf{A}<sp/>+<sp/>t<sp/>\\mathbf{I}.\n\n<sp/><sp/><sp/><sp/>The<sp/>object<sp/>:math:`\\mathbf{A}(t)`<sp/>can<sp/>be<sp/>passed<sp/>to<sp/>`logdet`<sp/>function<sp/>with\n<sp/><sp/><sp/><sp/>multiple<sp/>values<sp/>for<sp/>the<sp/>parameter<sp/>:math:`t`<sp/>to<sp/>compute<sp/>their\n<sp/><sp/><sp/><sp/>log-determinant<sp/>all<sp/>at<sp/>once,<sp/>as<sp/>follows.\n\n<sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:emphasize-lines:<sp/>8\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Import<sp/>affine<sp/>matrix<sp/>function\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>imate<sp/>import<sp/>toeplitz,<sp/>logdet,<sp/>AffineMatrixFunction\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Generate<sp/>a<sp/>sample<sp/>matrix<sp/>(a<sp/>toeplitz<sp/>matrix)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>A<sp/>=<sp/>toeplitz(2,<sp/>1,<sp/>size=100,<sp/>gram=True)\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Create<sp/>a<sp/>matrix<sp/>operator<sp/>object<sp/>from<sp/>matrix<sp/>A\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>Aop<sp/>=<sp/>AffineMatrixFunction(A)\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>A<sp/>list<sp/>of<sp/>parameters<sp/>t<sp/>to<sp/>pass<sp/>to<sp/>Aop\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>t<sp/>=<sp/>[-1.0,<sp/>0.0,<sp/>1.0]\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Compute<sp/>log-determinant<sp/>of<sp/>Aop<sp/>for<sp/>all<sp/>parameters<sp/>t\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>logdet(Aop,<sp/>method=&apos;slq&apos;,<sp/>parameters=t,<sp/>min_num_samples=20,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_num_samples=80,<sp/>error_rtol=1e-3,<sp/>confidence_level=0.95,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outlier_significance_level=0.001,<sp/>plot=True,<sp/>verbose=True)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array([<sp/>68.71411681,<sp/>135.88356906,<sp/>163.44156683])\n\n<sp/><sp/><sp/><sp/>The<sp/>output<sp/>of<sp/>the<sp/>verbose<sp/>argument<sp/>is<sp/>shown<sp/>below.<sp/>In<sp/>the<sp/>results<sp/>section\n<sp/><sp/><sp/><sp/>of<sp/>the<sp/>table<sp/>below,<sp/>each<sp/>row<sp/>`i`<sp/>under<sp/>the<sp/>`inquiry`<sp/>column<sp/>corresponds<sp/>to\n<sp/><sp/><sp/><sp/>each<sp/>element<sp/>of<sp/>the<sp/>parameters<sp/>``t<sp/>=<sp/>[-1,<sp/>0,<sp/>1]`&quot;</highlight><highlight class="stringliteral">&quot;`<sp/>that<sp/>was<sp/>specified<sp/>by\n<sp/><sp/><sp/><sp/>``parameters``<sp/>argument.\n\n<sp/><sp/><sp/><sp/>..<sp/>literalinclude::<sp/>../_static/data/imate.logdet.slq-verbose-2.txt\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:language:<sp/>python\n\n<sp/><sp/><sp/><sp/>The<sp/>output<sp/>of<sp/>the<sp/>plot<sp/>is<sp/>shown<sp/>below.<sp/>Each<sp/>colored<sp/>curve<sp/>corresponds<sp/>to\n<sp/><sp/><sp/><sp/>a<sp/>parameter<sp/>in<sp/>``t<sp/>=<sp/>[-1,<sp/>0,<sp/>1]``.\n\n<sp/><sp/><sp/><sp/>..<sp/>image::<sp/>../_static/images/plots/logdet_slq_convergence_2.png\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:align:<sp/>center\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:width:<sp/>80%\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:class:<sp/>custom-dark\n<sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_A;</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_kp_u_Log_determinant_of_non_singular;</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_TypeError;</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_check_arguments;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_cline_in_traceback;</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_confidence_level;</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_error_atol;</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_error_rtol;</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_functions;</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_gpu;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_gram;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_imate_logdet__slq_method;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_kp_s_imate_logdet__slq_method_pyx;</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_import;</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_info;</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_lanczos_degree;</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_lanczos_tol;</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_main;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_matrix_function;</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_max_num_samples;</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_min_num_samples;</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_name;</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_num_gpu_devices;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_num_threads;</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_orthogonalize;</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_outlier_significance_level;</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_p;</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_parameters;</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_plot;</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_pyFunction;</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_py_matrix_function;</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_pyx_vtable;</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_return_info;</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_kp_u_return_info_should_be_boolean;</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_slq_method;</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_kp_u_slq_method_line_24;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_test;</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_trace;</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_trace_estimator;</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_trace_estimator_2;</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_n_s_verbose;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_pf_5imate_6logdet_11_slq_method_slq_method(CYTHON_UNUSED<sp/>PyObject<sp/>*__pyx_self,<sp/>PyObject<sp/>*__pyx_v_A,<sp/>PyObject<sp/>*__pyx_v_gram,<sp/>PyObject<sp/>*__pyx_v_p,<sp/>PyObject<sp/>*__pyx_v_return_info,<sp/>PyObject<sp/>*__pyx_v_parameters,<sp/>PyObject<sp/>*__pyx_v_min_num_samples,<sp/>PyObject<sp/>*__pyx_v_max_num_samples,<sp/>PyObject<sp/>*__pyx_v_error_atol,<sp/>PyObject<sp/>*__pyx_v_error_rtol,<sp/>PyObject<sp/>*__pyx_v_confidence_level,<sp/>PyObject<sp/>*__pyx_v_outlier_significance_level,<sp/>PyObject<sp/>*__pyx_v_lanczos_degree,<sp/>PyObject<sp/>*__pyx_v_lanczos_tol,<sp/>PyObject<sp/>*__pyx_v_orthogonalize,<sp/>PyObject<sp/>*__pyx_v_num_threads,<sp/>PyObject<sp/>*__pyx_v_num_gpu_devices,<sp/>PyObject<sp/>*__pyx_v_gpu,<sp/>PyObject<sp/>*__pyx_v_verbose,<sp/>PyObject<sp/>*__pyx_v_plot);<sp/></highlight><highlight class="comment">/*<sp/>proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_pf_5imate_6logdet_11_slq_method_2check_arguments(CYTHON_UNUSED<sp/>PyObject<sp/>*__pyx_self,<sp/>PyObject<sp/>*__pyx_v_return_info);<sp/></highlight><highlight class="comment">/*<sp/>proto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_float_1_0;</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_float_0_95;</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_float_1eneg_2;</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_float_0_001;</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_int_0;</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_int_10;</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_int_20;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_int_50;</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_codeobj_;</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_tuple__3;</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_tuple__4;</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_tuple__5;</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_tuple__6;</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_codeobj__2;</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Late<sp/>includes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:24</highlight></codeline>
<codeline lineno="1981"><highlight class="comment"><sp/>*<sp/>#<sp/>==========</highlight></codeline>
<codeline lineno="1982"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="1983"><highlight class="comment"><sp/>*<sp/>def<sp/>slq_method(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="1984"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A,</highlight></codeline>
<codeline lineno="1985"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gram=False,</highlight></codeline>
<codeline lineno="1986"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Python<sp/>wrapper<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_pw_5imate_6logdet_11_slq_method_1slq_method(PyObject<sp/>*__pyx_self,<sp/>PyObject<sp/>*__pyx_args,<sp/>PyObject<sp/>*__pyx_kwds);<sp/></highlight><highlight class="comment">/*proto*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_doc_5imate_6logdet_11_slq_method_slq_method[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;slq_method(A,<sp/>gram=False,<sp/>p=1.0,<sp/>return_info=False,<sp/>parameters=None,<sp/>min_num_samples=10,<sp/>max_num_samples=50,<sp/>error_atol=None,<sp/>error_rtol=1e-2,<sp/>confidence_level=0.95,<sp/>outlier_significance_level=0.001,<sp/>lanczos_degree=20,<sp/>lanczos_tol=None,<sp/>orthogonalize=0,<sp/>num_threads=0,<sp/>num_gpu_devices=0,<sp/>gpu=False,<sp/>verbose=False,<sp/>plot=False)\n\n<sp/><sp/><sp/><sp/>Log-determinant<sp/>of<sp/>non-singular<sp/>matrix<sp/>or<sp/>linear<sp/>operator<sp/>using<sp/>stochastic\n<sp/><sp/><sp/><sp/>Lanczos<sp/>quadrature<sp/>method.\n\n<sp/><sp/><sp/><sp/>Given<sp/>the<sp/>symmetric<sp/>matrix<sp/>or<sp/>linear<sp/>operator<sp/>:math:`\\mathbf{A}`<sp/>and<sp/>the\n<sp/><sp/><sp/><sp/>real<sp/>exponent<sp/>:math:`p`,<sp/>the<sp/>following<sp/>is<sp/>computed:\n\n<sp/><sp/><sp/><sp/>..<sp/>math::\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\mathrm{logdet}<sp/>\\left(\\mathbf{A}^p<sp/>\\right)<sp/>=<sp/>p<sp/>\\log_e<sp/>\\vert\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\det<sp/>(\\mathbf{A})<sp/>\\vert.\n\n<sp/><sp/><sp/><sp/>If<sp/>``gram``<sp/>is<sp/>`True`,<sp/>then<sp/>:math:`\\mathbf{A}`<sp/>in<sp/>the<sp/>above<sp/>is<sp/>replaced<sp/>by\n<sp/><sp/><sp/><sp/>the<sp/>Gramian<sp/>matrix<sp/>:math:`\\mathbf{A}^{\\intercal}<sp/>\\mathbf{A}`.<sp/>In<sp/>this\n<sp/><sp/><sp/><sp/>case,<sp/>if<sp/>the<sp/>matrix<sp/>:math:`\\mathvf{A}`<sp/>is<sp/>square,<sp/>then<sp/>the<sp/>following<sp/>is\n<sp/><sp/><sp/><sp/>instead<sp/>computed:\n\n<sp/><sp/><sp/><sp/>..<sp/>math::\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\mathrm{logdet}<sp/>\\left((\\mathbf{A}^{\\intercal}\\mathbf{A})^p\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\right)<sp/>=<sp/>2p<sp/>\\log_e<sp/>\\vert<sp/>\\det<sp/>(\\mathbf{A})<sp/>\\vert.\n\n<sp/><sp/><sp/><sp/>If<sp/>:math:`\\mathbf{A}<sp/>=<sp/>\\mathbf{A}(t)`<sp/>is<sp/>a<sp/>linear<sp/>operator<sp/>of<sp/>the<sp/>class\n<sp/><sp/><sp/><sp/>:class:`imate.AffineMatrixFunction`<sp/>with<sp/>the<sp/>parameter<sp/>:math:`t`,<sp/>then<sp/>for\n<sp/><sp/><sp/><sp/>an<sp/>input<sp/><sp/>tuple<sp/>:math:`t<sp/>=<sp/>(t_1,<sp/>\\dots,<sp/>t_q)`,<sp/>an<sp/>array<sp/>output<sp/>of<sp/>the\n<sp/><sp/><sp/><sp/>size<sp/>:math:`q`<sp/>is<sp/>returned,<sp/>namely:\n\n<sp/><sp/><sp/><sp/>..<sp/>math::\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\mathrm{logdet}<sp/>\\left((\\mathbf{A}(t_i))^p<sp/>\\right),\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\quad<sp/>i=1,<sp/>\\dots,<sp/>q.\n\n<sp/><sp/><sp/><sp/>Parameters\n<sp/><sp/><sp/><sp/>----------\n\n<sp/><sp/><sp/><sp/>A<sp/>:<sp/>numpy.ndarray,<sp/>scipy.sparse,<sp/>:class:`imate.Matrix`,<sp/>or<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:class:`imate.AffineMatrixFunction`\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>non-singular<sp/>sparse<sp/>or<sp/>dense<sp/>matrix<sp/>or<sp/>linear<sp/>operator.<sp/>If<sp/>``gram``\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>`False`,<sp/>then<sp/>`A`<sp/>should<sp/>be<sp/>symmetric.\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>..<sp/>warning::\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>symmetry<sp/>of<sp/>`A`<sp/>is<sp/>not<sp/>pre-checked<sp/>by<sp/>this<sp/>function.<sp/>If\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``gram``<sp/>is<sp/>`False`,<sp/>make<sp/>sure<sp/>`A`<sp/>is<sp/>symmetric.\n\n<sp/><sp/><sp/><sp/>gram<sp/>:<sp/>bool,<sp/>default=False\n<sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>If<sp/>`True`,<sp/>the<sp/>log-determinant<sp/>of<sp/>the<sp/>Gramian<sp/>matrix,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`(\\mathbf{A}^{\\intercal}\\mathbf{A})^p`,<sp/>is<sp/>computed.<sp/>The\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Gramian<sp/>matrix<sp/>itself<sp/>is<sp/>not<sp/>directly<sp/>computed.<sp/>If<sp/>`False`,<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log-determinant<sp/>of<sp/>:math:`\\mathbf{A}^p`<sp/>is<sp/>computed.\n\n<sp/><sp/><sp/><sp/>p<sp/>:<sp/>float,<sp/>default=1.0\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>real<sp/>exponent<sp/>:math:`p`<sp/>in<sp/>:math:`\\mathbf{A}^p`.\n\n<sp/><sp/><sp/><sp/>return_info<sp/>:<sp/>bool,<sp/>default=False\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>`True`,<sp/>this<sp/>function<sp/>also<sp/>returns<sp/>a<sp/>dictionary<sp/>containing\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>information<sp/>about<sp/>the<sp/>inner<sp/>computation,<sp/>such<sp/>as<sp/>process<sp/>time,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>algorithm<sp/>settings,<sp/>etc.\n\n<sp/><sp/><sp/><sp/>parameters<sp/>:<sp/>array_like<sp/>[`float`],<sp/>default=one\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>argument<sp/>is<sp/>relevant<sp/>if<sp/>`A`<sp/>is<sp/>a<sp/>type<sp/>of\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:class:`AffineMatrixFunction`.<sp/>By<sp/>this<sp/>argument,<sp/>multiple<sp/>inquiries,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`(t_1,<sp/>\\dots,<sp/>t_q)`,<sp/>can<sp/>be<sp/>passed<sp/>to<sp/>the<sp/>parameter<sp/>:math:`t`<sp/>of\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>linear<sp/>operator<sp/>:math:`\\mathbf{A}(t)`.<sp/>The<sp/>output<sp/>of<sp/>this<sp/>function\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>becomes<sp/>an<sp/>array<sp/>of<sp/>the<sp/>size<sp/>:math:`q`<sp/>corresponding<sp/>to<sp/>each<sp/>of<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>matrices<sp/>:math:`\\mathbf{A}(t_i)`.\n\n<sp/><sp/><sp/><sp/>min_num_samples<sp/>:<sp/>int,<sp/>default=10\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>minimum<sp/>number<sp/>of<sp/>Monte-Carlo<sp/>samples.<sp/>If<sp/>the<sp/>convergence<sp/>criterion\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>reached<sp/>before<sp/>finishing<sp/>the<sp/>minimum<sp/>number<sp/>of<sp/>iterations,<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterations<sp/>are<sp/>forced<sp/>to<sp/>continue<sp/>till<sp/>the<sp/>minimum<sp/>number<sp/>of<sp/>iterations\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>finished.<sp/>This<sp/>value<sp/>should<sp/>be<sp/>smaller<sp/>than\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``maximum_num_samples``.\n\n<sp/><sp/><sp/><sp/>max_num_samples<sp/>:<sp/>int,<sp/>default=50\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>maximum<sp/>number<sp/>of<sp/>Monte-Carlo<sp/>samples.<sp/>If<sp/>the<sp/>convergence<sp/>criterion\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>not<sp/>reached<sp/>by<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>iterations,<sp/>the<sp/>iterations<sp/>are\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forced<sp/>to<sp/>stop.<sp/>This<sp/>value<sp/>should<sp/>be<sp/>larger<sp/>than\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``minimum_num_samples``.\n\n<sp/><sp/><sp/><sp/>error_atol<sp/>:<sp/>float,<sp/>default=None\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tolerance<sp/>of<sp/>the<sp/>absolute<sp/>error<sp/>of<sp/>convergence<sp/>of<sp/>the<sp/>output.<sp/>Once<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>of<sp/>convergence<sp/>reaches<sp/>``error_atol<sp/>+<sp/>error_rtol<sp/>*<sp/>output``,<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iteration<sp/>is<sp/>terminated.<sp/>If<sp/>the<sp/>convergence<sp/>criterion<sp/>is<sp/>not<sp/>met<sp/>by<sp/>the&quot;</highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tolerance,<sp/>then<sp/>the<sp/>iterations<sp/>continue<sp/>till<sp/>reaching\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``max_num_samples``<sp/>iterations.<sp/>If<sp/>`None`,<sp/>the<sp/>termination<sp/>criterion\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>does<sp/>not<sp/>depend<sp/>on<sp/>this<sp/>parameter.\n\n<sp/><sp/><sp/><sp/>error_rtol<sp/>:<sp/>float,<sp/>default=None\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tolerance<sp/>of<sp/>the<sp/>relative<sp/>error<sp/>of<sp/>convergence<sp/>of<sp/>the<sp/>output.<sp/>Once<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>of<sp/>convergence<sp/>reaches<sp/>``error_atol<sp/>+<sp/>error_rtol<sp/>*<sp/>output``,<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iteration<sp/>is<sp/>terminated.<sp/>If<sp/>the<sp/>convergence<sp/>criterion<sp/>is<sp/>not<sp/>met<sp/>by<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tolerance,<sp/>then<sp/>the<sp/>iterations<sp/>continue<sp/>till<sp/>reaching\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``max_num_samples``<sp/>iterations.<sp/>If<sp/>`None`,<sp/>the<sp/>termination<sp/>criterion\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>does<sp/>not<sp/>depend<sp/>on<sp/>this<sp/>parameter.\n\n<sp/><sp/><sp/><sp/>confidence_level<sp/>:<sp/>float,<sp/>default=0.95\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Confidence<sp/>level<sp/>of<sp/>error,<sp/>which<sp/>is<sp/>a<sp/>number<sp/>between<sp/>`0`<sp/>and<sp/>`1`.<sp/>The\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>of<sp/>convergence<sp/>of<sp/>the<sp/>population<sp/>of<sp/>samples<sp/>is<sp/>defined<sp/>by<sp/>their\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>standard<sp/>deviation<sp/>times<sp/>the<sp/>Z-score,<sp/>which<sp/>depends<sp/>on<sp/>the<sp/>confidence\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>level.<sp/>See<sp/>notes<sp/>below<sp/>for<sp/>details.\n\n<sp/><sp/><sp/><sp/>outlier_significance_level<sp/>:<sp/>float,<sp/>default=0.001\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>One<sp/>minus<sp/>the<sp/>confidence<sp/>level<sp/>of<sp/>the<sp/>uncertainty<sp/>of<sp/>the<sp/>outliers<sp/>of\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>output<sp/>samples.<sp/>This<sp/>is<sp/>a<sp/>number<sp/>between<sp/>`0`<sp/>and<sp/>`1`.\n\n<sp/><sp/><sp/><sp/>lanczos_degree<sp/>:<sp/>int,<sp/>default=20\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>Lanczos<sp/>recursive<sp/>iterations.<sp/>The<sp/>larger<sp/>Lanczos<sp/>degree\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leads<sp/>to<sp/>better<sp/>estimation.<sp/>The<sp/>computational<sp/>cost<sp/>quadratically\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>increases<sp/>with<sp/>the<sp/>Lanczos<sp/>degree.\n\n<sp/><sp/><sp/><sp/>lanczos_tol<sp/>:<sp/>float,<sp/>default=None\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>tolerance<sp/>to<sp/>stop<sp/>the<sp/>Lanczos<sp/>recursive<sp/>iterations<sp/>before\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>end<sp/>of<sp/>iterations<sp/>reached.<sp/>If<sp/>the<sp/>tolerance<sp/>is<sp/>not<sp/>met,<sp/>all<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterations<sp/>(total<sp/>of<sp/>``lanczos_degree``<sp/>iterations)<sp/>continue<sp/>till<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end.<sp/>If<sp/>set<sp/>to<sp/>`None`<sp/>(default<sp/>value),<sp/>the<sp/>machine&apos;<sp/>epsilon<sp/>precision\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>used.<sp/>The<sp/>machine&apos;s<sp/>epsilon<sp/>precision<sp/>is<sp/>as<sp/>follows:\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>For<sp/>32-bit,<sp/>machine<sp/>precision<sp/>is\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`2^{-23}<sp/>=<sp/>1.1920929<sp/>\\times<sp/>10^{-7}`.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>For<sp/>64-bit,<sp/>machine<sp/>precision<sp/>is\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`2^{-5&quot;</highlight><highlight class="stringliteral">&quot;2}<sp/>=<sp/>2.220446049250313<sp/>\\times<sp/>10^{-16}`,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>For<sp/>128-bit,<sp/>machine<sp/>precision<sp/>is\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`2^{-63}<sp/>=<sp/>-1.084202172485504434<sp/>\\times<sp/>10^{-19}`.\n\n<sp/><sp/><sp/><sp/>orthogonalize<sp/>:<sp/>int,<sp/>default=0\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Indicates<sp/>whether<sp/>to<sp/>re-orthogonalize<sp/>the<sp/>eigenvectors<sp/>during<sp/>Lanczos\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recursive<sp/>iterations.\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>set<sp/>to<sp/>`0`,<sp/>no<sp/>orthogonalization<sp/>is<sp/>performed.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>set<sp/>to<sp/>a<sp/>negative<sp/>integer<sp/>or<sp/>an<sp/>integer<sp/>larger<sp/>than\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``lanczos_degree``,<sp/>a<sp/>newly<sp/>computed<sp/>eigenvector<sp/>is<sp/>orthogonalized\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>against<sp/>all<sp/>the<sp/>previous<sp/>eigenvectors<sp/>(also<sp/>known<sp/>as\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>`full<sp/>reorthogonalization`).\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>set<sp/>to<sp/>a<sp/>positive<sp/>integer,<sp/>say<sp/>`q`,<sp/>but<sp/>less<sp/>than\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>``lanczos_degree``,<sp/>the<sp/>newly<sp/>computed<sp/>eigenvector<sp/>is\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orthogonalized<sp/>against<sp/>a<sp/>window<sp/>of<sp/>last<sp/>`q`<sp/>previous<sp/>eigenvectors\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(known<sp/>as<sp/>`partial<sp/>reorthogonalization`).\n\n<sp/><sp/><sp/><sp/>num_threads<sp/>:<sp/>int,<sp/>default=0\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Number<sp/>of<sp/>processor<sp/>threads<sp/>to<sp/>employ<sp/>for<sp/>parallel<sp/>computation<sp/>on<sp/>CPU.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>set<sp/>to<sp/>`0`<sp/>or<sp/>a<sp/>number<sp/>larger<sp/>than<sp/>the<sp/>available<sp/>number<sp/>of<sp/>threads,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all<sp/>threads<sp/>of<sp/>the<sp/>processor<sp/>are<sp/>used.<sp/>The<sp/>parallelization<sp/>is<sp/>performed\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>over<sp/>the<sp/>Monte-Carlo<sp/>iterations.\n\n<sp/><sp/><sp/><sp/>num_gpu_devices<sp/>:<sp/>int<sp/>default=0\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Number<sp/>of<sp/>GPU<sp/>devices<sp/>(if<sp/>available)<sp/>to<sp/>use<sp/>for<sp/>parallel<sp/>multi-GPU\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processing.<sp/>If<sp/>set<sp/>to<sp/>`0`,<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>available<sp/>GPU<sp/>devices\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>used.<sp/>This<sp/>parameter<sp/>is<sp/>relevant<sp/>if<sp/>``gpu``<sp/>is<sp/>`True`.\n\n<sp/><sp/><sp/><sp/>gpu<sp/>:<sp/>bool,<sp/>default=False\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>`True`,<sp/>the<sp/>computations<sp/>are<sp/>performed<sp/>on<sp/>GPU<sp/>devices<sp/>where<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number<sp/>of<sp/>devices<sp/>can<sp/>be<sp/>set<sp/>by<sp/>``num_gpu_devices``.<sp/>If<sp/>no<sp/>GPU<sp/>device\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>found,<sp/>it<sp/>raises<sp/>an<sp/>error.\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>..<sp/>note::\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>performing<sp/>`repetitive`<sp/>computation<sp/>on<sp/>the<sp/>same<sp/>matrix<sp/>on<sp/>GPU,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>is<sp/>recommended<sp/>to<sp/>input<sp/>`A`<sp/>as<sp/>an<sp/>instance<sp/>of\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:class:`imate.Matrix`<sp/>class<sp/>instead<sp/>of<sp/>`numpy`<sp/>or<sp/>`scipy`<sp/>matrices.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>examples<sp/>below<sp/>for<sp/>clarification.\n\n<sp/><sp/><sp/><sp/>verbose<sp/>:<sp/>bool,&quot;</highlight><highlight class="stringliteral">&quot;<sp/>default=False\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Prints<sp/>extra<sp/>information<sp/>about<sp/>the<sp/>computations.\n\n<sp/><sp/><sp/><sp/>plot<sp/>:<sp/>bool,<sp/>default=False\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Plots<sp/>convergence<sp/>of<sp/>samples.<sp/>For<sp/>this,<sp/>the<sp/>packages<sp/>`matplotlib`<sp/>and\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>`seaborn`<sp/>should<sp/>be<sp/>installed.<sp/>If<sp/>no<sp/>display<sp/>is<sp/>available<sp/>(such<sp/>as\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>running<sp/>this<sp/>code<sp/>on<sp/>remote<sp/>machines),<sp/>the<sp/>plots<sp/>are<sp/>saved<sp/>as<sp/>an<sp/>`SVG`\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file<sp/>in<sp/>the<sp/>current<sp/>directory.\n\n<sp/><sp/><sp/><sp/>Returns\n<sp/><sp/><sp/><sp/>-------\n\n<sp/><sp/><sp/><sp/>logdet<sp/>:<sp/>float<sp/>or<sp/>numpy.array\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log-determinant<sp/>of<sp/>`A`.<sp/>If<sp/>`A`<sp/>is<sp/>of<sp/>type\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:class:`imate.AffineMatrixFunction`<sp/>with<sp/>an<sp/>array<sp/>of<sp/>``parameters``,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>then<sp/>the<sp/>output<sp/>is<sp/>an<sp/>array.\n\n<sp/><sp/><sp/><sp/>info<sp/>:<sp/>dict\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Only<sp/>if<sp/>``return_info``<sp/>is<sp/>`True`)<sp/>A<sp/>dictionary<sp/>of<sp/>information<sp/>with\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>following.\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``matrix``:\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``data_type``:<sp/>`str`,<sp/>{`float32`,<sp/>`float64`,<sp/>`float128`}.<sp/>Type<sp/>of\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>matrix<sp/>data.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``gram``:<sp/>`bool`,<sp/>whether<sp/>the<sp/>matrix<sp/>`A`<sp/>or<sp/>its<sp/>Gramian<sp/>is\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>considered.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``exponent``:<sp/>`float`,<sp/>the<sp/>exponent<sp/>`p`<sp/>in<sp/>:math:`\\mathbf{A}^p`.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``size``:<sp/>(int,<sp/>int)<sp/>The<sp/>size<sp/>of<sp/>matrix<sp/>`A`.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``sparse``:<sp/>`bool`,<sp/>whether<sp/>the<sp/>matrix<sp/>`A`<sp/>is<sp/>sparse<sp/>or<sp/>dense.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``nnz``:<sp/>`int`,<sp/>if<sp/>`A`<sp/>is<sp/>sparse,<sp/>the<sp/>number<sp/>of<sp/>non-zero<sp/>elements\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>`A`.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``density``:<sp/>`float`,<sp/>if<sp/>`A`<sp/>is<sp/>sparse,<sp/>the<sp/>density<sp/>of<sp/>`A`,<sp/>which\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>the<sp/>`nnz`<sp/>divided<sp/>by<sp/>size<sp/>squared.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``num_inquiries``:<sp/>`int`,<sp/>the<sp/>size<sp/>of<sp/>inquiries<sp/>of<sp/>each<sp/>parameter\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>linear<sp/>operator<sp/>`A`.<sp/>If<sp/>`A`<sp/>is<sp/>a<sp/>matrix,<sp/>this<sp/>is<sp/>always\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>`1`.<sp/>If<sp/>`A`<sp/>is<sp/>a<sp/>type<sp/>of<sp/>:class:`AffineMatrixFunction`,<sp/>this\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>is<sp/>the<sp/>number<sp/>of<sp/>:math:`t_i`<sp/>parameters.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``num_operator_parameters``:<sp/>`int`,<sp/>number<sp/>of<sp/>parameters<sp/>of<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator<sp/>`A`.<sp/>If<sp/>`A`<sp/>a<sp/>type<sp/>of<sp/>:class:`AffineMatrixFunction`,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>then<sp/>this<sp/>value<sp/>is<sp/>`1`<sp/>corresponding<sp/>to<sp/>one<sp/>parameter<sp/>:math:`t`\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>the<sp/>affine<sp/>function&quot;</highlight><highlight class="stringliteral">&quot;<sp/>`t<sp/>\\mapsto<sp/>\\mathbf{A}<sp/>+<sp/>t<sp/>\\mathbf{B}`.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``parameters``:<sp/>`list`<sp/>[`float`],<sp/>the<sp/>parameters<sp/>of<sp/>the<sp/>linear\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator<sp/>`A`.\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``convergence``:\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``all_converged``:<sp/>`bool`,<sp/>whether<sp/>the<sp/>Monte-Carlo<sp/>sampling\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>converged<sp/>for<sp/>all<sp/>requested<sp/>parameters<sp/>:math:`t_i`.<sp/>If<sp/>all\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entries<sp/>of<sp/>the<sp/>array<sp/>for<sp/>``converged``<sp/>is<sp/>`True``,<sp/>then<sp/>this\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>is<sp/>also<sp/>``True``.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``converged``:<sp/>`array`<sp/>[`bool`],<sp/>whether<sp/>the<sp/>Monte-Carlo<sp/>sampling\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>converged<sp/>for<sp/>each<sp/>of<sp/>the<sp/>requested<sp/>parameters<sp/>:math:`t_i`.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Convergence<sp/>is<sp/>defined<sp/>based<sp/>on<sp/>a<sp/>termination<sp/>criterion,<sp/>such\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>as<sp/>absolute<sp/>or<sp/>relative<sp/>error.<sp/>If<sp/>the<sp/>iterations<sp/>terminated<sp/>due\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>reaching<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>samples,<sp/>this<sp/>value<sp/>is<sp/>`False`.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``min_num_samples``:<sp/>`int`,<sp/>the<sp/>minimum<sp/>number<sp/>of<sp/>Monte-Carlo\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterations.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``max_num_samples``:<sp/>`int`,<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>Monte-Carlo\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterations.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``num_outliers``:<sp/>`int`,<sp/>number<sp/>of<sp/>outliers<sp/>found<sp/>during<sp/>search\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>outliers<sp/>among<sp/>the<sp/>array<sp/>of<sp/>output.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``num_samples_used``:<sp/>`int`,<sp/>number<sp/>of<sp/>Monte-Carlo<sp/>samples<sp/>used\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>produce<sp/>the<sp/>output.<sp/>This<sp/>is<sp/>the<sp/>total<sp/>number<sp/>of<sp/>iterations\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minus<sp/>the<sp/>number<sp/>of<sp/>outliers.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``samples``:<sp/>`array`<sp/>[`float`],<sp/>an<sp/>array<sp/>of<sp/>the<sp/>size\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>`max_num_samples`.<sp/>The<sp/>first<sp/>few<sp/>entries<sp/>(`num_samples_used`)<sp/>of\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>array<sp/>are<sp/>the<sp/>output<sp/>results<sp/>of<sp/>the<sp/>Monte-Carlo<sp/>sampling.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>average<sp/>of<sp/>these<sp/>samples<sp/>is<sp/>the<sp/>final<sp/>result.<sp/>The<sp/>rest<sp/>of\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>array<sp/>is<sp/>`nan`.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``samples_mean``:<sp/>`float`,<sp/>mean<sp/>of<sp/>the<sp/>`samples`<sp/>array,<sp/>excluding\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>`nan`<sp/>values.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``samples_processed_order``:<sp/>`array`<sp/>[`int`],<sp/>in<sp/>parallel\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processing,<sp/>samples<sp/>are<sp/>processed<sp/>in<sp/>non-sequential<sp/>order.<sp/>This\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="stringliteral">&quot;array,<sp/>which<sp/>has<sp/>the<sp/>same<sp/>size<sp/>as<sp/>`samples`,<sp/>keeps<sp/>track<sp/>of<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>order<sp/>in<sp/>which<sp/>each<sp/>sample<sp/>is<sp/>processed.\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``error``:\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``absolute_error``:<sp/>`float`,<sp/>the<sp/>absolute<sp/>error<sp/>of<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convergence<sp/>of<sp/>samples.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``confidence_level``:<sp/>`float`,<sp/>the<sp/>confidence<sp/>level<sp/>used<sp/>to\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calculate<sp/>the<sp/>error<sp/>from<sp/>standard<sp/>deviation<sp/>of<sp/>samples.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``error_atol``:<sp/>`float`,<sp/>the<sp/>tolerance<sp/>of<sp/>absolute<sp/>error<sp/>of<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convergence<sp/>of<sp/>samples.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``error_rtol``:<sp/>`float`,<sp/>the<sp/>tolerance<sp/>of<sp/>relative<sp/>error<sp/>of<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convergence<sp/>of<sp/>samples.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``outlier_significance_level``:<sp/>`float`,<sp/>the<sp/>significance<sp/>level\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used<sp/>to<sp/>determine<sp/>the<sp/>outliers<sp/>in<sp/>samples.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``relative_error``:<sp/>`float`,<sp/>the<sp/>relative<sp/>error<sp/>of<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convergence<sp/>of<sp/>samples.\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``device``:\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``num_cpu_threads``:<sp/>`int`,<sp/>number<sp/>of<sp/>CPU<sp/>threads<sp/>used<sp/>in<sp/>shared\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memory<sp/>parallel<sp/>processing.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``num_gpu_devices``:<sp/>`int`,<sp/>number<sp/>of<sp/>GPU<sp/>devices<sp/>used<sp/>in<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multi-GPU<sp/>(GPU<sp/>farm)<sp/>computation.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``num_gpu_multiprocessors``:<sp/>`int`,<sp/>number<sp/>of<sp/>GPU\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multi-processors.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``num_gpu_threads_per_multiprocessor``:<sp/>`int`,<sp/>number<sp/>of<sp/>GPU\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threads<sp/>on<sp/>each<sp/>GPU<sp/>multi-processor.\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``time``:\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``tot_wall_time``:<sp/>`float`,<sp/>total<sp/>elapsed<sp/>time<sp/>of<sp/>computation.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``alg_wall_time``:<sp/>`float`,<sp/>elapsed<sp/>time<sp/>of<sp/>computation<sp/>during\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>only<sp/>the<sp/>algorithm<sp/>execution.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``cpu_proc_time``:<sp/>`float`,<sp/>the<sp/>CPU<sp/>processing<sp/>time<sp/>of\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>computation.\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``solver``:\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``version``:<sp/>`str`,<sp/>version<sp/>of<sp/>imate.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``method``:<sp/>&apos;slq&apos;.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``lanczos_degree``:<sp/>`bool`,<sp/>Lanczos<sp/>degree.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``lanczos_tol``:<sp/>`float`,<sp/>Lanczos<sp/>tolerance.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>``orthogonalize``:<sp/>`int`,<sp/>orthogonalization<sp/>flag.&quot;</highlight><highlight class="stringliteral">&quot;\n\n<sp/><sp/><sp/><sp/>Raises\n<sp/><sp/><sp/><sp/>------\n\n<sp/><sp/><sp/><sp/>ImportError\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>package<sp/>has<sp/>not<sp/>been<sp/>compiled<sp/>with<sp/>GPU<sp/>support,<sp/>but<sp/>``gpu``<sp/>is\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set<sp/>to<sp/>`True`.<sp/>To<sp/>resolve<sp/>the<sp/>issue,<sp/>set<sp/>``gpu``<sp/>to<sp/>`False`<sp/>to<sp/>be<sp/>able\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>use<sp/>the<sp/>existing<sp/>installation.<sp/>Alternatively,<sp/><sp/>export<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>environment<sp/>variable<sp/>``USE_CUDA=1``<sp/>and<sp/>recompile<sp/>the<sp/>source<sp/>code<sp/>of\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>package.\n\n<sp/><sp/><sp/><sp/>See<sp/>Also\n<sp/><sp/><sp/><sp/>--------\n\n<sp/><sp/><sp/><sp/>imate.trace\n<sp/><sp/><sp/><sp/>imate.traceinv\n<sp/><sp/><sp/><sp/>imate.schatten\n\n<sp/><sp/><sp/><sp/>Notes\n<sp/><sp/><sp/><sp/>-----\n\n<sp/><sp/><sp/><sp/>**Computational<sp/>Complexity:**\n\n<sp/><sp/><sp/><sp/>This<sp/>method<sp/>uses<sp/>stochastic<sp/>Lanczos<sp/>quadrature<sp/>(SLQ),<sp/>which<sp/>is<sp/>a<sp/>randomized\n<sp/><sp/><sp/><sp/>algorithm.<sp/>The<sp/>computational<sp/>complexity<sp/>of<sp/>this<sp/>method<sp/>is\n\n<sp/><sp/><sp/><sp/>..<sp/>math::\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\mathcal{O}((\\rho<sp/>n^2<sp/>+<sp/>n<sp/>l)<sp/>s<sp/>l),\n\n<sp/><sp/><sp/><sp/>where<sp/>:math:`n`<sp/>is<sp/>the<sp/>matrix<sp/>size,<sp/>:math:`\\rho`<sp/>is<sp/>the<sp/>density<sp/>of\n<sp/><sp/><sp/><sp/>sparse<sp/>matrix<sp/>(for<sp/>dense<sp/>matrix,<sp/>:math:`\\rho=1`),<sp/>:math:`l`<sp/>is<sp/>the\n<sp/><sp/><sp/><sp/>Lanczos<sp/>degree<sp/>(set<sp/>with<sp/>``lanczos_degree``),<sp/>and<sp/>:math:`s`<sp/>is<sp/>the<sp/>number\n<sp/><sp/><sp/><sp/>of<sp/>samples<sp/>(set<sp/>with<sp/>``min_num_samples``<sp/>and<sp/>``max_num_samples``).\n\n<sp/><sp/><sp/><sp/>This<sp/>method<sp/>can<sp/>be<sp/>used<sp/>on<sp/>very<sp/>large<sp/>matrices<sp/>(:math:`n<sp/>&gt;<sp/>2^{12}`).<sp/>The\n<sp/><sp/><sp/><sp/>solution<sp/>is<sp/>an<sp/>approximation.\n\n<sp/><sp/><sp/><sp/>**Input<sp/>Matrix:**\n\n<sp/><sp/><sp/><sp/>The<sp/>input<sp/>`A`<sp/>can<sp/>be<sp/>either<sp/>of:\n\n<sp/><sp/><sp/><sp/>*<sp/>A<sp/>matrix,<sp/>such<sp/>as<sp/>`numpy.ndarray`,<sp/>or<sp/>`scipy.sparse`.\n<sp/><sp/><sp/><sp/>*<sp/>A<sp/>linear<sp/>operator<sp/>representing<sp/>a<sp/>matrix<sp/>using<sp/>:class:`imate.Matrix`.\n<sp/><sp/><sp/><sp/>*<sp/>A<sp/>linear<sp/>operator<sp/>representing<sp/>a<sp/>one-parameter<sp/>family<sp/>of<sp/>an<sp/>affine<sp/>matrix\n<sp/><sp/><sp/><sp/><sp/><sp/>function<sp/>:math:`t<sp/>\\mapsto<sp/>\\mathbf{A}<sp/>+<sp/>t\\mathbf{B}`<sp/>using\n<sp/><sp/><sp/><sp/><sp/><sp/>:class:`imate.AffineMatrixFunction`.\n\n<sp/><sp/><sp/><sp/>**Output:**\n\n<sp/><sp/><sp/><sp/>The<sp/>output<sp/>is<sp/>a<sp/>scalar.<sp/>However,<sp/>if<sp/>`A`<sp/>is<sp/>the<sp/>linear<sp/>operator\n<sp/><sp/><sp/><sp/>:math:`\\mathbf{A}(t)<sp/>=<sp/>\\mathbf{A}<sp/>+<sp/>t<sp/>\\mathbf{B}`<sp/>where<sp/>:math:`t`<sp/>is\n<sp/><sp/><sp/><sp/>given<sp/>as<sp/>the<sp/>tuple<sp/>:math:`t<sp/>=<sp/>(t_1,<sp/>\\dots,<sp/>t_q)`,<sp/>then<sp/>the<sp/>output<sp/>of<sp/>this\n<sp/><sp/><sp/><sp/>function<sp/>is<sp/>an<sp/>array<sp/>of<sp/>size<sp/>:math:`q`<sp/>corresponding<sp/>to<sp/>the\n<sp/><sp/><sp/><sp/>log-determinant<sp/>of<sp/>each<sp/>:math:`\\mathbf{A}(t_i)`.\n\n<sp/><sp/><sp/><sp/>..<sp/>note::\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>`A`<sp/>represents\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`\\mathbf{A}(t)<sp/>=<sp/>\\mathb&quot;</highlight><highlight class="stringliteral">&quot;f{A}<sp/>+<sp/>t<sp/>\\mathbf{I}`,<sp/>where\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`\\mathbf{I}`<sp/>is<sp/>the<sp/>identity<sp/>matrix,<sp/>and<sp/>:math:`t`<sp/>is<sp/>given<sp/>by\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>tuple<sp/>:math:`t<sp/>=<sp/>(t_1,<sp/>\\dots,<sp/>t_q)`,<sp/>the<sp/>computational<sp/>cost<sp/>of<sp/>an\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array<sp/>output<sp/>of<sp/>size<sp/>`q`<sp/>is<sp/>the<sp/>same<sp/>as<sp/>computing<sp/>for<sp/>a<sp/>single\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`t_i`.<sp/>Namely,<sp/>the<sp/>log-determinant<sp/>of<sp/>only\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`\\mathbf{A}(t_1)`<sp/>is<sp/>computed,<sp/>and<sp/>the<sp/>log-determinant<sp/>of<sp/>the\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rest<sp/>of<sp/>:math:`i=2,<sp/>\\dots,<sp/>q`<sp/>are<sp/>obtained<sp/>from<sp/>the<sp/>result<sp/>of\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`t_1`<sp/>immediately.\n\n<sp/><sp/><sp/><sp/>**Algorithm:**\n\n<sp/><sp/><sp/><sp/>If<sp/>``gram``<sp/>is<sp/>`False`,<sp/>the<sp/>Lanczos<sp/>tri-diagonalization<sp/>method<sp/>is\n<sp/><sp/><sp/><sp/>used.<sp/>This<sp/>method<sp/>requires<sp/>only<sp/>matrix-vector<sp/>multiplication.<sp/>If\n<sp/><sp/><sp/><sp/>``gram``<sp/>is<sp/>`True`,<sp/>the<sp/>Golub-Kahn<sp/>bi-diagonalization<sp/>method<sp/>is<sp/>used.<sp/>This\n<sp/><sp/><sp/><sp/>method<sp/>requires<sp/>both<sp/>matrix-vector<sp/>multiplication<sp/>and<sp/>transposed-matrix\n<sp/><sp/><sp/><sp/>vector<sp/>multiplications.\n\n<sp/><sp/><sp/><sp/>**Convergence<sp/>criterion:**\n\n<sp/><sp/><sp/><sp/>Let<sp/>:math:`n_{\\min}`<sp/>and<sp/>:math:`n_{\\max}`<sp/>be<sp/>the<sp/>minimum<sp/>and<sp/>maximum\n<sp/><sp/><sp/><sp/>number<sp/>of<sp/>iterations<sp/>respectively<sp/>defined<sp/>by<sp/>``min_num_samples``<sp/>and\n<sp/><sp/><sp/><sp/>``max_num_samples``.<sp/>The<sp/>iterations<sp/>terminate<sp/>at\n<sp/><sp/><sp/><sp/>:math:`n_{\\min}<sp/>\\leq<sp/>i<sp/>\\leq<sp/>n_{\\max}`<sp/>where<sp/>:math:`i`<sp/>is<sp/>the\n<sp/><sp/><sp/><sp/>iteration<sp/>counter.<sp/>The<sp/>iterations<sp/>stop<sp/>earlier<sp/>at<sp/>:math:`i<sp/>&lt;<sp/>n_{\\max}`<sp/>if\n<sp/><sp/><sp/><sp/>the<sp/>convergence<sp/>error<sp/>of<sp/>the<sp/>mean<sp/>of<sp/>the<sp/>samples<sp/>is<sp/>satisfied,<sp/>as<sp/>follows.\n\n<sp/><sp/><sp/><sp/>Suppose<sp/>:math:`s(j)`<sp/>and<sp/>:math:`\\sigma(i)`<sp/>are<sp/>respectively<sp/>the<sp/>mean<sp/>and\n<sp/><sp/><sp/><sp/>standard<sp/>deviation<sp/>of<sp/>samples<sp/>after<sp/>:math:`j`<sp/>iterations.<sp/>The<sp/>error<sp/>of\n<sp/><sp/><sp/><sp/>convergence,<sp/>:math:`e(j)`,<sp/>is<sp/>defined<sp/>by\n\n<sp/><sp/><sp/><sp/>..<sp/>math::\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e(j)<sp/>=<sp/>\\frac{\\sigma(j)}{\\sqrt{j}}<sp/>Z\n\n<sp/><sp/><sp/><sp/>where<sp/>:math:`Z`<sp/>is<sp/>the<sp/>Z-score<sp/>defined<sp/>by\n\n<sp/><sp/><sp/><sp/>..<sp/>math::\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Z<sp/>=<sp/>\\sqrt{2}<sp/>\\mathrm{erf}^{-1}(\\phi).\n\n<sp/><sp/><sp/><sp/>In<sp/>the<sp/>above,<sp/>:math:`\\phi`<sp/>is<sp/>the<sp/>confidence<sp/>level<sp/>and<sp/>set<sp/>by\n<sp/><sp/><sp/><sp/>``confidence_level``<sp/>argument,<sp/>and<sp/>:math:`\\mathrm{erf}^{-1}`<sp/>is<sp/>the\n<sp/><sp/><sp/><sp/>inverse<sp/>error<sp/>function.<sp/>A<sp/>confidence<sp/>level<sp/>of<sp/>95%,<sp/>for<sp/>instance,<sp/>means<sp/>that\n<sp/><sp/><sp/><sp/>the<sp/>Z-score<sp/>is<sp/>1.96,<sp/>which<sp/>means<sp/>the<sp/>confidence<sp/>interval<sp/>is&quot;</highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/>:math:`\\pm<sp/>1.96<sp/>\\sigma`.\n\n<sp/><sp/><sp/><sp/>The<sp/>termination<sp/>criterion<sp/>is\n\n<sp/><sp/><sp/><sp/>..<sp/>math::\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e(j)<sp/>&lt;<sp/>\\epsilon_a<sp/>+<sp/>s(j)<sp/>\\epsilon_r,\n\n<sp/><sp/><sp/><sp/>where<sp/>:math:`\\epsilon_{a}`<sp/>and<sp/>:math:`\\epsilon_r`<sp/>are<sp/>the<sp/>absolute<sp/>and\n<sp/><sp/><sp/><sp/>relative<sp/>error<sp/>tolerances<sp/>respectively,<sp/>and<sp/>they<sp/>are<sp/>set<sp/>by<sp/>``error_atol``\n<sp/><sp/><sp/><sp/>and<sp/>``error_rtol``.\n\n<sp/><sp/><sp/><sp/>**Convergence<sp/>for<sp/>the<sp/>case<sp/>of<sp/>multiple<sp/>parameters:**\n\n<sp/><sp/><sp/><sp/>When<sp/>`A`<sp/>is<sp/>a<sp/>type<sp/>of<sp/>:class:`imate.AffineMatrixFunction`<sp/>representing<sp/>the\n<sp/><sp/><sp/><sp/>affine<sp/>matrix<sp/>function<sp/>:math:`\\mathbf{A}(t)<sp/>=<sp/>\\mathbf{A}<sp/>+<sp/>t<sp/>\\mathbf{B}`\n<sp/><sp/><sp/><sp/>and<sp/>if<sp/>multiple<sp/>parameters<sp/>:math:`t_i`,<sp/>:math:`i=1,\\dots,<sp/>q`<sp/>are<sp/>passed<sp/>to\n<sp/><sp/><sp/><sp/>this<sp/>function<sp/>through<sp/>``parameters``<sp/>argument,<sp/>the<sp/>convergence<sp/>criterion\n<sp/><sp/><sp/><sp/>has<sp/>to<sp/>be<sp/>satisfied<sp/>for<sp/>each<sp/>of<sp/>:math:`\\mathbf{A}(t_i)`.<sp/>Specifically,<sp/>the\n<sp/><sp/><sp/><sp/>iterations<sp/>are<sp/>terminated<sp/>as<sp/>follows:\n\n<sp/><sp/><sp/><sp/>*<sp/>If<sp/>:math:`\\mathbf{B}`<sp/>is<sp/>the<sp/>identity<sp/>matrix,<sp/>iterations<sp/>for<sp/>all\n<sp/><sp/><sp/><sp/><sp/><sp/>:math:`\\mathbf{A}(t_i)`<sp/>continue<sp/>till<sp/>the<sp/>convergence<sp/>criterion<sp/>for\n<sp/><sp/><sp/><sp/><sp/><sp/>*all*<sp/>:math:`t_i`<sp/>are<sp/>satisfied.<sp/>That<sp/>is,<sp/>even<sp/>if<sp/>:math:`t=t_i`<sp/>is\n<sp/><sp/><sp/><sp/><sp/><sp/>converged<sp/>but<sp/>:math:`t=t_j`<sp/>has<sp/>not<sp/>converged<sp/>yet,<sp/>the<sp/>iterations<sp/>for\n<sp/><sp/><sp/><sp/><sp/><sp/>:math:`t=t_i`<sp/>will<sp/>continue.\n<sp/><sp/><sp/><sp/><sp/><sp/>:\n<sp/><sp/><sp/><sp/>*<sp/>If<sp/>:math:`\\mathbf{B}`<sp/>is<sp/>not<sp/>the<sp/>identity<sp/>matrix,<sp/>the<sp/>iterations<sp/>for\n<sp/><sp/><sp/><sp/><sp/><sp/>each<sp/>of<sp/>:math:`t_i`<sp/>are<sp/>independent.<sp/>That<sp/>is,<sp/>if<sp/>:math:`t=t_i`<sp/>converges,\n<sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>iterations<sp/>for<sp/>that<sp/>parameter<sp/>will<sp/>stop<sp/>regardless<sp/>of<sp/>the<sp/>convergence\n<sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>of<sp/>other<sp/>parameters.\n\n<sp/><sp/><sp/><sp/>**Plotting:**\n\n<sp/><sp/><sp/><sp/>If<sp/>``plot``<sp/>is<sp/>set<sp/>to<sp/>`True`,<sp/>it<sp/>plots<sp/>the<sp/>convergence<sp/>of<sp/>samples<sp/>and<sp/>their\n<sp/><sp/><sp/><sp/>relative<sp/>error.\n\n<sp/><sp/><sp/><sp/>*<sp/>If<sp/>no<sp/>graphical<sp/>backend<sp/>exists<sp/>(such<sp/>as<sp/>running<sp/>the<sp/>code<sp/>on<sp/>a<sp/>remote\n<sp/><sp/><sp/><sp/><sp/><sp/>server<sp/>or<sp/>manually<sp/>disabling<sp/>the<sp/>X11<sp/>backend),<sp/>the<sp/>plot<sp/>will<sp/>not<sp/>be\n<sp/><sp/><sp/><sp/><sp/><sp/>shown,<sp/>rather,<sp/>it<sp/>will<sp/>be<sp/>saved<sp/>as<sp/>an<sp/>``svg``<sp/>file<sp/>in<sp/>the<sp/>current\n<sp/><sp/><sp/><sp/><sp/><sp/>directory.\n<sp/><sp/><sp/><sp/>*<sp/>If<sp/>the<sp/>executable<sp/>``latex``<sp/>is<sp/>available<sp/>on<sp/>``PATH``,<sp/>the<sp/>plot<sp/>is\n<sp/><sp/><sp/><sp/><sp/><sp/>rendered<sp/>using<sp/>:math:`\\rm\\LaTeX`<sp/>and<sp/>it<sp/>may<sp/>take<sp/>slightly<sp/>longer<sp/>to\n<sp/><sp/><sp/><sp/><sp/><sp/>produce<sp/>the<sp/>plot.\n<sp/><sp/><sp/><sp/>*<sp/>I&quot;</highlight><highlight class="stringliteral">&quot;f<sp/>:math:`\\rm\\LaTeX`<sp/>is<sp/>not<sp/>installed,<sp/>it<sp/>uses<sp/>any<sp/>available<sp/>San-Serif\n<sp/><sp/><sp/><sp/><sp/><sp/>font<sp/>to<sp/>render<sp/>the<sp/>plot.\n\n<sp/><sp/><sp/><sp/>To<sp/>manually<sp/>disable<sp/>interactive<sp/>plot<sp/>display<sp/>and<sp/>save<sp/>the<sp/>plot<sp/>as\n<sp/><sp/><sp/><sp/>``svg``<sp/>instead,<sp/>add<sp/>the<sp/>following<sp/>at<sp/>the<sp/>very<sp/>beginning<sp/>of<sp/>your<sp/>code\n<sp/><sp/><sp/><sp/>before<sp/>importing<sp/>:mod:`imate`:\n\n<sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>import<sp/>os\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>os.environ[&apos;IMATE_NO_DISPLAY&apos;]<sp/>=<sp/>&apos;True&apos;\n\n<sp/><sp/><sp/><sp/>References\n<sp/><sp/><sp/><sp/>----------\n\n<sp/><sp/><sp/><sp/>*<sp/>`Ubaru,<sp/>S.,<sp/>Chen,<sp/>J.,<sp/>and<sp/>Saad,<sp/>Y.<sp/>(2017)\n<sp/><sp/><sp/><sp/><sp/><sp/>&lt;https://www-users.cs.umn.edu/~saad/PDF/ys-2016-04.pdf&gt;`_,\n<sp/><sp/><sp/><sp/><sp/><sp/>Fast<sp/>Estimation<sp/>of<sp/>:math:`\\mathrm{tr}(F(A))`<sp/>Via<sp/>Stochastic<sp/>Lanczos\n<sp/><sp/><sp/><sp/><sp/><sp/>Quadrature,<sp/>SIAM<sp/>J.<sp/>Matrix<sp/>Anal.<sp/>Appl.,<sp/>38(4),<sp/>1075-1099.\n\n<sp/><sp/><sp/><sp/>Examples\n<sp/><sp/><sp/><sp/>--------\n\n<sp/><sp/><sp/><sp/>**Symmetric<sp/>Input<sp/>Matrix:**\n\n<sp/><sp/><sp/><sp/>The<sp/>`slq`<sp/>method<sp/>requires<sp/>the<sp/>input<sp/>matrix<sp/>of<sp/>:func:`imate.logdet`<sp/>function\n<sp/><sp/><sp/><sp/>to<sp/>be<sp/>symmetric<sp/>when<sp/>``gram``<sp/>is<sp/>`False`.<sp/>For<sp/>the<sp/>first<sp/>example,<sp/>generate<sp/>a\n<sp/><sp/><sp/><sp/>symmetric<sp/>sample<sp/>matrix<sp/>using<sp/>:func:`imate.toeplitz`<sp/>function<sp/>as<sp/>follows:\n\n<sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Import<sp/>packages\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>imate<sp/>import<sp/>toeplitz\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Generate<sp/>a<sp/>symmetric<sp/>matrix<sp/>by<sp/>setting<sp/>gram=True.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>A<sp/>=<sp/>toeplitz(2,<sp/>1,<sp/>size=100,<sp/>gram=True)\n\n<sp/><sp/><sp/><sp/>In<sp/>the<sp/>above,<sp/>by<sp/>passing<sp/>``gram=True``<sp/>to<sp/>:func:`imate.toeplitz`<sp/>function,\n<sp/><sp/><sp/><sp/>the<sp/>Gramian<sp/>of<sp/>the<sp/>Toeplitz<sp/>matrix<sp/>is<sp/>returned,<sp/>which<sp/>is<sp/>symmetric.<sp/>Compute\n<sp/><sp/><sp/><sp/>the<sp/>log-determinant<sp/>of<sp/>:math:`\\mathbf{A}^{2.5}`:\n\n<sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Import<sp/>packages\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>imate<sp/>import<sp/>logdet\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Compute<sp/>the<sp/>log-determinant\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>logdet(A,<sp/>gram=False,<sp/>p=2.5,<sp/>method=&apos;slq&apos;)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>277.00578301560057\n\n<sp/><sp/><sp/><sp/>..<sp/>note:\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Since<sp/>`slq`<sp/>is<sp/>a<sp/>stochastic<sp/>method,<sp/>the<sp/>above<sp/>result<sp/>slightly\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>differs<sp/>after<sp/>each<sp/>run.\n\n<sp/><sp/><sp/><sp/>**Gramian<sp/>Matrix:**\n\n<sp/><sp/><sp/><sp/>Passing<sp/>``gram=True``<sp/>to<sp/>:func:`imate.logdet`<sp/>function<sp/>uses<sp/>the<sp/>Gramian\n<sp/><sp/><sp/><sp/>of<sp/>the<sp/>input<sp/>matrix.<sp/>n<sp/>this<sp/>case,<sp/>the<sp/>input<sp/>matrix<sp/>can<sp/>be<sp/>non-symmetric.\n<sp/><sp/><sp/><sp/>In<sp/>the<sp/>next<sp/>example,<sp/>g&quot;</highlight><highlight class="stringliteral">&quot;enerate<sp/>a<sp/>non-symmetric<sp/>matrix,<sp/>:math:`\\mathbf{B}`,\n<sp/><sp/><sp/><sp/>then<sp/>compute<sp/>the<sp/>log-determinant<sp/>of\n<sp/><sp/><sp/><sp/>:math:`(\\mathbf{B}^{\\intercal}<sp/>\\mathbf{B})^{2.5}`.\n\n<sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Generate<sp/>a<sp/>non-symmetric<sp/>matrix<sp/>by<sp/>setting<sp/>gram=False\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>B<sp/>=<sp/>toeplitz(2,<sp/>1,<sp/>size=100,<sp/>gram=False)\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Compute<sp/>log-determinant<sp/>of<sp/>Gramian<sp/>by<sp/>passing<sp/>gram=True\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>logdet(B,<sp/>gram=True,<sp/>p=2.5,<sp/>method=&apos;slq&apos;)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>275.15518680196476\n\n<sp/><sp/><sp/><sp/>Note<sp/>that<sp/>the<sp/>result<sp/>of<sp/>the<sp/>two<sp/>examples<sp/>in<sp/>the<sp/>above<sp/>are<sp/>the<sp/>similar<sp/>since\n<sp/><sp/><sp/><sp/>the<sp/>input<sp/>matrix<sp/>:math:`\\mathbf{A}`<sp/>of<sp/>the<sp/>first<sp/>example<sp/>is<sp/>the<sp/>Gramian<sp/>of\n<sp/><sp/><sp/><sp/>the<sp/>input<sp/>matrix<sp/>:math:`\\mathbf{B}`<sp/>in<sp/>the<sp/>second<sp/>example,<sp/>that<sp/>is\n<sp/><sp/><sp/><sp/>:math:`\\mathbf{A}<sp/>=<sp/>\\mathbf{B}^{\\intercal}<sp/>\\mathbf{B}`.<sp/>Since<sp/>the\n<sp/><sp/><sp/><sp/>second<sp/>example<sp/>uses<sp/>the<sp/>Gramian<sp/>of<sp/>the<sp/>input<sp/>matrix,<sp/>it<sp/>computes<sp/>the<sp/>same\n<sp/><sp/><sp/><sp/>quantity<sp/>as<sp/>the<sp/>first<sp/>example.\n\n<sp/><sp/><sp/><sp/>**Verbose<sp/>output:**\n\n<sp/><sp/><sp/><sp/>By<sp/>setting<sp/>``verbose``<sp/>to<sp/>`True`,<sp/>useful<sp/>info<sp/>about<sp/>the<sp/>process<sp/>is\n<sp/><sp/><sp/><sp/>printed.\n\n<sp/><sp/><sp/><sp/>..<sp/>literalinclude::<sp/>../_static/data/imate.logdet.slq-verbose-1.txt\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:language:<sp/>python\n\n<sp/><sp/><sp/><sp/>**Output<sp/>information:**\n\n<sp/><sp/><sp/><sp/>Print<sp/>information<sp/>about<sp/>the<sp/>inner<sp/>computation:\n\n<sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>ld,<sp/>info<sp/>=<sp/>logdet(A,<sp/>method=&apos;slq&apos;,<sp/>return_info=True)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>print(ld)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>138.6294361119891\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Print<sp/>dictionary<sp/>neatly<sp/>using<sp/>pprint\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>pprint<sp/>import<sp/>pprint\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>pprint(info)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;matrix&apos;:<sp/>{\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;data_type&apos;:<sp/>b&apos;float64&apos;,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;density&apos;:<sp/>0.0298,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;exponent&apos;:<sp/>1.0,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;gram&apos;:<sp/>False,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;nnz&apos;:<sp/>298,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;num_inquiries&apos;:<sp/>1,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;num_operator_parameters&apos;:<sp/>0,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;parameters&apos;:<sp/>None,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;size&apos;:<sp/>(100,<sp/>100),\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;sparse&apos;:<sp/>True\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;convergence&apos;:<sp/>{\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;all_converged&apos;:<sp/>False,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;converged&apos;:<sp/>False,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;&quot;</highlight><highlight class="stringliteral">&quot;max_num_samples&apos;:<sp/>50,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;min_num_samples&apos;:<sp/>10,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;num_outliers&apos;:<sp/>0,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;num_samples_used&apos;:<sp/>50,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;samples&apos;:<sp/>array([124.65021242,<sp/>...,<sp/>143.27314446]),\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;samples_mean&apos;:<sp/>139.89509513079338,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;samples_processed_order&apos;:<sp/>array([<sp/>4,<sp/>...,<sp/>47])\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;error&apos;:<sp/>{\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;absolute_error&apos;:<sp/>2.345203485787551,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;confidence_level&apos;:<sp/>0.95,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;error_atol&apos;:<sp/>0.0,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;error_rtol&apos;:<sp/>0.01,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;outlier_significance_level&apos;:<sp/>0.001,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;relative_error&apos;:<sp/>0.01676401508998531\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;solver&apos;:<sp/>{\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;lanczos_degree&apos;:<sp/>20,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;lanczos_tol&apos;:<sp/>2.220446049250313e-16,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;method&apos;:<sp/>&apos;slq&apos;,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;orthogonalize&apos;:<sp/>0,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;version&apos;:<sp/>&apos;0.15.0&apos;\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;device&apos;:<sp/>{\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;num_cpu_threads&apos;:<sp/>8,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;num_gpu_devices&apos;:<sp/>0,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;num_gpu_multiprocessors&apos;:<sp/>0,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;num_gpu_threads_per_multiprocessor&apos;:<sp/>0\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;time&apos;:<sp/>{\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;alg_wall_time&apos;:<sp/>0.002254009246826172,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;cpu_proc_time&apos;:<sp/>0.01330678200000035,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;tot_wall_time&apos;:<sp/>0.0023698790464550257\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\n\n<sp/><sp/><sp/><sp/>**Large<sp/>matrix:**\n\n<sp/><sp/><sp/><sp/>Compute<sp/>the<sp/>log-determinant<sp/>of<sp/>a<sp/>very<sp/>large<sp/>sparse<sp/>matrix<sp/>using<sp/>at<sp/>least\n<sp/><sp/><sp/><sp/>`100`<sp/>samples:\n\n<sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:emphasize-lines:<sp/>6,<sp/>7\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Generate<sp/>a<sp/>matrix<sp/>of<sp/>size<sp/>one<sp/>million\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>A<sp/>=<sp/>toeplitz(2,<sp/>1,<sp/>size=1000000,<sp/>gram=True)\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Approximate<sp/>log-determinant<sp/>using<sp/>stochastic<sp/>Lanczos<sp/>quadrature\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>with<sp/>at<sp/>least<sp/>100<sp/>Monte-Carlo<sp/>sampling\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>ld,<sp/>info<sp/>=<sp/>logdet(A,<sp/>method=&apos;slq&apos;,<sp/>min_num_samples=100,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_num_samples=200,<sp/>return_info=True)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>print(ld)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1386320.4734751645\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Find<sp/>the<sp/>time<sp/>it<sp/>too&quot;</highlight><highlight class="stringliteral">&quot;k<sp/>to<sp/>compute<sp/>the<sp/>above\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>print(info[&apos;time&apos;])\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;tot_wall_time&apos;:<sp/>16.598053652094677,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;alg_wall_time&apos;:<sp/>16.57977867126465,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&apos;cpu_proc_time&apos;:<sp/>113.03275911399999\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\n\n<sp/><sp/><sp/><sp/>Compare<sp/>the<sp/>result<sp/>of<sp/>the<sp/>above<sp/>approximation<sp/>with<sp/>the<sp/>exact<sp/>solution<sp/>of\n<sp/><sp/><sp/><sp/>the<sp/>log-determinant<sp/>using<sp/>the<sp/>analytic<sp/>relation<sp/>for<sp/>Toeplitz<sp/>matrix.<sp/>See\n<sp/><sp/><sp/><sp/>:func:`imate.sample_matrices.toeplitz_logdet`<sp/>for<sp/>details.\n\n<sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>imate.sample_matrices<sp/>import<sp/>toeplitz_logdet\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>toeplitz_logdet(2,<sp/>1,<sp/>size=1000000,<sp/>gram=True)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1386294.3611198906\n\n<sp/><sp/><sp/><sp/>It<sp/>can<sp/>be<sp/>seen<sp/>that<sp/>the<sp/>error<sp/>of<sp/>approximation<sp/>is<sp/>:math:`0.0018<sp/>\\%`.<sp/>This\n<sp/><sp/><sp/><sp/>accuracy<sp/>is<sp/>remarkable<sp/>considering<sp/>that<sp/>the<sp/>computation<sp/>on<sp/>such<sp/>a<sp/>large\n<sp/><sp/><sp/><sp/>matrix<sp/>took<sp/>only<sp/>16<sp/>seconds.<sp/>Computing<sp/>the<sp/>log-determinant<sp/>of<sp/>such<sp/>a\n<sp/><sp/><sp/><sp/>large<sp/>matrix<sp/>using<sp/>any<sp/>of<sp/>the<sp/>exact<sp/>methods<sp/>(such<sp/>as<sp/>``cholesky``<sp/>or\n<sp/><sp/><sp/><sp/>``eigenvalue``)<sp/>is<sp/>infeasible.\n\n<sp/><sp/><sp/><sp/>**Plotting:**\n\n<sp/><sp/><sp/><sp/>By<sp/>setting<sp/>``plot``<sp/>to<sp/>`True`,<sp/>plots<sp/>of<sp/>samples<sp/>during<sp/>Monte-Carlo\n<sp/><sp/><sp/><sp/>iterations<sp/>and<sp/>the<sp/>convergence<sp/>of<sp/>their<sp/>mean<sp/>are<sp/>generated.\n\n<sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>A<sp/>=<sp/>toeplitz(2,<sp/>1,<sp/>size=1000000,<sp/>gram=True)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>logdet(A,<sp/>method=&apos;slq&apos;,<sp/>min_num_samples=20,<sp/>max_num_samples=80,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_rtol=2e-4,<sp/>confidence_level=0.95,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outlier_significance_level=0.001,<sp/>plot=True)\n\n<sp/><sp/><sp/><sp/>..<sp/>image::<sp/>../_static/images/plots/logdet_slq_convergence_1.png\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:align:<sp/>center\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:class:<sp/>custom-dark\n\n<sp/><sp/><sp/><sp/>In<sp/>the<sp/>left<sp/>plot,<sp/>the<sp/>samples<sp/>are<sp/>shown<sp/>in<sp/>circles<sp/>and<sp/>the<sp/>cumulative<sp/>mean\n<sp/><sp/><sp/><sp/>of<sp/>the<sp/>samples<sp/>is<sp/>shown<sp/>by<sp/>a<sp/>solid<sp/>black<sp/>curve.<sp/>The<sp/>shaded<sp/>area<sp/>corresponds\n<sp/><sp/><sp/><sp/>to<sp/>the<sp/>95%<sp/>confidence<sp/>interval<sp/>:math:`\\pm<sp/>1.96<sp/>\\sigma`,<sp/>which<sp/>is<sp/>set<sp/>by\n<sp/><sp/><sp/><sp/>``confidence_level=0.95``.<sp/>The<sp/>samples<sp/>outside<sp/>the<sp/>interval<sp/>of<sp/>99.9%<sp/>are\n<sp/><sp/><sp/><sp/>considered<sp/>outliers,<sp/>which<sp/>is<sp/>set<sp/>by<sp/>the<sp/>significance<sp/>level\n<sp/><sp/><sp/><sp/>``outlier_significance_level=0.001``.\n\n<sp/><sp/><sp/><sp/>In<sp/>the<sp/>right<sp/>plo&quot;</highlight><highlight class="stringliteral">&quot;t,<sp/>the<sp/>darker<sp/>shaded<sp/>area<sp/>in<sp/>the<sp/>interval<sp/>:math:`[0,<sp/>20]`\n<sp/><sp/><sp/><sp/>shows<sp/>the<sp/>minimum<sp/>number<sp/>of<sp/>samples<sp/>and<sp/>is<sp/>set<sp/>by<sp/>``min_num_samples=20``.\n<sp/><sp/><sp/><sp/>The<sp/>iterations<sp/>do<sp/>not<sp/>stop<sp/>till<sp/>the<sp/>minimum<sp/>number<sp/>of<sp/>iterations<sp/>is<sp/>passed.\n<sp/><sp/><sp/><sp/>We<sp/>can<sp/>observe<sp/>that<sp/>sampling<sp/>is<sp/>terminated<sp/>after<sp/>55<sp/>iterations<sp/>where<sp/>the\n<sp/><sp/><sp/><sp/>relative<sp/>error<sp/>of<sp/>samples<sp/>reaches<sp/>0.02%<sp/>since<sp/>we<sp/>set<sp/>``error_rtol=2e-4``.\n<sp/><sp/><sp/><sp/>The<sp/>lighter<sp/>shaded<sp/>area<sp/>in<sp/>the<sp/>interval<sp/>:math:`[56,<sp/>80]`<sp/>corresponds<sp/>to<sp/>the\n<sp/><sp/><sp/><sp/>iterations<sp/>that<sp/>were<sp/>not<sp/>performed<sp/>to<sp/>reach<sp/>the<sp/>specified<sp/>maximum\n<sp/><sp/><sp/><sp/>iterations<sp/>by<sp/>``max_num_samples=80``.\n\n<sp/><sp/><sp/><sp/>**Matrix<sp/>operator:**\n\n<sp/><sp/><sp/><sp/>Use<sp/>an<sp/>object<sp/>of<sp/>:class:`imate.Matrix`<sp/>class<sp/>as<sp/>an<sp/>alternative<sp/>method<sp/>to\n<sp/><sp/><sp/><sp/>pass<sp/>the<sp/>matrix<sp/>`A`<sp/>to<sp/>the<sp/>`logdet`<sp/>function.\n\n<sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:emphasize-lines:<sp/>8\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Import<sp/>matrix<sp/>operator\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>imate<sp/>import<sp/>toeplitz,<sp/>logdet,<sp/>Matrix\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Generate<sp/>a<sp/>sample<sp/>matrix<sp/>(a<sp/>toeplitz<sp/>matrix)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>A<sp/>=<sp/>toeplitz(2,<sp/>1,<sp/>size=100,<sp/>gram=True)\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Create<sp/>a<sp/>matrix<sp/>operator<sp/>object<sp/>from<sp/>matrix<sp/>A\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>Aop<sp/>=<sp/>Matrix(A)\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Compute<sp/>log-determinant<sp/>of<sp/>Aop\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>logdet(Aop,<sp/>method=&apos;slq&apos;)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>141.52929878934194\n\n<sp/><sp/><sp/><sp/>An<sp/>advantage<sp/>of<sp/>passing<sp/>`Aop`<sp/>(instead<sp/>of<sp/>`A`)<sp/>to<sp/>the<sp/>`logdet`<sp/>function\n<sp/><sp/><sp/><sp/>will<sp/>be<sp/>clear<sp/>when<sp/>using<sp/>GPU.\n\n<sp/><sp/><sp/><sp/>**Computation<sp/>on<sp/>GPU:**\n\n<sp/><sp/><sp/><sp/>The<sp/>argument<sp/>``gpu=True``<sp/>performs<sp/>the<sp/>computations<sp/>on<sp/>GPU.<sp/>The<sp/>following\n<sp/><sp/><sp/><sp/>example<sp/>uses<sp/>the<sp/>object<sp/>`Aop`<sp/>created<sp/>earlier.\n\n<sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Compute<sp/>log-determinant<sp/>of<sp/>Aop\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>logdet(Aop,<sp/>method=&apos;slq&apos;,<sp/>gpu=True)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>141.52929878934194\n\n<sp/><sp/><sp/><sp/>The<sp/>above<sp/>function<sp/>call<sp/>triggers<sp/>the<sp/>object<sp/>`Aop`<sp/>to<sp/>automatically<sp/>load<sp/>the\n<sp/><sp/><sp/><sp/>matrix<sp/>data<sp/>on<sp/>the<sp/>GPU.\n\n<sp/><sp/><sp/><sp/>One<sp/>could<sp/>have<sp/>used<sp/>`A`<sp/>instead<sp/>of<sp/>`Aop`<sp/>in<sp/>the<sp/>above.<sp/>However,<sp/>an\n<sp/><sp/><sp/><sp/>advantage<sp/>of<sp/>using<sp/>`Aop`<sp/>(instead<sp/>of<sp/>the<sp/>matrix<sp/>`A`<sp/>directly)<sp/>is<sp/>that<sp/>by\n<sp/><sp/><sp/><sp/>calling<sp/>the<sp/>above<sp/>`logdet`<sp/>function<sp/>(or<sp/>another<sp/>function)<sp/>again<sp/>on<sp/>this\n<sp/><sp/><sp/><sp/>matrix,<sp/>the<sp/>dat&quot;</highlight><highlight class="stringliteral">&quot;a<sp/>of<sp/>this<sp/>matrix<sp/>does<sp/>not<sp/>have<sp/>to<sp/>be<sp/>re-allocated<sp/>on<sp/>the<sp/>GPU\n<sp/><sp/><sp/><sp/>device<sp/>again.<sp/>To<sp/>highlight<sp/>this<sp/>point,<sp/>call<sp/>the<sp/>above<sp/>function<sp/>again,<sp/>but\n<sp/><sp/><sp/><sp/>this<sp/>time,<sp/>set<sp/>``gram``<sp/>to<sp/>`True`<sp/>to<sp/>compute<sp/>something<sp/>different.\n\n<sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Compute<sp/>log-determinant<sp/>of<sp/>Aop\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>logdet(Aop,<sp/>method=&apos;slq&apos;,<sp/>gpu=True,<sp/>gram=True)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>141.52929878934194\n\n<sp/><sp/><sp/><sp/>In<sp/>the<sp/>above<sp/>example,<sp/>no<sp/>data<sp/>is<sp/>needed<sp/>to<sp/>be<sp/>transferred<sp/>from<sp/>CPU<sp/>host<sp/>to\n<sp/><sp/><sp/><sp/>GPU<sp/>device<sp/>again.<sp/>However,<sp/>if<sp/>`A`<sp/>was<sp/>used<sp/>instead<sp/>of<sp/>`Aop`,<sp/>the<sp/>data<sp/>would\n<sp/><sp/><sp/><sp/>have<sp/>been<sp/>transferred<sp/>from<sp/>CPU<sp/>to<sp/>GPU<sp/>again<sp/>for<sp/>the<sp/>second<sp/>time.<sp/>The<sp/>`Aop`\n<sp/><sp/><sp/><sp/>object<sp/>holds<sp/>the<sp/>data<sp/>on<sp/>GPU<sp/>for<sp/>later<sp/>use<sp/>as<sp/>long<sp/>as<sp/>this<sp/>object<sp/>does<sp/>no\n<sp/><sp/><sp/><sp/>go<sp/>out<sp/>of<sp/>the<sp/>scope<sp/>of<sp/>the<sp/>python<sp/>environment.<sp/>Once<sp/>the<sp/>variable<sp/>`Aop`<sp/>goes\n<sp/><sp/><sp/><sp/>out<sp/>of<sp/>scope,<sp/>the<sp/>matrix<sp/>data<sp/>on<sp/>all<sp/>the<sp/>GPU<sp/>devices<sp/>will<sp/>be<sp/>cleaned\n<sp/><sp/><sp/><sp/>automatically.\n\n<sp/><sp/><sp/><sp/>**Affine<sp/>matrix<sp/>operator:**\n\n<sp/><sp/><sp/><sp/>Use<sp/>an<sp/>object<sp/>of<sp/>:class:`imate.AffineMatrixFunction`<sp/>to<sp/>create<sp/>the<sp/>linear\n<sp/><sp/><sp/><sp/>operator\n\n<sp/><sp/><sp/><sp/>..<sp/>math::\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\mathbf{A}(t)<sp/>=<sp/>\\mathbf{A}<sp/>+<sp/>t<sp/>\\mathbf{I}.\n\n<sp/><sp/><sp/><sp/>The<sp/>object<sp/>:math:`\\mathbf{A}(t)`<sp/>can<sp/>be<sp/>passed<sp/>to<sp/>`logdet`<sp/>function<sp/>with\n<sp/><sp/><sp/><sp/>multiple<sp/>values<sp/>for<sp/>the<sp/>parameter<sp/>:math:`t`<sp/>to<sp/>compute<sp/>their\n<sp/><sp/><sp/><sp/>log-determinant<sp/>all<sp/>at<sp/>once,<sp/>as<sp/>follows.\n\n<sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:emphasize-lines:<sp/>8\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Import<sp/>affine<sp/>matrix<sp/>function\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>imate<sp/>import<sp/>toeplitz,<sp/>logdet,<sp/>AffineMatrixFunction\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Generate<sp/>a<sp/>sample<sp/>matrix<sp/>(a<sp/>toeplitz<sp/>matrix)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>A<sp/>=<sp/>toeplitz(2,<sp/>1,<sp/>size=100,<sp/>gram=True)\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Create<sp/>a<sp/>matrix<sp/>operator<sp/>object<sp/>from<sp/>matrix<sp/>A\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>Aop<sp/>=<sp/>AffineMatrixFunction(A)\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>A<sp/>list<sp/>of<sp/>parameters<sp/>t<sp/>to<sp/>pass<sp/>to<sp/>Aop\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>t<sp/>=<sp/>[-1.0,<sp/>0.0,<sp/>1.0]\n\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Compute<sp/>log-determinant<sp/>of<sp/>Aop<sp/>for<sp/>all<sp/>parameters<sp/>t\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>logdet(Aop,<sp/>method=&apos;slq&apos;,<sp/>parameters=t,<sp/>min_num_samples=20,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_num_samples=80,<sp/>error_rtol=1e-3,<sp/>confidence_level=0.95,\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o&quot;</highlight><highlight class="stringliteral">&quot;utlier_significance_level=0.001,<sp/>plot=True,<sp/>verbose=True)\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array([<sp/>68.71411681,<sp/>135.88356906,<sp/>163.44156683])\n\n<sp/><sp/><sp/><sp/>The<sp/>output<sp/>of<sp/>the<sp/>verbose<sp/>argument<sp/>is<sp/>shown<sp/>below.<sp/>In<sp/>the<sp/>results<sp/>section\n<sp/><sp/><sp/><sp/>of<sp/>the<sp/>table<sp/>below,<sp/>each<sp/>row<sp/>`i`<sp/>under<sp/>the<sp/>`inquiry`<sp/>column<sp/>corresponds<sp/>to\n<sp/><sp/><sp/><sp/>each<sp/>element<sp/>of<sp/>the<sp/>parameters<sp/>``t<sp/>=<sp/>[-1,<sp/>0,<sp/>1]``<sp/>that<sp/>was<sp/>specified<sp/>by\n<sp/><sp/><sp/><sp/>``parameters``<sp/>argument.\n\n<sp/><sp/><sp/><sp/>..<sp/>literalinclude::<sp/>../_static/data/imate.logdet.slq-verbose-2.txt\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:language:<sp/>python\n\n<sp/><sp/><sp/><sp/>The<sp/>output<sp/>of<sp/>the<sp/>plot<sp/>is<sp/>shown<sp/>below.<sp/>Each<sp/>colored<sp/>curve<sp/>corresponds<sp/>to\n<sp/><sp/><sp/><sp/>a<sp/>parameter<sp/>in<sp/>``t<sp/>=<sp/>[-1,<sp/>0,<sp/>1]``.\n\n<sp/><sp/><sp/><sp/>..<sp/>image::<sp/>../_static/images/plots/logdet_slq_convergence_2.png\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:align:<sp/>center\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:width:<sp/>80%\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:class:<sp/>custom-dark\n<sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyMethodDef<sp/>__pyx_mdef_5imate_6logdet_11_slq_method_1slq_method<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;slq_method&quot;</highlight><highlight class="normal">,<sp/>(PyCFunction)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)(PyCFunctionWithKeywords)__pyx_pw_5imate_6logdet_11_slq_method_1slq_method,<sp/>METH_VARARGS|METH_KEYWORDS,<sp/>__pyx_doc_5imate_6logdet_11_slq_method_slq_method};</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_pw_5imate_6logdet_11_slq_method_1slq_method(PyObject<sp/>*__pyx_self,<sp/>PyObject<sp/>*__pyx_args,<sp/>PyObject<sp/>*__pyx_kwds)<sp/>{</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_v_A<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_v_gram<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_v_p<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_v_return_info<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_v_parameters<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_v_min_num_samples<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_v_max_num_samples<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_v_error_atol<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_v_error_rtol<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_v_confidence_level<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_v_outlier_significance_level<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_v_lanczos_degree<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_v_lanczos_tol<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_v_orthogonalize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_v_num_threads<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_v_num_gpu_devices<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_v_gpu<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_v_verbose<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_v_plot<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pyx_lineno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*__pyx_filename<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pyx_clineno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_r<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyDeclarations</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/>__Pyx_RefNannySetupContext(</highlight><highlight class="stringliteral">&quot;slq_method<sp/>(wrapper)&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>**__pyx_pyargnames[]<sp/>=<sp/>{&amp;__pyx_n_s_A,&amp;__pyx_n_s_gram,&amp;__pyx_n_s_p,&amp;__pyx_n_s_return_info,&amp;__pyx_n_s_parameters,&amp;__pyx_n_s_min_num_samples,&amp;__pyx_n_s_max_num_samples,&amp;__pyx_n_s_error_atol,&amp;__pyx_n_s_error_rtol,&amp;__pyx_n_s_confidence_level,&amp;__pyx_n_s_outlier_significance_level,&amp;__pyx_n_s_lanczos_degree,&amp;__pyx_n_s_lanczos_tol,&amp;__pyx_n_s_orthogonalize,&amp;__pyx_n_s_num_threads,&amp;__pyx_n_s_num_gpu_devices,&amp;__pyx_n_s_gpu,&amp;__pyx_n_s_verbose,&amp;__pyx_n_s_plot,0};</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>values[19]<sp/>=<sp/>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:26</highlight></codeline>
<codeline lineno="2023"><highlight class="comment"><sp/>*<sp/>def<sp/>slq_method(</highlight></codeline>
<codeline lineno="2024"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A,</highlight></codeline>
<codeline lineno="2025"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gram=False,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2026"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p=1.0,</highlight></codeline>
<codeline lineno="2027"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_info=False,</highlight></codeline>
<codeline lineno="2028"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/>values[1]<sp/>=<sp/>((PyObject<sp/>*)((PyObject<sp/>*)Py_False));</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/>values[2]<sp/>=<sp/>((PyObject<sp/>*)((PyObject*)__pyx_float_1_0));</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:28</highlight></codeline>
<codeline lineno="2033"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gram=False,</highlight></codeline>
<codeline lineno="2034"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p=1.0,</highlight></codeline>
<codeline lineno="2035"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_info=False,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2036"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters=None,</highlight></codeline>
<codeline lineno="2037"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_num_samples=10,</highlight></codeline>
<codeline lineno="2038"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/>values[3]<sp/>=<sp/>((PyObject<sp/>*)((PyObject<sp/>*)Py_False));</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:29</highlight></codeline>
<codeline lineno="2042"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p=1.0,</highlight></codeline>
<codeline lineno="2043"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_info=False,</highlight></codeline>
<codeline lineno="2044"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters=None,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2045"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_num_samples=10,</highlight></codeline>
<codeline lineno="2046"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_num_samples=50,</highlight></codeline>
<codeline lineno="2047"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/>values[4]<sp/>=<sp/>((PyObject<sp/>*)((PyObject<sp/>*)Py_None));</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/>values[5]<sp/>=<sp/>((PyObject<sp/>*)((PyObject<sp/>*)__pyx_int_10));</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/>values[6]<sp/>=<sp/>((PyObject<sp/>*)((PyObject<sp/>*)__pyx_int_50));</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:32</highlight></codeline>
<codeline lineno="2053"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_num_samples=10,</highlight></codeline>
<codeline lineno="2054"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_num_samples=50,</highlight></codeline>
<codeline lineno="2055"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_atol=None,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2056"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_rtol=1e-2,</highlight></codeline>
<codeline lineno="2057"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>confidence_level=0.95,</highlight></codeline>
<codeline lineno="2058"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/>values[7]<sp/>=<sp/>((PyObject<sp/>*)((PyObject<sp/>*)Py_None));</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/>values[8]<sp/>=<sp/>((PyObject<sp/>*)((PyObject*)__pyx_float_1eneg_2));</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/>values[9]<sp/>=<sp/>((PyObject<sp/>*)((PyObject*)__pyx_float_0_95));</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/>values[10]<sp/>=<sp/>((PyObject<sp/>*)((PyObject*)__pyx_float_0_001));</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/>values[11]<sp/>=<sp/>((PyObject<sp/>*)((PyObject<sp/>*)__pyx_int_20));</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:37</highlight></codeline>
<codeline lineno="2066"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outlier_significance_level=0.001,</highlight></codeline>
<codeline lineno="2067"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lanczos_degree=20,</highlight></codeline>
<codeline lineno="2068"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lanczos_tol=None,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2069"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orthogonalize=0,</highlight></codeline>
<codeline lineno="2070"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_threads=0,</highlight></codeline>
<codeline lineno="2071"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/>values[12]<sp/>=<sp/>((PyObject<sp/>*)((PyObject<sp/>*)Py_None));</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/>values[13]<sp/>=<sp/>((PyObject<sp/>*)((PyObject<sp/>*)__pyx_int_0));</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/>values[14]<sp/>=<sp/>((PyObject<sp/>*)((PyObject<sp/>*)__pyx_int_0));</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/>values[15]<sp/>=<sp/>((PyObject<sp/>*)((PyObject<sp/>*)__pyx_int_0));</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:41</highlight></codeline>
<codeline lineno="2078"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_threads=0,</highlight></codeline>
<codeline lineno="2079"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_gpu_devices=0,</highlight></codeline>
<codeline lineno="2080"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpu=False,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2081"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbose=False,</highlight></codeline>
<codeline lineno="2082"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot=False):</highlight></codeline>
<codeline lineno="2083"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/>values[16]<sp/>=<sp/>((PyObject<sp/>*)((PyObject<sp/>*)Py_False));</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:42</highlight></codeline>
<codeline lineno="2087"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_gpu_devices=0,</highlight></codeline>
<codeline lineno="2088"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpu=False,</highlight></codeline>
<codeline lineno="2089"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbose=False,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2090"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot=False):</highlight></codeline>
<codeline lineno="2091"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="2092"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/>values[17]<sp/>=<sp/>((PyObject<sp/>*)((PyObject<sp/>*)Py_False));</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"></highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:43</highlight></codeline>
<codeline lineno="2096"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpu=False,</highlight></codeline>
<codeline lineno="2097"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbose=False,</highlight></codeline>
<codeline lineno="2098"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plot=False):<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2099"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="2100"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>Log-determinant<sp/>of<sp/>non-singular<sp/>matrix<sp/>or<sp/>linear<sp/>operator<sp/>using<sp/>stochastic</highlight></codeline>
<codeline lineno="2101"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/>values[18]<sp/>=<sp/>((PyObject<sp/>*)((PyObject<sp/>*)Py_False));</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(__pyx_kwds))<sp/>{</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>kw_args;</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_ssize_t<sp/>pos_args<sp/>=<sp/>PyTuple_GET_SIZE(__pyx_args);</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(pos_args)<sp/>{</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>19:<sp/>values[18]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>18);</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>18:<sp/>values[17]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>17);</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>17:<sp/>values[16]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>16);</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>16:<sp/>values[15]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>15);</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>15:<sp/>values[14]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>14);</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>14:<sp/>values[13]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>13);</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>13:<sp/>values[12]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>12);</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>12:<sp/>values[11]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>11);</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>11:<sp/>values[10]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>10);</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>10:<sp/>values[9]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>9);</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>9:<sp/>values[8]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>8);</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>8:<sp/>values[7]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>7);</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>7:<sp/>values[6]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>6);</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>6:<sp/>values[5]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>5);</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>5:<sp/>values[4]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>4);</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>4:<sp/>values[3]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>3);</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>3:<sp/>values[2]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>2);</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>2:<sp/>values[1]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>1);</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>1:<sp/>values[0]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>0);</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>0:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>__pyx_L5_argtuple_error;</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>kw_args<sp/>=<sp/>PyDict_Size(__pyx_kwds);</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(pos_args)<sp/>{</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>0:</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely((values[0]<sp/>=<sp/>__Pyx_PyDict_GetItemStr(__pyx_kwds,<sp/>__pyx_n_s_A))<sp/>!=<sp/>0))<sp/>kw_args--;</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>__pyx_L5_argtuple_error;</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>1:</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kw_args<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>value<sp/>=<sp/>__Pyx_PyDict_GetItemStr(__pyx_kwds,<sp/>__pyx_n_s_gram);</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{<sp/>values[1]<sp/>=<sp/>value;<sp/>kw_args--;<sp/>}</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>2:</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kw_args<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>value<sp/>=<sp/>__Pyx_PyDict_GetItemStr(__pyx_kwds,<sp/>__pyx_n_s_p);</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{<sp/>values[2]<sp/>=<sp/>value;<sp/>kw_args--;<sp/>}</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>3:</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kw_args<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>value<sp/>=<sp/>__Pyx_PyDict_GetItemStr(__pyx_kwds,<sp/>__pyx_n_s_return_info);</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{<sp/>values[3]<sp/>=<sp/>value;<sp/>kw_args--;<sp/>}</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>4:</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kw_args<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>value<sp/>=<sp/>__Pyx_PyDict_GetItemStr(__pyx_kwds,<sp/>__pyx_n_s_parameters);</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{<sp/>values[4]<sp/>=<sp/>value;<sp/>kw_args--;<sp/>}</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>5:</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kw_args<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>value<sp/>=<sp/>__Pyx_PyDict_GetItemStr(__pyx_kwds,<sp/>__pyx_n_s_min_num_samples);</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{<sp/>values[5]<sp/>=<sp/>value;<sp/>kw_args--;<sp/>}</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>6:</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kw_args<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>value<sp/>=<sp/>__Pyx_PyDict_GetItemStr(__pyx_kwds,<sp/>__pyx_n_s_max_num_samples);</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{<sp/>values[6]<sp/>=<sp/>value;<sp/>kw_args--;<sp/>}</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>7:</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kw_args<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>value<sp/>=<sp/>__Pyx_PyDict_GetItemStr(__pyx_kwds,<sp/>__pyx_n_s_error_atol);</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{<sp/>values[7]<sp/>=<sp/>value;<sp/>kw_args--;<sp/>}</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>8:</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kw_args<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>value<sp/>=<sp/>__Pyx_PyDict_GetItemStr(__pyx_kwds,<sp/>__pyx_n_s_error_rtol);</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{<sp/>values[8]<sp/>=<sp/>value;<sp/>kw_args--;<sp/>}</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>9:</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kw_args<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>value<sp/>=<sp/>__Pyx_PyDict_GetItemStr(__pyx_kwds,<sp/>__pyx_n_s_confidence_level);</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{<sp/>values[9]<sp/>=<sp/>value;<sp/>kw_args--;<sp/>}</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>10:</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kw_args<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>value<sp/>=<sp/>__Pyx_PyDict_GetItemStr(__pyx_kwds,<sp/>__pyx_n_s_outlier_significance_level);</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{<sp/>values[10]<sp/>=<sp/>value;<sp/>kw_args--;<sp/>}</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>11:</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kw_args<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>value<sp/>=<sp/>__Pyx_PyDict_GetItemStr(__pyx_kwds,<sp/>__pyx_n_s_lanczos_degree);</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{<sp/>values[11]<sp/>=<sp/>value;<sp/>kw_args--;<sp/>}</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>12:</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kw_args<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>value<sp/>=<sp/>__Pyx_PyDict_GetItemStr(__pyx_kwds,<sp/>__pyx_n_s_lanczos_tol);</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{<sp/>values[12]<sp/>=<sp/>value;<sp/>kw_args--;<sp/>}</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>13:</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kw_args<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>value<sp/>=<sp/>__Pyx_PyDict_GetItemStr(__pyx_kwds,<sp/>__pyx_n_s_orthogonalize);</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{<sp/>values[13]<sp/>=<sp/>value;<sp/>kw_args--;<sp/>}</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>14:</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kw_args<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>value<sp/>=<sp/>__Pyx_PyDict_GetItemStr(__pyx_kwds,<sp/>__pyx_n_s_num_threads);</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{<sp/>values[14]<sp/>=<sp/>value;<sp/>kw_args--;<sp/>}</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>15:</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kw_args<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>value<sp/>=<sp/>__Pyx_PyDict_GetItemStr(__pyx_kwds,<sp/>__pyx_n_s_num_gpu_devices);</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{<sp/>values[15]<sp/>=<sp/>value;<sp/>kw_args--;<sp/>}</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>16:</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kw_args<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>value<sp/>=<sp/>__Pyx_PyDict_GetItemStr(__pyx_kwds,<sp/>__pyx_n_s_gpu);</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{<sp/>values[16]<sp/>=<sp/>value;<sp/>kw_args--;<sp/>}</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>17:</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kw_args<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>value<sp/>=<sp/>__Pyx_PyDict_GetItemStr(__pyx_kwds,<sp/>__pyx_n_s_verbose);</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{<sp/>values[17]<sp/>=<sp/>value;<sp/>kw_args--;<sp/>}</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>18:</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kw_args<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>value<sp/>=<sp/>__Pyx_PyDict_GetItemStr(__pyx_kwds,<sp/>__pyx_n_s_plot);</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{<sp/>values[18]<sp/>=<sp/>value;<sp/>kw_args--;<sp/>}</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(kw_args<sp/>&gt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds,<sp/>__pyx_pyargnames,<sp/>0,<sp/>values,<sp/>pos_args,<sp/></highlight><highlight class="stringliteral">&quot;slq_method&quot;</highlight><highlight class="normal">)<sp/>&lt;<sp/>0))<sp/>__PYX_ERR(0,<sp/>24,<sp/>__pyx_L3_error)</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(PyTuple_GET_SIZE(__pyx_args))<sp/>{</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>19:<sp/>values[18]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>18);</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>18:<sp/>values[17]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>17);</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>17:<sp/>values[16]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>16);</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>16:<sp/>values[15]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>15);</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>15:<sp/>values[14]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>14);</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>14:<sp/>values[13]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>13);</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>13:<sp/>values[12]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>12);</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>12:<sp/>values[11]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>11);</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>11:<sp/>values[10]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>10);</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>10:<sp/>values[9]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>9);</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>9:<sp/>values[8]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>8);</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>8:<sp/>values[7]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>7);</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>7:<sp/>values[6]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>6);</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>6:<sp/>values[5]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>5);</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>5:<sp/>values[4]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>4);</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>4:<sp/>values[3]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>3);</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>3:<sp/>values[2]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>2);</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>2:<sp/>values[1]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>1);</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>1:<sp/>values[0]<sp/>=<sp/>PyTuple_GET_ITEM(__pyx_args,<sp/>0);</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>__pyx_L5_argtuple_error;</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_v_A<sp/>=<sp/>values[0];</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_v_gram<sp/>=<sp/>values[1];</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_v_p<sp/>=<sp/>values[2];</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_v_return_info<sp/>=<sp/>values[3];</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_v_parameters<sp/>=<sp/>values[4];</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_v_min_num_samples<sp/>=<sp/>values[5];</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_v_max_num_samples<sp/>=<sp/>values[6];</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_v_error_atol<sp/>=<sp/>values[7];</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_v_error_rtol<sp/>=<sp/>values[8];</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_v_confidence_level<sp/>=<sp/>values[9];</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_v_outlier_significance_level<sp/>=<sp/>values[10];</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_v_lanczos_degree<sp/>=<sp/>values[11];</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_v_lanczos_tol<sp/>=<sp/>values[12];</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_v_orthogonalize<sp/>=<sp/>values[13];</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_v_num_threads<sp/>=<sp/>values[14];</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_v_num_gpu_devices<sp/>=<sp/>values[15];</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_v_gpu<sp/>=<sp/>values[16];</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_v_verbose<sp/>=<sp/>values[17];</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_v_plot<sp/>=<sp/>values[18];</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>__pyx_L4_argument_unpacking_done;</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/>__pyx_L5_argtuple_error:;</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/>__Pyx_RaiseArgtupleInvalid(</highlight><highlight class="stringliteral">&quot;slq_method&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>1,<sp/>19,<sp/>PyTuple_GET_SIZE(__pyx_args));<sp/>__PYX_ERR(0,<sp/>24,<sp/>__pyx_L3_error)</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/>__pyx_L3_error:;</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/>__Pyx_AddTraceback(</highlight><highlight class="stringliteral">&quot;imate.logdet._slq_method.slq_method&quot;</highlight><highlight class="normal">,<sp/>__pyx_clineno,<sp/>__pyx_lineno,<sp/>__pyx_filename);</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyFinishContext();</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/>__pyx_L4_argument_unpacking_done:;</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/>__pyx_r<sp/>=<sp/>__pyx_pf_5imate_6logdet_11_slq_method_slq_method(__pyx_self,<sp/>__pyx_v_A,<sp/>__pyx_v_gram,<sp/>__pyx_v_p,<sp/>__pyx_v_return_info,<sp/>__pyx_v_parameters,<sp/>__pyx_v_min_num_samples,<sp/>__pyx_v_max_num_samples,<sp/>__pyx_v_error_atol,<sp/>__pyx_v_error_rtol,<sp/>__pyx_v_confidence_level,<sp/>__pyx_v_outlier_significance_level,<sp/>__pyx_v_lanczos_degree,<sp/>__pyx_v_lanczos_tol,<sp/>__pyx_v_orthogonalize,<sp/>__pyx_v_num_threads,<sp/>__pyx_v_num_gpu_devices,<sp/>__pyx_v_gpu,<sp/>__pyx_v_verbose,<sp/>__pyx_v_plot);</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"></highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:24</highlight></codeline>
<codeline lineno="2339"><highlight class="comment"><sp/>*<sp/>#<sp/>==========</highlight></codeline>
<codeline lineno="2340"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2341"><highlight class="comment"><sp/>*<sp/>def<sp/>slq_method(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2342"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A,</highlight></codeline>
<codeline lineno="2343"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gram=False,</highlight></codeline>
<codeline lineno="2344"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2345"><highlight class="normal"></highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>function<sp/>exit<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyFinishContext();</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__pyx_r;</highlight></codeline>
<codeline lineno="2349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_pf_5imate_6logdet_11_slq_method_slq_method(CYTHON_UNUSED<sp/>PyObject<sp/>*__pyx_self,<sp/>PyObject<sp/>*__pyx_v_A,<sp/>PyObject<sp/>*__pyx_v_gram,<sp/>PyObject<sp/>*__pyx_v_p,<sp/>PyObject<sp/>*__pyx_v_return_info,<sp/>PyObject<sp/>*__pyx_v_parameters,<sp/>PyObject<sp/>*__pyx_v_min_num_samples,<sp/>PyObject<sp/>*__pyx_v_max_num_samples,<sp/>PyObject<sp/>*__pyx_v_error_atol,<sp/>PyObject<sp/>*__pyx_v_error_rtol,<sp/>PyObject<sp/>*__pyx_v_confidence_level,<sp/>PyObject<sp/>*__pyx_v_outlier_significance_level,<sp/>PyObject<sp/>*__pyx_v_lanczos_degree,<sp/>PyObject<sp/>*__pyx_v_lanczos_tol,<sp/>PyObject<sp/>*__pyx_v_orthogonalize,<sp/>PyObject<sp/>*__pyx_v_num_threads,<sp/>PyObject<sp/>*__pyx_v_num_gpu_devices,<sp/>PyObject<sp/>*__pyx_v_gpu,<sp/>PyObject<sp/>*__pyx_v_verbose,<sp/>PyObject<sp/>*__pyx_v_plot)<sp/>{</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><ref refid="classFunction" kindref="compound">Function</ref><sp/>*__pyx_v_matrix_function;</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__pyx_obj_5imate_9functions_12py_functions_pyFunction<sp/>*__pyx_v_py_matrix_function<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_v_trace<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_v_info<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_r<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/>__Pyx_TraceDeclarations</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyDeclarations</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_t_1<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_t_2<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_t_3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><ref refid="classLogarithm" kindref="compound">Logarithm</ref><sp/>*__pyx_t_4;</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_t_5<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/>PyObject<sp/>*(*__pyx_t_6)(PyObject<sp/>*);</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pyx_t_7;</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pyx_lineno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*__pyx_filename<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pyx_clineno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/>__Pyx_TraceFrameInit(__pyx_codeobj_)</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/>__Pyx_RefNannySetupContext(</highlight><highlight class="stringliteral">&quot;slq_method&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/>__Pyx_TraceCall(</highlight><highlight class="stringliteral">&quot;slq_method&quot;</highlight><highlight class="normal">,<sp/>__pyx_f[0],<sp/>24,<sp/>0,<sp/>__PYX_ERR(0,<sp/>24,<sp/>__pyx_L1_error));</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"></highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:801</highlight></codeline>
<codeline lineno="2374"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2375"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>#<sp/>Check<sp/>arguments</highlight></codeline>
<codeline lineno="2376"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>check_arguments(return_info)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2377"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2378"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>#<sp/>Define<sp/>matrix<sp/>function</highlight></codeline>
<codeline lineno="2379"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/>__Pyx_TraceLine(801,0,__PYX_ERR(0,<sp/>801,<sp/>__pyx_L1_error))</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/>__Pyx_GetModuleGlobalName(__pyx_t_2,<sp/>__pyx_n_s_check_arguments);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_t_2))<sp/>__PYX_ERR(0,<sp/>801,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/>__Pyx_GOTREF(__pyx_t_2);</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/>__pyx_t_3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CYTHON_UNPACK_METHODS<sp/>&amp;&amp;<sp/>unlikely(PyMethod_Check(__pyx_t_2)))<sp/>{</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_t_3<sp/>=<sp/>PyMethod_GET_SELF(__pyx_t_2);</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(__pyx_t_3))<sp/>{</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>=<sp/>PyMethod_GET_FUNCTION(__pyx_t_2);</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_INCREF(__pyx_t_3);</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_INCREF(</highlight><highlight class="keyword">function</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_DECREF_SET(__pyx_t_2,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/>__pyx_t_1<sp/>=<sp/>(__pyx_t_3)<sp/>?<sp/>__Pyx_PyObject_Call2Args(__pyx_t_2,<sp/>__pyx_t_3,<sp/>__pyx_v_return_info)<sp/>:<sp/>__Pyx_PyObject_CallOneArg(__pyx_t_2,<sp/>__pyx_v_return_info);</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/>__Pyx_XDECREF(__pyx_t_3);<sp/>__pyx_t_3<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_t_1))<sp/>__PYX_ERR(0,<sp/>801,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/>__Pyx_GOTREF(__pyx_t_1);</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/>__Pyx_DECREF(__pyx_t_2);<sp/>__pyx_t_2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/>__Pyx_DECREF(__pyx_t_1);<sp/>__pyx_t_1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"></highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:804</highlight></codeline>
<codeline lineno="2401"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2402"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>#<sp/>Define<sp/>matrix<sp/>function</highlight></codeline>
<codeline lineno="2403"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>cdef<sp/>Function*<sp/>matrix_function<sp/>=<sp/>new<sp/>Logarithm()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2404"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2405"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>#<sp/>Embed<sp/>matrix<sp/>function<sp/>in<sp/>python<sp/>object</highlight></codeline>
<codeline lineno="2406"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/>__Pyx_TraceLine(804,0,__PYX_ERR(0,<sp/>804,<sp/>__pyx_L1_error))</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_t_4<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classLogarithm" kindref="compound">Logarithm</ref>();</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(...)<sp/>{</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_CppExn2PyErr();</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/>__PYX_ERR(0,<sp/>804,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/>__pyx_v_matrix_function<sp/>=<sp/>__pyx_t_4;</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:807</highlight></codeline>
<codeline lineno="2417"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2418"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>#<sp/>Embed<sp/>matrix<sp/>function<sp/>in<sp/>python<sp/>object</highlight></codeline>
<codeline lineno="2419"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>py_matrix_function<sp/>=<sp/>pyFunction()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2420"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>py_matrix_function.set_function(matrix_function)</highlight></codeline>
<codeline lineno="2421"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2422"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/>__Pyx_TraceLine(807,0,__PYX_ERR(0,<sp/>807,<sp/>__pyx_L1_error))</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/>__pyx_t_1<sp/>=<sp/>__Pyx_PyObject_CallNoArg(((PyObject<sp/>*)__pyx_ptype_5imate_9functions_12py_functions_pyFunction));<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_t_1))<sp/>__PYX_ERR(0,<sp/>807,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/>__Pyx_GOTREF(__pyx_t_1);</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/>__pyx_v_py_matrix_function<sp/>=<sp/>((</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__pyx_obj_5imate_9functions_12py_functions_pyFunction<sp/>*)__pyx_t_1);</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/>__pyx_t_1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:808</highlight></codeline>
<codeline lineno="2430"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>#<sp/>Embed<sp/>matrix<sp/>function<sp/>in<sp/>python<sp/>object</highlight></codeline>
<codeline lineno="2431"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>py_matrix_function<sp/>=<sp/>pyFunction()</highlight></codeline>
<codeline lineno="2432"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>py_matrix_function.set_function(matrix_function)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2433"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2434"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>trace,<sp/>info<sp/>=<sp/>trace_estimator(</highlight></codeline>
<codeline lineno="2435"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/>__Pyx_TraceLine(808,0,__PYX_ERR(0,<sp/>808,<sp/>__pyx_L1_error))</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/>((</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__pyx_vtabstruct_5imate_9functions_12py_functions_pyFunction<sp/>*)__pyx_v_py_matrix_function-&gt;__pyx_vtab)-&gt;set_function(__pyx_v_py_matrix_function,<sp/>__pyx_v_matrix_function);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(PyErr_Occurred()))<sp/>__PYX_ERR(0,<sp/>808,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:810</highlight></codeline>
<codeline lineno="2440"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>py_matrix_function.set_function(matrix_function)</highlight></codeline>
<codeline lineno="2441"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2442"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>trace,<sp/>info<sp/>=<sp/>trace_estimator(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2443"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A,</highlight></codeline>
<codeline lineno="2444"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters,</highlight></codeline>
<codeline lineno="2445"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/>__Pyx_TraceLine(810,0,__PYX_ERR(0,<sp/>810,<sp/>__pyx_L1_error))</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/>__pyx_t_1<sp/>=<sp/>__pyx_f_5imate_16_trace_estimator_15trace_estimator_trace_estimator(__pyx_v_A,<sp/>__pyx_v_parameters,<sp/>__pyx_v_py_matrix_function,<sp/>__pyx_v_gram,<sp/>__pyx_v_p,<sp/>__pyx_v_min_num_samples,<sp/>__pyx_v_max_num_samples,<sp/>__pyx_v_error_atol,<sp/>__pyx_v_error_rtol,<sp/>__pyx_v_confidence_level,<sp/>__pyx_v_outlier_significance_level,<sp/>__pyx_v_lanczos_degree,<sp/>__pyx_v_lanczos_tol,<sp/>__pyx_v_orthogonalize,<sp/>__pyx_v_num_threads,<sp/>__pyx_v_num_gpu_devices,<sp/>__pyx_v_verbose,<sp/>__pyx_v_plot,<sp/>__pyx_v_gpu,<sp/>0);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_t_1))<sp/>__PYX_ERR(0,<sp/>810,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/>__Pyx_GOTREF(__pyx_t_1);</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((likely(PyTuple_CheckExact(__pyx_t_1)))<sp/>||<sp/>(PyList_CheckExact(__pyx_t_1)))<sp/>{</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>sequence<sp/>=<sp/>__pyx_t_1;</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>size<sp/>=<sp/>__Pyx_PySequence_SIZE(sequence);</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(size<sp/>!=<sp/>2))<sp/>{</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;<sp/>2)<sp/>__Pyx_RaiseTooManyValuesError(2);</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;=<sp/>0)<sp/>__Pyx_RaiseNeedMoreValuesError(size);</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_ERR(0,<sp/>810,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>CYTHON_ASSUME_SAFE_MACROS<sp/>&amp;&amp;<sp/>!CYTHON_AVOID_BORROWED_REFS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(PyTuple_CheckExact(sequence)))<sp/>{</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_t_2<sp/>=<sp/>PyTuple_GET_ITEM(sequence,<sp/>0);<sp/></highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_t_3<sp/>=<sp/>PyTuple_GET_ITEM(sequence,<sp/>1);<sp/></highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_t_2<sp/>=<sp/>PyList_GET_ITEM(sequence,<sp/>0);<sp/></highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_t_3<sp/>=<sp/>PyList_GET_ITEM(sequence,<sp/>1);<sp/></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_INCREF(__pyx_t_2);</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_INCREF(__pyx_t_3);</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_t_2<sp/>=<sp/>PySequence_ITEM(sequence,<sp/>0);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_t_2))<sp/>__PYX_ERR(0,<sp/>810,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_GOTREF(__pyx_t_2);</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_t_3<sp/>=<sp/>PySequence_ITEM(sequence,<sp/>1);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_t_3))<sp/>__PYX_ERR(0,<sp/>810,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_GOTREF(__pyx_t_3);</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_DECREF(__pyx_t_1);<sp/>__pyx_t_1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>index<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_t_5<sp/>=<sp/>PyObject_GetIter(__pyx_t_1);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_t_5))<sp/>__PYX_ERR(0,<sp/>810,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_GOTREF(__pyx_t_5);</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_DECREF(__pyx_t_1);<sp/>__pyx_t_1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_t_6<sp/>=<sp/>Py_TYPE(__pyx_t_5)-&gt;tp_iternext;</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>0;<sp/>__pyx_t_2<sp/>=<sp/>__pyx_t_6(__pyx_t_5);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_t_2))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>__pyx_L3_unpacking_failed;</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_GOTREF(__pyx_t_2);</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>1;<sp/>__pyx_t_3<sp/>=<sp/>__pyx_t_6(__pyx_t_5);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_t_3))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>__pyx_L3_unpacking_failed;</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_GOTREF(__pyx_t_3);</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5),<sp/>2)<sp/>&lt;<sp/>0)<sp/>__PYX_ERR(0,<sp/>810,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_t_6<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_DECREF(__pyx_t_5);<sp/>__pyx_t_5<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>__pyx_L4_unpacking_done;</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_L3_unpacking_failed:;</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_DECREF(__pyx_t_5);<sp/>__pyx_t_5<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_t_6<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__Pyx_IterFinish()<sp/>==<sp/>0)<sp/>__Pyx_RaiseNeedMoreValuesError(index);</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/>__PYX_ERR(0,<sp/>810,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_L4_unpacking_done:;</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/>__pyx_v_trace<sp/>=<sp/>__pyx_t_2;</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/>__pyx_t_2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/>__pyx_v_info<sp/>=<sp/>__pyx_t_3;</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/>__pyx_t_3<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"></highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:831</highlight></codeline>
<codeline lineno="2501"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpu)</highlight></codeline>
<codeline lineno="2502"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2503"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>del<sp/>matrix_function<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2504"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2505"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>if<sp/>return_info:</highlight></codeline>
<codeline lineno="2506"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/>__Pyx_TraceLine(831,0,__PYX_ERR(0,<sp/>831,<sp/>__pyx_L1_error))</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>__pyx_v_matrix_function;</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"></highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:833</highlight></codeline>
<codeline lineno="2511"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>del<sp/>matrix_function</highlight></codeline>
<codeline lineno="2512"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2513"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>if<sp/>return_info:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2514"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>trace,<sp/>info</highlight></codeline>
<codeline lineno="2515"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>else:</highlight></codeline>
<codeline lineno="2516"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/>__Pyx_TraceLine(833,0,__PYX_ERR(0,<sp/>833,<sp/>__pyx_L1_error))</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/>__pyx_t_7<sp/>=<sp/>__Pyx_PyObject_IsTrue(__pyx_v_return_info);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(__pyx_t_7<sp/>&lt;<sp/>0))<sp/>__PYX_ERR(0,<sp/>833,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__pyx_t_7)<sp/>{</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"></highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:834</highlight></codeline>
<codeline lineno="2522"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2523"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>if<sp/>return_info:</highlight></codeline>
<codeline lineno="2524"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>trace,<sp/>info<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2525"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>else:</highlight></codeline>
<codeline lineno="2526"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>trace</highlight></codeline>
<codeline lineno="2527"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_TraceLine(834,0,__PYX_ERR(0,<sp/>834,<sp/>__pyx_L1_error))</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_XDECREF(__pyx_r);</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_t_1<sp/>=<sp/>PyTuple_New(2);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_t_1))<sp/>__PYX_ERR(0,<sp/>834,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_GOTREF(__pyx_t_1);</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_INCREF(__pyx_v_trace);</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_GIVEREF(__pyx_v_trace);</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/>PyTuple_SET_ITEM(__pyx_t_1,<sp/>0,<sp/>__pyx_v_trace);</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_INCREF(__pyx_v_info);</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_GIVEREF(__pyx_v_info);</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/>PyTuple_SET_ITEM(__pyx_t_1,<sp/>1,<sp/>__pyx_v_info);</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_r<sp/>=<sp/>__pyx_t_1;</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_t_1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>__pyx_L0;</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:833</highlight></codeline>
<codeline lineno="2543"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>del<sp/>matrix_function</highlight></codeline>
<codeline lineno="2544"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2545"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>if<sp/>return_info:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2546"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>trace,<sp/>info</highlight></codeline>
<codeline lineno="2547"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>else:</highlight></codeline>
<codeline lineno="2548"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"></highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:836</highlight></codeline>
<codeline lineno="2552"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>trace,<sp/>info</highlight></codeline>
<codeline lineno="2553"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>else:</highlight></codeline>
<codeline lineno="2554"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>trace<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2555"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2556"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2557"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/>__Pyx_TraceLine(836,0,__PYX_ERR(0,<sp/>836,<sp/>__pyx_L1_error))</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*else*/</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_XDECREF(__pyx_r);</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_INCREF(__pyx_v_trace);</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_r<sp/>=<sp/>__pyx_v_trace;</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>__pyx_L0;</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"></highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:24</highlight></codeline>
<codeline lineno="2567"><highlight class="comment"><sp/>*<sp/>#<sp/>==========</highlight></codeline>
<codeline lineno="2568"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2569"><highlight class="comment"><sp/>*<sp/>def<sp/>slq_method(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2570"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A,</highlight></codeline>
<codeline lineno="2571"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gram=False,</highlight></codeline>
<codeline lineno="2572"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2573"><highlight class="normal"></highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>function<sp/>exit<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/>__pyx_L1_error:;</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/>__Pyx_XDECREF(__pyx_t_1);</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/>__Pyx_XDECREF(__pyx_t_2);</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/>__Pyx_XDECREF(__pyx_t_3);</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/>__Pyx_XDECREF(__pyx_t_5);</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/>__Pyx_AddTraceback(</highlight><highlight class="stringliteral">&quot;imate.logdet._slq_method.slq_method&quot;</highlight><highlight class="normal">,<sp/>__pyx_clineno,<sp/>__pyx_lineno,<sp/>__pyx_filename);</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/>__pyx_r<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/>__pyx_L0:;</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/>__Pyx_XDECREF((PyObject<sp/>*)__pyx_v_py_matrix_function);</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/>__Pyx_XDECREF(__pyx_v_trace);</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/>__Pyx_XDECREF(__pyx_v_info);</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/>__Pyx_XGIVEREF(__pyx_r);</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/>__Pyx_TraceReturn(__pyx_r,<sp/>0);</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyFinishContext();</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__pyx_r;</highlight></codeline>
<codeline lineno="2590"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:843</highlight></codeline>
<codeline lineno="2593"><highlight class="comment"><sp/>*<sp/>#<sp/>===============</highlight></codeline>
<codeline lineno="2594"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2595"><highlight class="comment"><sp/>*<sp/>def<sp/>check_arguments(return_info):<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2596"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="2597"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>Checks<sp/>the<sp/>type<sp/>and<sp/>value<sp/>of<sp/>the<sp/>parameters.</highlight></codeline>
<codeline lineno="2598"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2599"><highlight class="normal"></highlight></codeline>
<codeline lineno="2600"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Python<sp/>wrapper<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2601"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_pw_5imate_6logdet_11_slq_method_3check_arguments(PyObject<sp/>*__pyx_self,<sp/>PyObject<sp/>*__pyx_v_return_info);<sp/></highlight><highlight class="comment">/*proto*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2602"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__pyx_doc_5imate_6logdet_11_slq_method_2check_arguments[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;check_arguments(return_info)\n\n<sp/><sp/><sp/><sp/>Checks<sp/>the<sp/>type<sp/>and<sp/>value<sp/>of<sp/>the<sp/>parameters.\n<sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyMethodDef<sp/>__pyx_mdef_5imate_6logdet_11_slq_method_3check_arguments<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;check_arguments&quot;</highlight><highlight class="normal">,<sp/>(PyCFunction)__pyx_pw_5imate_6logdet_11_slq_method_3check_arguments,<sp/>METH_O,<sp/>__pyx_doc_5imate_6logdet_11_slq_method_2check_arguments};</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_pw_5imate_6logdet_11_slq_method_3check_arguments(PyObject<sp/>*__pyx_self,<sp/>PyObject<sp/>*__pyx_v_return_info)<sp/>{</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_r<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyDeclarations</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/>__Pyx_RefNannySetupContext(</highlight><highlight class="stringliteral">&quot;check_arguments<sp/>(wrapper)&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/>__pyx_r<sp/>=<sp/>__pyx_pf_5imate_6logdet_11_slq_method_2check_arguments(__pyx_self,<sp/>((PyObject<sp/>*)__pyx_v_return_info));</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"></highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>function<sp/>exit<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyFinishContext();</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__pyx_r;</highlight></codeline>
<codeline lineno="2613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"></highlight></codeline>
<codeline lineno="2615"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__pyx_pf_5imate_6logdet_11_slq_method_2check_arguments(CYTHON_UNUSED<sp/>PyObject<sp/>*__pyx_self,<sp/>PyObject<sp/>*__pyx_v_return_info)<sp/>{</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_r<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/>__Pyx_TraceDeclarations</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyDeclarations</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_t_1<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pyx_t_2;</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pyx_t_3;</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pyx_lineno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*__pyx_filename<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pyx_clineno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/>__Pyx_TraceFrameInit(__pyx_codeobj__2)</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/>__Pyx_RefNannySetupContext(</highlight><highlight class="stringliteral">&quot;check_arguments&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/>__Pyx_TraceCall(</highlight><highlight class="stringliteral">&quot;check_arguments&quot;</highlight><highlight class="normal">,<sp/>__pyx_f[0],<sp/>843,<sp/>0,<sp/>__PYX_ERR(0,<sp/>843,<sp/>__pyx_L1_error));</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"></highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:849</highlight></codeline>
<codeline lineno="2630"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2631"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>#<sp/>Check<sp/>return<sp/>info</highlight></codeline>
<codeline lineno="2632"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>isinstance(return_info,<sp/>bool):<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2633"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raise<sp/>TypeError(&apos;&quot;return_info&quot;<sp/>should<sp/>be<sp/>boolean.&apos;)</highlight></codeline>
<codeline lineno="2634"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/>__Pyx_TraceLine(849,0,__PYX_ERR(0,<sp/>849,<sp/>__pyx_L1_error))</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/>__pyx_t_1<sp/>=<sp/>((PyObject*)&amp;PyBool_Type);</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/>__Pyx_INCREF(__pyx_t_1);</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/>__pyx_t_2<sp/>=<sp/>PyObject_IsInstance(__pyx_v_return_info,<sp/>__pyx_t_1);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(__pyx_t_2<sp/>==<sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)-1)))<sp/>__PYX_ERR(0,<sp/>849,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/>__Pyx_DECREF(__pyx_t_1);<sp/>__pyx_t_1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/>__pyx_t_3<sp/>=<sp/>((!(__pyx_t_2<sp/>!=<sp/>0))<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(__pyx_t_3))<sp/>{</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"></highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:850</highlight></codeline>
<codeline lineno="2644"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>#<sp/>Check<sp/>return<sp/>info</highlight></codeline>
<codeline lineno="2645"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>isinstance(return_info,<sp/>bool):</highlight></codeline>
<codeline lineno="2646"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raise<sp/>TypeError(&apos;&quot;return_info&quot;<sp/>should<sp/>be<sp/>boolean.&apos;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2647"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_TraceLine(850,0,__PYX_ERR(0,<sp/>850,<sp/>__pyx_L1_error))</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_t_1<sp/>=<sp/>__Pyx_PyObject_Call(__pyx_builtin_TypeError,<sp/>__pyx_tuple__3,<sp/>NULL);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_t_1))<sp/>__PYX_ERR(0,<sp/>850,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_GOTREF(__pyx_t_1);</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_Raise(__pyx_t_1,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_DECREF(__pyx_t_1);<sp/>__pyx_t_1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/>__PYX_ERR(0,<sp/>850,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:849</highlight></codeline>
<codeline lineno="2656"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2657"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>#<sp/>Check<sp/>return<sp/>info</highlight></codeline>
<codeline lineno="2658"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>isinstance(return_info,<sp/>bool):<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2659"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raise<sp/>TypeError(&apos;&quot;return_info&quot;<sp/>should<sp/>be<sp/>boolean.&apos;)</highlight></codeline>
<codeline lineno="2660"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"></highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:843</highlight></codeline>
<codeline lineno="2664"><highlight class="comment"><sp/>*<sp/>#<sp/>===============</highlight></codeline>
<codeline lineno="2665"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2666"><highlight class="comment"><sp/>*<sp/>def<sp/>check_arguments(return_info):<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2667"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="2668"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>Checks<sp/>the<sp/>type<sp/>and<sp/>value<sp/>of<sp/>the<sp/>parameters.</highlight></codeline>
<codeline lineno="2669"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2670"><highlight class="normal"></highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>function<sp/>exit<sp/>code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/>__pyx_r<sp/>=<sp/>Py_None;<sp/>__Pyx_INCREF(Py_None);</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>__pyx_L0;</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/>__pyx_L1_error:;</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/>__Pyx_XDECREF(__pyx_t_1);</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/>__Pyx_AddTraceback(</highlight><highlight class="stringliteral">&quot;imate.logdet._slq_method.check_arguments&quot;</highlight><highlight class="normal">,<sp/>__pyx_clineno,<sp/>__pyx_lineno,<sp/>__pyx_filename);</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/>__pyx_r<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/>__pyx_L0:;</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/>__Pyx_XGIVEREF(__pyx_r);</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/>__Pyx_TraceReturn(__pyx_r,<sp/>0);</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyFinishContext();</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__pyx_r;</highlight></codeline>
<codeline lineno="2683"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"></highlight></codeline>
<codeline lineno="2685"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyMethodDef<sp/>__pyx_methods[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/>{0,<sp/>0,<sp/>0,<sp/>0}</highlight></codeline>
<codeline lineno="2687"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"></highlight></codeline>
<codeline lineno="2689"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2690"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_PEP489_MULTI_PHASE_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2691"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>__pyx_pymod_create(PyObject<sp/>*spec,<sp/>PyModuleDef<sp/>*def);<sp/></highlight><highlight class="comment">/*proto*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2692"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pyx_pymod_exec__slq_method(PyObject*<sp/>module);<sp/></highlight><highlight class="comment">/*proto*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2693"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyModuleDef_Slot<sp/>__pyx_moduledef_slots[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/>{Py_mod_create,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)__pyx_pymod_create},</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/>{Py_mod_exec,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)__pyx_pymod_exec__slq_method},</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/>{0,<sp/>NULL}</highlight></codeline>
<codeline lineno="2697"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"></highlight></codeline>
<codeline lineno="2700"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PyModuleDef<sp/>__pyx_moduledef<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/>PyModuleDef_HEAD_INIT,</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;_slq_method&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="comment">/*<sp/>m_doc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2704"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>CYTHON_PEP489_MULTI_PHASE_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="comment">/*<sp/>m_size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2706"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/>-1,<sp/></highlight><highlight class="comment">/*<sp/>m_size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2708"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_methods<sp/></highlight><highlight class="comment">/*<sp/>m_methods<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>CYTHON_PEP489_MULTI_PHASE_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_moduledef_slots,<sp/></highlight><highlight class="comment">/*<sp/>m_slots<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2712"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL,<sp/></highlight><highlight class="comment">/*<sp/>m_reload<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2714"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL,<sp/></highlight><highlight class="comment">/*<sp/>m_traverse<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL,<sp/></highlight><highlight class="comment">/*<sp/>m_clear<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/>NULL<sp/></highlight><highlight class="comment">/*<sp/>m_free<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2718"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2720"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CYTHON_SMALL_CODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2721"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2722"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_SMALL_CODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2723"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>(__GNUC__<sp/>&gt;<sp/>4<sp/>||<sp/>(__GNUC__<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>__GNUC_MINOR__<sp/>&gt;=<sp/>3))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2724"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_SMALL_CODE<sp/>__attribute__((cold))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2725"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2726"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CYTHON_SMALL_CODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2727"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2728"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2729"><highlight class="normal"></highlight></codeline>
<codeline lineno="2730"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>__Pyx_StringTabEntry<sp/>__pyx_string_tab[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_A,<sp/>__pyx_k_A,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_A),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/>{&amp;__pyx_kp_u_Log_determinant_of_non_singular,<sp/>__pyx_k_Log_determinant_of_non_singular,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_Log_determinant_of_non_singular),<sp/>0,<sp/>1,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_TypeError,<sp/>__pyx_k_TypeError,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_TypeError),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_check_arguments,<sp/>__pyx_k_check_arguments,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_check_arguments),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_cline_in_traceback,<sp/>__pyx_k_cline_in_traceback,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_cline_in_traceback),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_confidence_level,<sp/>__pyx_k_confidence_level,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_confidence_level),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_error_atol,<sp/>__pyx_k_error_atol,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_error_atol),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_error_rtol,<sp/>__pyx_k_error_rtol,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_error_rtol),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_functions,<sp/>__pyx_k_functions,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_functions),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_gpu,<sp/>__pyx_k_gpu,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_gpu),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_gram,<sp/>__pyx_k_gram,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_gram),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_imate_logdet__slq_method,<sp/>__pyx_k_imate_logdet__slq_method,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_imate_logdet__slq_method),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/>{&amp;__pyx_kp_s_imate_logdet__slq_method_pyx,<sp/>__pyx_k_imate_logdet__slq_method_pyx,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_imate_logdet__slq_method_pyx),<sp/>0,<sp/>0,<sp/>1,<sp/>0},</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_import,<sp/>__pyx_k_import,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_import),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_info,<sp/>__pyx_k_info,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_info),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_lanczos_degree,<sp/>__pyx_k_lanczos_degree,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_lanczos_degree),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_lanczos_tol,<sp/>__pyx_k_lanczos_tol,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_lanczos_tol),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_main,<sp/>__pyx_k_main,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_main),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_matrix_function,<sp/>__pyx_k_matrix_function,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_matrix_function),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_max_num_samples,<sp/>__pyx_k_max_num_samples,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_max_num_samples),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_min_num_samples,<sp/>__pyx_k_min_num_samples,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_min_num_samples),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_name,<sp/>__pyx_k_name,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_name),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_num_gpu_devices,<sp/>__pyx_k_num_gpu_devices,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_num_gpu_devices),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_num_threads,<sp/>__pyx_k_num_threads,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_num_threads),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_orthogonalize,<sp/>__pyx_k_orthogonalize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_orthogonalize),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_outlier_significance_level,<sp/>__pyx_k_outlier_significance_level,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_outlier_significance_level),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_p,<sp/>__pyx_k_p,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_p),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_parameters,<sp/>__pyx_k_parameters,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_parameters),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_plot,<sp/>__pyx_k_plot,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_plot),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_pyFunction,<sp/>__pyx_k_pyFunction,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_pyFunction),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_py_matrix_function,<sp/>__pyx_k_py_matrix_function,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_py_matrix_function),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_pyx_vtable,<sp/>__pyx_k_pyx_vtable,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_pyx_vtable),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_return_info,<sp/>__pyx_k_return_info,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_return_info),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/>{&amp;__pyx_kp_u_return_info_should_be_boolean,<sp/>__pyx_k_return_info_should_be_boolean,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_return_info_should_be_boolean),<sp/>0,<sp/>1,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_slq_method,<sp/>__pyx_k_slq_method,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_slq_method),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/>{&amp;__pyx_kp_u_slq_method_line_24,<sp/>__pyx_k_slq_method_line_24,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_slq_method_line_24),<sp/>0,<sp/>1,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_test,<sp/>__pyx_k_test,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_test),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_trace,<sp/>__pyx_k_trace,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_trace),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_trace_estimator,<sp/>__pyx_k_trace_estimator,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_trace_estimator),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_trace_estimator_2,<sp/>__pyx_k_trace_estimator_2,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_trace_estimator_2),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/>{&amp;__pyx_n_s_verbose,<sp/>__pyx_k_verbose,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_k_verbose),<sp/>0,<sp/>0,<sp/>1,<sp/>1},</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/>{0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0}</highlight></codeline>
<codeline lineno="2773"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_SMALL_CODE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_InitCachedBuiltins(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/>__pyx_builtin_TypeError<sp/>=<sp/>__Pyx_GetBuiltinName(__pyx_n_s_TypeError);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!__pyx_builtin_TypeError)<sp/>__PYX_ERR(0,<sp/>850,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/>__pyx_L1_error:;</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2779"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"></highlight></codeline>
<codeline lineno="2781"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_SMALL_CODE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_InitCachedConstants(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyDeclarations</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/>__Pyx_RefNannySetupContext(</highlight><highlight class="stringliteral">&quot;__Pyx_InitCachedConstants&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"></highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:850</highlight></codeline>
<codeline lineno="2786"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>#<sp/>Check<sp/>return<sp/>info</highlight></codeline>
<codeline lineno="2787"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>isinstance(return_info,<sp/>bool):</highlight></codeline>
<codeline lineno="2788"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raise<sp/>TypeError(&apos;&quot;return_info&quot;<sp/>should<sp/>be<sp/>boolean.&apos;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2789"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/>__pyx_tuple__3<sp/>=<sp/>PyTuple_Pack(1,<sp/>__pyx_kp_u_return_info_should_be_boolean);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_tuple__3))<sp/>__PYX_ERR(0,<sp/>850,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/>__Pyx_GOTREF(__pyx_tuple__3);</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/>__Pyx_GIVEREF(__pyx_tuple__3);</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"></highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:24</highlight></codeline>
<codeline lineno="2795"><highlight class="comment"><sp/>*<sp/>#<sp/>==========</highlight></codeline>
<codeline lineno="2796"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2797"><highlight class="comment"><sp/>*<sp/>def<sp/>slq_method(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2798"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A,</highlight></codeline>
<codeline lineno="2799"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gram=False,</highlight></codeline>
<codeline lineno="2800"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/>__pyx_tuple__4<sp/>=<sp/>PyTuple_Pack(23,<sp/>__pyx_n_s_A,<sp/>__pyx_n_s_gram,<sp/>__pyx_n_s_p,<sp/>__pyx_n_s_return_info,<sp/>__pyx_n_s_parameters,<sp/>__pyx_n_s_min_num_samples,<sp/>__pyx_n_s_max_num_samples,<sp/>__pyx_n_s_error_atol,<sp/>__pyx_n_s_error_rtol,<sp/>__pyx_n_s_confidence_level,<sp/>__pyx_n_s_outlier_significance_level,<sp/>__pyx_n_s_lanczos_degree,<sp/>__pyx_n_s_lanczos_tol,<sp/>__pyx_n_s_orthogonalize,<sp/>__pyx_n_s_num_threads,<sp/>__pyx_n_s_num_gpu_devices,<sp/>__pyx_n_s_gpu,<sp/>__pyx_n_s_verbose,<sp/>__pyx_n_s_plot,<sp/>__pyx_n_s_matrix_function,<sp/>__pyx_n_s_py_matrix_function,<sp/>__pyx_n_s_trace,<sp/>__pyx_n_s_info);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_tuple__4))<sp/>__PYX_ERR(0,<sp/>24,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/>__Pyx_GOTREF(__pyx_tuple__4);</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/>__Pyx_GIVEREF(__pyx_tuple__4);</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/>__pyx_codeobj_<sp/>=<sp/>(PyObject*)__Pyx_PyCode_New(19,<sp/>0,<sp/>23,<sp/>0,<sp/>CO_OPTIMIZED|CO_NEWLOCALS,<sp/>__pyx_empty_bytes,<sp/>__pyx_empty_tuple,<sp/>__pyx_empty_tuple,<sp/>__pyx_tuple__4,<sp/>__pyx_empty_tuple,<sp/>__pyx_empty_tuple,<sp/>__pyx_kp_s_imate_logdet__slq_method_pyx,<sp/>__pyx_n_s_slq_method,<sp/>24,<sp/>__pyx_empty_bytes);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_codeobj_))<sp/>__PYX_ERR(0,<sp/>24,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/>__pyx_tuple__5<sp/>=<sp/>PyTuple_Pack(18,<sp/>((PyObject<sp/>*)Py_False),<sp/>((PyObject*)__pyx_float_1_0),<sp/>((PyObject<sp/>*)Py_False),<sp/>((PyObject<sp/>*)Py_None),<sp/>((PyObject<sp/>*)__pyx_int_10),<sp/>((PyObject<sp/>*)__pyx_int_50),<sp/>((PyObject<sp/>*)Py_None),<sp/>((PyObject*)__pyx_float_1eneg_2),<sp/>((PyObject*)__pyx_float_0_95),<sp/>((PyObject*)__pyx_float_0_001),<sp/>((PyObject<sp/>*)__pyx_int_20),<sp/>((PyObject<sp/>*)Py_None),<sp/>((PyObject<sp/>*)__pyx_int_0),<sp/>((PyObject<sp/>*)__pyx_int_0),<sp/>((PyObject<sp/>*)__pyx_int_0),<sp/>((PyObject<sp/>*)Py_False),<sp/>((PyObject<sp/>*)Py_False),<sp/>((PyObject<sp/>*)Py_False));<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_tuple__5))<sp/>__PYX_ERR(0,<sp/>24,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/>__Pyx_GOTREF(__pyx_tuple__5);</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/>__Pyx_GIVEREF(__pyx_tuple__5);</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"></highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:843</highlight></codeline>
<codeline lineno="2810"><highlight class="comment"><sp/>*<sp/>#<sp/>===============</highlight></codeline>
<codeline lineno="2811"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="2812"><highlight class="comment"><sp/>*<sp/>def<sp/>check_arguments(return_info):<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="2813"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="2814"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>Checks<sp/>the<sp/>type<sp/>and<sp/>value<sp/>of<sp/>the<sp/>parameters.</highlight></codeline>
<codeline lineno="2815"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/>__pyx_tuple__6<sp/>=<sp/>PyTuple_Pack(1,<sp/>__pyx_n_s_return_info);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_tuple__6))<sp/>__PYX_ERR(0,<sp/>843,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/>__Pyx_GOTREF(__pyx_tuple__6);</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/>__Pyx_GIVEREF(__pyx_tuple__6);</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/>__pyx_codeobj__2<sp/>=<sp/>(PyObject*)__Pyx_PyCode_New(1,<sp/>0,<sp/>1,<sp/>0,<sp/>CO_OPTIMIZED|CO_NEWLOCALS,<sp/>__pyx_empty_bytes,<sp/>__pyx_empty_tuple,<sp/>__pyx_empty_tuple,<sp/>__pyx_tuple__6,<sp/>__pyx_empty_tuple,<sp/>__pyx_empty_tuple,<sp/>__pyx_kp_s_imate_logdet__slq_method_pyx,<sp/>__pyx_n_s_check_arguments,<sp/>843,<sp/>__pyx_empty_bytes);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_codeobj__2))<sp/>__PYX_ERR(0,<sp/>843,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyFinishContext();</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/>__pyx_L1_error:;</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyFinishContext();</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2825"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"></highlight></codeline>
<codeline lineno="2827"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_SMALL_CODE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_InitGlobals(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__Pyx_InitStrings(__pyx_string_tab)<sp/>&lt;<sp/>0)<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/>__pyx_float_1_0<sp/>=<sp/>PyFloat_FromDouble(1.0);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_float_1_0))<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/>__pyx_float_0_95<sp/>=<sp/>PyFloat_FromDouble(0.95);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_float_0_95))<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/>__pyx_float_1eneg_2<sp/>=<sp/>PyFloat_FromDouble(1e-2);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_float_1eneg_2))<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/>__pyx_float_0_001<sp/>=<sp/>PyFloat_FromDouble(0.001);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_float_0_001))<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/>__pyx_int_0<sp/>=<sp/>PyInt_FromLong(0);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_int_0))<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/>__pyx_int_10<sp/>=<sp/>PyInt_FromLong(10);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_int_10))<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/>__pyx_int_20<sp/>=<sp/>PyInt_FromLong(20);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_int_20))<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/>__pyx_int_50<sp/>=<sp/>PyInt_FromLong(50);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_int_50))<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/>__pyx_L1_error:;</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"></highlight></codeline>
<codeline lineno="2842"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_SMALL_CODE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_modinit_global_init_code(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">/*proto*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2843"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_SMALL_CODE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_modinit_variable_export_code(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">/*proto*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2844"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_SMALL_CODE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_modinit_function_export_code(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">/*proto*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2845"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_SMALL_CODE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_modinit_type_init_code(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">/*proto*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2846"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_SMALL_CODE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_modinit_type_import_code(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">/*proto*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2847"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_SMALL_CODE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_modinit_variable_import_code(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">/*proto*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2848"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_SMALL_CODE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_modinit_function_import_code(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">/*proto*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2849"><highlight class="normal"></highlight></codeline>
<codeline lineno="2850"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_modinit_global_init_code(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyDeclarations</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/>__Pyx_RefNannySetupContext(</highlight><highlight class="stringliteral">&quot;__Pyx_modinit_global_init_code&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*---<sp/>Global<sp/>init<sp/>code<sp/>---*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyFinishContext();</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2856"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"></highlight></codeline>
<codeline lineno="2858"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_modinit_variable_export_code(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyDeclarations</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/>__Pyx_RefNannySetupContext(</highlight><highlight class="stringliteral">&quot;__Pyx_modinit_variable_export_code&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*---<sp/>Variable<sp/>export<sp/>code<sp/>---*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyFinishContext();</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2864"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"></highlight></codeline>
<codeline lineno="2866"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_modinit_function_export_code(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyDeclarations</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/>__Pyx_RefNannySetupContext(</highlight><highlight class="stringliteral">&quot;__Pyx_modinit_function_export_code&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*---<sp/>Function<sp/>export<sp/>code<sp/>---*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyFinishContext();</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"></highlight></codeline>
<codeline lineno="2874"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_modinit_type_init_code(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyDeclarations</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/>__Pyx_RefNannySetupContext(</highlight><highlight class="stringliteral">&quot;__Pyx_modinit_type_init_code&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*---<sp/>Type<sp/>init<sp/>code<sp/>---*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyFinishContext();</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"></highlight></codeline>
<codeline lineno="2882"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_modinit_type_import_code(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyDeclarations</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_t_1<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pyx_lineno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*__pyx_filename<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pyx_clineno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/>__Pyx_RefNannySetupContext(</highlight><highlight class="stringliteral">&quot;__Pyx_modinit_type_import_code&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*---<sp/>Type<sp/>import<sp/>code<sp/>---*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/>__pyx_t_1<sp/>=<sp/>PyImport_ImportModule(</highlight><highlight class="stringliteral">&quot;imate.functions.py_functions&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_t_1))<sp/>__PYX_ERR(1,<sp/>20,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/>__Pyx_GOTREF(__pyx_t_1);</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/>__pyx_ptype_5imate_9functions_12py_functions_pyFunction<sp/>=<sp/>__Pyx_ImportType_0_29_36(__pyx_t_1,<sp/></highlight><highlight class="stringliteral">&quot;imate.functions.py_functions&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pyFunction&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>__pyx_obj_5imate_9functions_12py_functions_pyFunction),<sp/>__PYX_GET_STRUCT_ALIGNMENT_0_29_36(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>__pyx_obj_5imate_9functions_12py_functions_pyFunction),__Pyx_ImportType_CheckSize_Warn_0_29_36);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!__pyx_ptype_5imate_9functions_12py_functions_pyFunction)<sp/>__PYX_ERR(1,<sp/>20,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/>__pyx_vtabptr_5imate_9functions_12py_functions_pyFunction<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__pyx_vtabstruct_5imate_9functions_12py_functions_pyFunction*)__Pyx_GetVtable(__pyx_ptype_5imate_9functions_12py_functions_pyFunction-&gt;tp_dict);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_vtabptr_5imate_9functions_12py_functions_pyFunction))<sp/>__PYX_ERR(1,<sp/>20,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/>__Pyx_DECREF(__pyx_t_1);<sp/>__pyx_t_1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyFinishContext();</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/>__pyx_L1_error:;</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/>__Pyx_XDECREF(__pyx_t_1);</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyFinishContext();</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2901"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"></highlight></codeline>
<codeline lineno="2903"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_modinit_variable_import_code(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyDeclarations</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/>__Pyx_RefNannySetupContext(</highlight><highlight class="stringliteral">&quot;__Pyx_modinit_variable_import_code&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*---<sp/>Variable<sp/>import<sp/>code<sp/>---*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyFinishContext();</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2909"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"></highlight></codeline>
<codeline lineno="2911"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_modinit_function_import_code(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyDeclarations</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_t_1<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pyx_lineno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*__pyx_filename<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pyx_clineno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/>__Pyx_RefNannySetupContext(</highlight><highlight class="stringliteral">&quot;__Pyx_modinit_function_import_code&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*---<sp/>Function<sp/>import<sp/>code<sp/>---*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/>__pyx_t_1<sp/>=<sp/>PyImport_ImportModule(</highlight><highlight class="stringliteral">&quot;imate._trace_estimator.trace_estimator&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!__pyx_t_1)<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/>__Pyx_GOTREF(__pyx_t_1);</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__Pyx_ImportFunction_0_29_36(__pyx_t_1,<sp/></highlight><highlight class="stringliteral">&quot;trace_estimator&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(**)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">))&amp;__pyx_f_5imate_16_trace_estimator_15trace_estimator_trace_estimator,<sp/></highlight><highlight class="stringliteral">&quot;PyObject<sp/>*(PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>struct<sp/>__pyx_obj_5imate_9functions_12py_functions_pyFunction<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>PyObject<sp/>*,<sp/>int<sp/>__pyx_skip_dispatch)&quot;</highlight><highlight class="normal">)<sp/>&lt;<sp/>0)<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/>__Pyx_DECREF(__pyx_t_1);<sp/>__pyx_t_1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyFinishContext();</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/>__pyx_L1_error:;</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/>__Pyx_XDECREF(__pyx_t_1);</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyFinishContext();</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2929"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"></highlight></codeline>
<codeline lineno="2931"><highlight class="normal"></highlight></codeline>
<codeline lineno="2932"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CYTHON_NO_PYINIT_EXPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2933"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyMODINIT_FUNC<sp/>PyMODINIT_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2934"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2935"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2936"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyMODINIT_FUNC<sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"><sp/>void</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2938"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyMODINIT_FUNC<sp/>void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2939"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2940"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2941"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2942"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyMODINIT_FUNC<sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"><sp/>PyObject<sp/>*</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2944"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_PyMODINIT_FUNC<sp/>PyObject<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2945"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2946"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2947"><highlight class="normal"></highlight></codeline>
<codeline lineno="2948"><highlight class="normal"></highlight></codeline>
<codeline lineno="2949"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2950"><highlight class="normal">__Pyx_PyMODINIT_FUNC<sp/>init_slq_method(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>CYTHON_SMALL_CODE;<sp/></highlight><highlight class="comment">/*proto*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2951"><highlight class="normal">__Pyx_PyMODINIT_FUNC<sp/>init_slq_method(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2953"><highlight class="normal">__Pyx_PyMODINIT_FUNC<sp/>PyInit__slq_method(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>CYTHON_SMALL_CODE;<sp/></highlight><highlight class="comment">/*proto*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2954"><highlight class="normal">__Pyx_PyMODINIT_FUNC<sp/>PyInit__slq_method(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_PEP489_MULTI_PHASE_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2956"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyModuleDef_Init(&amp;__pyx_moduledef);</highlight></codeline>
<codeline lineno="2958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_SMALL_CODE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_check_single_interpreter(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x030700A1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PY_INT64_T<sp/>main_interpreter_id<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/>PY_INT64_T<sp/>current_id<sp/>=<sp/>PyInterpreterState_GetID(PyThreadState_Get()-&gt;interp);</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(main_interpreter_id<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>main_interpreter_id<sp/>=<sp/>current_id;</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(unlikely(current_id<sp/>==<sp/>-1))<sp/>?<sp/>-1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(main_interpreter_id<sp/>!=<sp/>current_id))</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyInterpreterState<sp/>*main_interpreter<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/><sp/>PyInterpreterState<sp/>*current_interpreter<sp/>=<sp/>PyThreadState_Get()-&gt;interp;</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!main_interpreter)<sp/>{</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>main_interpreter<sp/>=<sp/>current_interpreter;</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(main_interpreter<sp/>!=<sp/>current_interpreter))</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyExc_ImportError,</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Interpreter<sp/>change<sp/>detected<sp/>-<sp/>this<sp/>module<sp/>can<sp/>only<sp/>be<sp/>loaded<sp/>into<sp/>one<sp/>interpreter<sp/>per<sp/>process.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2981"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_SMALL_CODE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_copy_spec_to_module(PyObject<sp/>*spec,<sp/>PyObject<sp/>*moddict,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>from_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>to_name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>allow_none)<sp/>{</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*value<sp/>=<sp/>PyObject_GetAttrString(spec,<sp/>from_name);</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(value))<sp/>{</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allow_none<sp/>||<sp/>value<sp/>!=<sp/>Py_None)<sp/>{</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>PyDict_SetItemString(moddict,<sp/>to_name,<sp/>value);</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(value);</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyErr_ExceptionMatches(PyExc_AttributeError))<sp/>{</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Clear();</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2996"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_SMALL_CODE<sp/>PyObject*<sp/>__pyx_pymod_create(PyObject<sp/>*spec,<sp/>CYTHON_UNUSED<sp/>PyModuleDef<sp/>*def)<sp/>{</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*module<sp/>=<sp/>NULL,<sp/>*moddict,<sp/>*modname;</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__Pyx_check_single_interpreter())</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__pyx_m)</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_NewRef(__pyx_m);</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/>modname<sp/>=<sp/>PyObject_GetAttrString(spec,<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!modname))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/>module<sp/>=<sp/>PyModule_NewObject(modname);</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_DECREF(modname);</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!module))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/>moddict<sp/>=<sp/>PyModule_GetDict(module);</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!moddict))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(__Pyx_copy_spec_to_module(spec,<sp/>moddict,<sp/></highlight><highlight class="stringliteral">&quot;loader&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;__loader__&quot;</highlight><highlight class="normal">,<sp/>1)<sp/>&lt;<sp/>0))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(__Pyx_copy_spec_to_module(spec,<sp/>moddict,<sp/></highlight><highlight class="stringliteral">&quot;origin&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;__file__&quot;</highlight><highlight class="normal">,<sp/>1)<sp/>&lt;<sp/>0))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(__Pyx_copy_spec_to_module(spec,<sp/>moddict,<sp/></highlight><highlight class="stringliteral">&quot;parent&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;__package__&quot;</highlight><highlight class="normal">,<sp/>1)<sp/>&lt;<sp/>0))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(__Pyx_copy_spec_to_module(spec,<sp/>moddict,<sp/></highlight><highlight class="stringliteral">&quot;submodule_search_locations&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;__path__&quot;</highlight><highlight class="normal">,<sp/>0)<sp/>&lt;<sp/>0))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>module;</highlight></codeline>
<codeline lineno="3015"><highlight class="normal">bad:</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(module);</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3018"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"></highlight></codeline>
<codeline lineno="3020"><highlight class="normal"></highlight></codeline>
<codeline lineno="3021"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_SMALL_CODE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pyx_pymod_exec__slq_method(PyObject<sp/>*__pyx_pyinit_module)</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3023"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3024"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/>__Pyx_TraceDeclarations</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_t_1<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/>PyObject<sp/>*__pyx_t_2<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pyx_lineno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*__pyx_filename<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pyx_clineno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyDeclarations</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>CYTHON_PEP489_MULTI_PHASE_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__pyx_m)<sp/>{</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__pyx_m<sp/>==<sp/>__pyx_pyinit_module)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_RuntimeError,<sp/></highlight><highlight class="stringliteral">&quot;Module<sp/>&apos;_slq_method&apos;<sp/>has<sp/>already<sp/>been<sp/>imported.<sp/>Re-initialisation<sp/>is<sp/>not<sp/>supported.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#elif<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__pyx_m)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_NewRef(__pyx_m);</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3041"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>CYTHON_REFNANNY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3042"><highlight class="normal">__Pyx_RefNanny<sp/>=<sp/>__Pyx_RefNannyImportAPI(</highlight><highlight class="stringliteral">&quot;refnanny&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!__Pyx_RefNanny)<sp/>{</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/>PyErr_Clear();</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/>__Pyx_RefNanny<sp/>=<sp/>__Pyx_RefNannyImportAPI(</highlight><highlight class="stringliteral">&quot;Cython.Runtime.refnanny&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!__Pyx_RefNanny)</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Py_FatalError(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>import<sp/>&apos;refnanny&apos;<sp/>module&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3048"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/>__Pyx_RefNannySetupContext(</highlight><highlight class="stringliteral">&quot;__Pyx_PyMODINIT_FUNC<sp/>PyInit__slq_method(void)&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__Pyx_check_binary_version()<sp/>&lt;<sp/>0)<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/></highlight><highlight class="preprocessor">#ifdef<sp/>__Pxy_PyFrame_Initialize_Offsets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/>__Pxy_PyFrame_Initialize_Offsets();</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/>__pyx_empty_tuple<sp/>=<sp/>PyTuple_New(0);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_empty_tuple))<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/>__pyx_empty_bytes<sp/>=<sp/>PyBytes_FromStringAndSize(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>0);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_empty_bytes))<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/>__pyx_empty_unicode<sp/>=<sp/>PyUnicode_FromStringAndSize(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>0);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_empty_unicode))<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/></highlight><highlight class="preprocessor">#ifdef<sp/>__Pyx_CyFunction_USED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__pyx_CyFunction_init()<sp/>&lt;<sp/>0)<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3061"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>__Pyx_FusedFunction_USED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__pyx_FusedFunction_init()<sp/>&lt;<sp/>0)<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3064"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>__Pyx_Coroutine_USED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__pyx_Coroutine_init()<sp/>&lt;<sp/>0)<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3067"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>__Pyx_Generator_USED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__pyx_Generator_init()<sp/>&lt;<sp/>0)<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3070"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>__Pyx_AsyncGen_USED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__pyx_AsyncGen_init()<sp/>&lt;<sp/>0)<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3073"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>__Pyx_StopAsyncIteration_USED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__pyx_StopAsyncIteration_init()<sp/>&lt;<sp/>0)<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*---<sp/>Library<sp/>function<sp/>declarations<sp/>---*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*---<sp/>Threads<sp/>initialization<sp/>code<sp/>---*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3078"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>defined(WITH_THREAD)<sp/>&amp;&amp;<sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x030700F0<sp/>&amp;&amp;<sp/>defined(__PYX_FORCE_INIT_THREADS)<sp/>&amp;&amp;<sp/>__PYX_FORCE_INIT_THREADS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/>PyEval_InitThreads();</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*---<sp/>Module<sp/>creation<sp/>code<sp/>---*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3082"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>CYTHON_PEP489_MULTI_PHASE_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/>__pyx_m<sp/>=<sp/>__pyx_pyinit_module;</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/>Py_INCREF(__pyx_m);</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3086"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/>__pyx_m<sp/>=<sp/>Py_InitModule4(</highlight><highlight class="stringliteral">&quot;_slq_method&quot;</highlight><highlight class="normal">,<sp/>__pyx_methods,<sp/>0,<sp/>0,<sp/>PYTHON_API_VERSION);<sp/>Py_XINCREF(__pyx_m);</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/>__pyx_m<sp/>=<sp/>PyModule_Create(&amp;__pyx_moduledef);</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_m))<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/>__pyx_d<sp/>=<sp/>PyModule_GetDict(__pyx_m);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_d))<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/>Py_INCREF(__pyx_d);</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/>__pyx_b<sp/>=<sp/>PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_b))<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/>Py_INCREF(__pyx_b);</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/>__pyx_cython_runtime<sp/>=<sp/>PyImport_AddModule((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/></highlight><highlight class="stringliteral">&quot;cython_runtime&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_cython_runtime))<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/>Py_INCREF(__pyx_cython_runtime);</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyObject_SetAttrString(__pyx_m,<sp/></highlight><highlight class="stringliteral">&quot;__builtins__&quot;</highlight><highlight class="normal">,<sp/>__pyx_b)<sp/>&lt;<sp/>0)<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*---<sp/>Initialize<sp/>various<sp/>global<sp/>constants<sp/>etc.<sp/>---*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__Pyx_InitGlobals()<sp/>&lt;<sp/>0)<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3<sp/>&amp;&amp;<sp/>(__PYX_DEFAULT_STRING_ENCODING_IS_ASCII<sp/>||<sp/>__PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__Pyx_init_sys_getdefaultencoding_params()<sp/>&lt;<sp/>0)<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__pyx_module_is_main_imate__logdet___slq_method)<sp/>{</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyObject_SetAttr(__pyx_m,<sp/>__pyx_n_s_name,<sp/>__pyx_n_s_main)<sp/>&lt;<sp/>0)<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*modules<sp/>=<sp/>PyImport_GetModuleDict();<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!modules))<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyDict_GetItemString(modules,<sp/></highlight><highlight class="stringliteral">&quot;imate.logdet._slq_method&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(PyDict_SetItemString(modules,<sp/></highlight><highlight class="stringliteral">&quot;imate.logdet._slq_method&quot;</highlight><highlight class="normal">,<sp/>__pyx_m)<sp/>&lt;<sp/>0))<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*---<sp/>Builtin<sp/>init<sp/>code<sp/>---*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__Pyx_InitCachedBuiltins()<sp/>&lt;<sp/>0)<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*---<sp/>Constants<sp/>init<sp/>code<sp/>---*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__Pyx_InitCachedConstants()<sp/>&lt;<sp/>0)<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*---<sp/>Global<sp/>type/function<sp/>init<sp/>code<sp/>---*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/>(void)__Pyx_modinit_global_init_code();</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/>(void)__Pyx_modinit_variable_export_code();</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/>(void)__Pyx_modinit_function_export_code();</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/>(void)__Pyx_modinit_type_init_code();</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(__Pyx_modinit_type_import_code()<sp/>&lt;<sp/>0))<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/>(void)__Pyx_modinit_variable_import_code();</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(__Pyx_modinit_function_import_code()<sp/>&lt;<sp/>0))<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*---<sp/>Execution<sp/>code<sp/>---*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3129"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>defined(__Pyx_Generator_USED)<sp/>||<sp/>defined(__Pyx_Coroutine_USED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__Pyx_patch_abc()<sp/>&lt;<sp/>0)<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/>__Pyx_TraceCall(</highlight><highlight class="stringliteral">&quot;__Pyx_PyMODINIT_FUNC<sp/>PyInit__slq_method(void)&quot;</highlight><highlight class="normal">,<sp/>__pyx_f[0],<sp/>1,<sp/>0,<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error));</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"></highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:14</highlight></codeline>
<codeline lineno="3135"><highlight class="comment"><sp/>*<sp/>#<sp/>=======</highlight></codeline>
<codeline lineno="3136"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="3137"><highlight class="comment"><sp/>*<sp/>from<sp/>.._trace_estimator<sp/>import<sp/>trace_estimator<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="3138"><highlight class="comment"><sp/>*<sp/>from<sp/>.._trace_estimator<sp/>cimport<sp/>trace_estimator</highlight></codeline>
<codeline lineno="3139"><highlight class="comment"><sp/>*<sp/>from<sp/>..functions<sp/>import<sp/>pyFunction</highlight></codeline>
<codeline lineno="3140"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/>__Pyx_TraceLine(14,0,__PYX_ERR(0,<sp/>14,<sp/>__pyx_L1_error))</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/>__pyx_t_1<sp/>=<sp/>PyList_New(1);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_t_1))<sp/>__PYX_ERR(0,<sp/>14,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/>__Pyx_GOTREF(__pyx_t_1);</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/>__Pyx_INCREF(__pyx_n_s_trace_estimator_2);</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/>__Pyx_GIVEREF(__pyx_n_s_trace_estimator_2);</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/>PyList_SET_ITEM(__pyx_t_1,<sp/>0,<sp/>__pyx_n_s_trace_estimator_2);</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/>__pyx_t_2<sp/>=<sp/>__Pyx_Import(__pyx_n_s_trace_estimator,<sp/>__pyx_t_1,<sp/>2);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_t_2))<sp/>__PYX_ERR(0,<sp/>14,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/>__Pyx_GOTREF(__pyx_t_2);</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/>__Pyx_DECREF(__pyx_t_1);<sp/>__pyx_t_1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/>__pyx_t_1<sp/>=<sp/>__Pyx_ImportFrom(__pyx_t_2,<sp/>__pyx_n_s_trace_estimator_2);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_t_1))<sp/>__PYX_ERR(0,<sp/>14,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/>__Pyx_GOTREF(__pyx_t_1);</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyDict_SetItem(__pyx_d,<sp/>__pyx_n_s_trace_estimator_2,<sp/>__pyx_t_1)<sp/>&lt;<sp/>0)<sp/>__PYX_ERR(0,<sp/>14,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/>__Pyx_DECREF(__pyx_t_1);<sp/>__pyx_t_1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/>__Pyx_DECREF(__pyx_t_2);<sp/>__pyx_t_2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"></highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:16</highlight></codeline>
<codeline lineno="3157"><highlight class="comment"><sp/>*<sp/>from<sp/>.._trace_estimator<sp/>import<sp/>trace_estimator</highlight></codeline>
<codeline lineno="3158"><highlight class="comment"><sp/>*<sp/>from<sp/>.._trace_estimator<sp/>cimport<sp/>trace_estimator</highlight></codeline>
<codeline lineno="3159"><highlight class="comment"><sp/>*<sp/>from<sp/>..functions<sp/>import<sp/>pyFunction<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="3160"><highlight class="comment"><sp/>*<sp/>from<sp/>..functions<sp/>cimport<sp/>pyFunction,<sp/>Function,<sp/>Logarithm</highlight></codeline>
<codeline lineno="3161"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="3162"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/>__Pyx_TraceLine(16,0,__PYX_ERR(0,<sp/>16,<sp/>__pyx_L1_error))</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/>__pyx_t_2<sp/>=<sp/>PyList_New(1);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_t_2))<sp/>__PYX_ERR(0,<sp/>16,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/>__Pyx_GOTREF(__pyx_t_2);</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/>__Pyx_INCREF(__pyx_n_s_pyFunction);</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/>__Pyx_GIVEREF(__pyx_n_s_pyFunction);</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/>PyList_SET_ITEM(__pyx_t_2,<sp/>0,<sp/>__pyx_n_s_pyFunction);</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/>__pyx_t_1<sp/>=<sp/>__Pyx_Import(__pyx_n_s_functions,<sp/>__pyx_t_2,<sp/>2);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_t_1))<sp/>__PYX_ERR(0,<sp/>16,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/>__Pyx_GOTREF(__pyx_t_1);</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/>__Pyx_DECREF(__pyx_t_2);<sp/>__pyx_t_2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/>__pyx_t_2<sp/>=<sp/>__Pyx_ImportFrom(__pyx_t_1,<sp/>__pyx_n_s_pyFunction);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_t_2))<sp/>__PYX_ERR(0,<sp/>16,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/>__Pyx_GOTREF(__pyx_t_2);</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyDict_SetItem(__pyx_d,<sp/>__pyx_n_s_pyFunction,<sp/>__pyx_t_2)<sp/>&lt;<sp/>0)<sp/>__PYX_ERR(0,<sp/>16,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/>__Pyx_DECREF(__pyx_t_2);<sp/>__pyx_t_2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/>__Pyx_DECREF(__pyx_t_1);<sp/>__pyx_t_1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"></highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:24</highlight></codeline>
<codeline lineno="3179"><highlight class="comment"><sp/>*<sp/>#<sp/>==========</highlight></codeline>
<codeline lineno="3180"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="3181"><highlight class="comment"><sp/>*<sp/>def<sp/>slq_method(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="3182"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A,</highlight></codeline>
<codeline lineno="3183"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gram=False,</highlight></codeline>
<codeline lineno="3184"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/>__Pyx_TraceLine(24,0,__PYX_ERR(0,<sp/>24,<sp/>__pyx_L1_error))</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/>__pyx_t_1<sp/>=<sp/>__Pyx_CyFunction_New(&amp;__pyx_mdef_5imate_6logdet_11_slq_method_1slq_method,<sp/>0,<sp/>__pyx_n_s_slq_method,<sp/>NULL,<sp/>__pyx_n_s_imate_logdet__slq_method,<sp/>__pyx_d,<sp/>((PyObject<sp/>*)__pyx_codeobj_));<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_t_1))<sp/>__PYX_ERR(0,<sp/>24,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/>__Pyx_GOTREF(__pyx_t_1);</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/>__Pyx_CyFunction_SetDefaultsTuple(__pyx_t_1,<sp/>__pyx_tuple__5);</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyDict_SetItem(__pyx_d,<sp/>__pyx_n_s_slq_method,<sp/>__pyx_t_1)<sp/>&lt;<sp/>0)<sp/>__PYX_ERR(0,<sp/>24,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/>__Pyx_DECREF(__pyx_t_1);<sp/>__pyx_t_1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"></highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:843</highlight></codeline>
<codeline lineno="3193"><highlight class="comment"><sp/>*<sp/>#<sp/>===============</highlight></codeline>
<codeline lineno="3194"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="3195"><highlight class="comment"><sp/>*<sp/>def<sp/>check_arguments(return_info):<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="3196"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="3197"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>Checks<sp/>the<sp/>type<sp/>and<sp/>value<sp/>of<sp/>the<sp/>parameters.</highlight></codeline>
<codeline lineno="3198"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/>__Pyx_TraceLine(843,0,__PYX_ERR(0,<sp/>843,<sp/>__pyx_L1_error))</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/>__pyx_t_1<sp/>=<sp/>__Pyx_CyFunction_New(&amp;__pyx_mdef_5imate_6logdet_11_slq_method_3check_arguments,<sp/>0,<sp/>__pyx_n_s_check_arguments,<sp/>NULL,<sp/>__pyx_n_s_imate_logdet__slq_method,<sp/>__pyx_d,<sp/>((PyObject<sp/>*)__pyx_codeobj__2));<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_t_1))<sp/>__PYX_ERR(0,<sp/>843,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/>__Pyx_GOTREF(__pyx_t_1);</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyDict_SetItem(__pyx_d,<sp/>__pyx_n_s_check_arguments,<sp/>__pyx_t_1)<sp/>&lt;<sp/>0)<sp/>__PYX_ERR(0,<sp/>843,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/>__Pyx_DECREF(__pyx_t_1);<sp/>__pyx_t_1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"></highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;imate/logdet/_slq_method.pyx&quot;:1</highlight></codeline>
<codeline lineno="3206"><highlight class="comment"><sp/>*<sp/>#<sp/>SPDX-FileCopyrightText:<sp/>Copyright<sp/>2021,<sp/>Siavash<sp/>Ameli<sp/>&lt;sameli@berkeley.edu&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</highlight></codeline>
<codeline lineno="3207"><highlight class="comment"><sp/>*<sp/>#<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="3208"><highlight class="comment"><sp/>*<sp/>#<sp/>SPDX-FileType:<sp/>SOURCE</highlight></codeline>
<codeline lineno="3209"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/>__Pyx_TraceLine(1,0,__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error))</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/>__pyx_t_1<sp/>=<sp/>__Pyx_PyDict_NewPresized(1);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_t_1))<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/>__Pyx_GOTREF(__pyx_t_1);</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyDict_SetItem(__pyx_t_1,<sp/>__pyx_kp_u_slq_method_line_24,<sp/>__pyx_kp_u_Log_determinant_of_non_singular)<sp/>&lt;<sp/>0)<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyDict_SetItem(__pyx_d,<sp/>__pyx_n_s_test,<sp/>__pyx_t_1)<sp/>&lt;<sp/>0)<sp/>__PYX_ERR(0,<sp/>1,<sp/>__pyx_L1_error)</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/>__Pyx_DECREF(__pyx_t_1);<sp/>__pyx_t_1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/>__Pyx_TraceReturn(Py_None,<sp/>0);</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"></highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*---<sp/>Wrapped<sp/>vars<sp/>code<sp/>---*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3219"><highlight class="normal"></highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>__pyx_L0;</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/>__pyx_L1_error:;</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/>__Pyx_XDECREF(__pyx_t_1);</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/>__Pyx_XDECREF(__pyx_t_2);</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__pyx_m)<sp/>{</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__pyx_d)<sp/>{</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_AddTraceback(</highlight><highlight class="stringliteral">&quot;init<sp/>imate.logdet._slq_method&quot;</highlight><highlight class="normal">,<sp/>__pyx_clineno,<sp/>__pyx_lineno,<sp/>__pyx_filename);</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_CLEAR(__pyx_m);</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyErr_Occurred())<sp/>{</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_ImportError,<sp/></highlight><highlight class="stringliteral">&quot;init<sp/>imate.logdet._slq_method&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/>__pyx_L0:;</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/>__Pyx_RefNannyFinishContext();</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>CYTHON_PEP489_MULTI_PHASE_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(__pyx_m<sp/>!=<sp/>NULL)<sp/>?<sp/>0<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#elif<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__pyx_m;</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"></highlight></codeline>
<codeline lineno="3243"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>Runtime<sp/>support<sp/>code<sp/>---<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3244"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Refnanny<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3245"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_REFNANNY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3246"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>__Pyx_RefNannyAPIStruct<sp/>*__Pyx_RefNannyImportAPI(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*modname)<sp/>{</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*m<sp/>=<sp/>NULL,<sp/>*p<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*r<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>PyImport_ImportModule(modname);</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>PyObject_GetAttrString(m,<sp/></highlight><highlight class="stringliteral">&quot;RefNannyAPI&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>end;</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>PyLong_AsVoidPtr(p);</highlight></codeline>
<codeline lineno="3254"><highlight class="normal">end:</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(p);</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(m);</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(__Pyx_RefNannyAPIStruct<sp/>*)r;</highlight></codeline>
<codeline lineno="3258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3260"><highlight class="normal"></highlight></codeline>
<codeline lineno="3261"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyObjectGetAttrStr<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3262"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_USE_TYPE_SLOTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3263"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyObject*<sp/>__Pyx_PyObject_GetAttrStr(PyObject*<sp/>obj,<sp/>PyObject*<sp/>attr_name)<sp/>{</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/><sp/><sp/>PyTypeObject*<sp/>tp<sp/>=<sp/>Py_TYPE(obj);</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(tp-&gt;tp_getattro))</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tp-&gt;tp_getattro(obj,<sp/>attr_name);</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(tp-&gt;tp_getattr))</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tp-&gt;tp_getattr(obj,<sp/>PyString_AS_STRING(attr_name));</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyObject_GetAttr(obj,<sp/>attr_name);</highlight></codeline>
<codeline lineno="3272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3274"><highlight class="normal"></highlight></codeline>
<codeline lineno="3275"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>GetBuiltinName<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3276"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__Pyx_GetBuiltinName(PyObject<sp/>*name)<sp/>{</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>result<sp/>=<sp/>__Pyx_PyObject_GetAttrStr(__pyx_b,<sp/>name);</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!result))<sp/>{</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_NameError,</highlight></codeline>
<codeline lineno="3280"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;name<sp/>&apos;%U&apos;<sp/>is<sp/>not<sp/>defined&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;name<sp/>&apos;%.200s&apos;<sp/>is<sp/>not<sp/>defined&quot;</highlight><highlight class="normal">,<sp/>PyString_AS_STRING(name));</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>RaiseDoubleKeywords<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3290"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_RaiseDoubleKeywordsError(</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>func_name,</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>kw_name)</highlight></codeline>
<codeline lineno="3293"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_TypeError,</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s()<sp/>got<sp/>multiple<sp/>values<sp/>for<sp/>keyword<sp/>argument<sp/>&apos;%U&apos;&quot;</highlight><highlight class="normal">,<sp/>func_name,<sp/>kw_name);</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s()<sp/>got<sp/>multiple<sp/>values<sp/>for<sp/>keyword<sp/>argument<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>func_name,</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyString_AsString(kw_name));</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"></highlight></codeline>
<codeline lineno="3303"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ParseKeywords<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3304"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_ParseOptionalKeywords(</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*kwds,</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>**argnames[],</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*kwds2,</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*values[],</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>num_pos_args,</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>function_name)</highlight></codeline>
<codeline lineno="3311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*key<sp/>=<sp/>0,<sp/>*value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject***<sp/>name;</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject***<sp/>first_kw_arg<sp/>=<sp/>argnames<sp/>+<sp/>num_pos_args;</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(PyDict_Next(kwds,<sp/>&amp;pos,<sp/>&amp;key,<sp/>&amp;value))<sp/>{</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>first_kw_arg;</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*name<sp/>&amp;&amp;<sp/>(**name<sp/>!=<sp/>key))<sp/>name++;</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*name)<sp/>{</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values[name-argnames]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>first_kw_arg;</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(PyString_Check(key)))<sp/>{</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*name)<sp/>{</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((CYTHON_COMPILING_IN_PYPY<sp/>||<sp/>PyString_GET_SIZE(**name)<sp/>==<sp/>PyString_GET_SIZE(key))</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>_PyString_Eq(**name,<sp/>key))<sp/>{</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values[name-argnames]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name++;</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*name)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject***<sp/>argname<sp/>=<sp/>argnames;</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(argname<sp/>!=<sp/>first_kw_arg)<sp/>{</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((**argname<sp/>==<sp/>key)<sp/>||<sp/>(</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CYTHON_COMPILING_IN_PYPY<sp/>||<sp/>PyString_GET_SIZE(**argname)<sp/>==<sp/>PyString_GET_SIZE(key))</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>_PyString_Eq(**argname,<sp/>key)))<sp/>{</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>arg_passed_twice;</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argname++;</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3347"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(PyUnicode_Check(key)))<sp/>{</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*name)<sp/>{</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmp<sp/>=<sp/>(**name<sp/>==<sp/>key)<sp/>?<sp/>0<sp/>:</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>!CYTHON_COMPILING_IN_PYPY<sp/>&amp;&amp;<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(__Pyx_PyUnicode_GET_LENGTH(**name)<sp/>!=<sp/>__Pyx_PyUnicode_GET_LENGTH(key))<sp/>?<sp/>1<sp/>:</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyUnicode_Compare(**name,<sp/>key);</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>unlikely(PyErr_Occurred()))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values[name-argnames]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name++;</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*name)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject***<sp/>argname<sp/>=<sp/>argnames;</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(argname<sp/>!=<sp/>first_kw_arg)<sp/>{</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmp<sp/>=<sp/>(**argname<sp/>==<sp/>key)<sp/>?<sp/>0<sp/>:</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>!CYTHON_COMPILING_IN_PYPY<sp/>&amp;&amp;<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(__Pyx_PyUnicode_GET_LENGTH(**argname)<sp/>!=<sp/>__Pyx_PyUnicode_GET_LENGTH(key))<sp/>?<sp/>1<sp/>:</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyUnicode_Compare(**argname,<sp/>key);</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>unlikely(PyErr_Occurred()))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>arg_passed_twice;</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argname++;</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>invalid_keyword_type;</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kwds2)<sp/>{</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(PyDict_SetItem(kwds2,<sp/>key,<sp/>value)))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>invalid_keyword;</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3385"><highlight class="normal">arg_passed_twice:</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_RaiseDoubleKeywordsError(function_name,<sp/>key);</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="3388"><highlight class="normal">invalid_keyword_type:</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_TypeError,</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%.200s()<sp/>keywords<sp/>must<sp/>be<sp/>strings&quot;</highlight><highlight class="normal">,<sp/>function_name);</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="3392"><highlight class="normal">invalid_keyword:</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_TypeError,</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/>#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%.200s()<sp/>got<sp/>an<sp/>unexpected<sp/>keyword<sp/>argument<sp/>&apos;%.200s&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>function_name,<sp/>PyString_AsString(key));</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s()<sp/>got<sp/>an<sp/>unexpected<sp/>keyword<sp/>argument<sp/>&apos;%U&apos;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>function_name,<sp/>key);</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3401"><highlight class="normal">bad:</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="3403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"></highlight></codeline>
<codeline lineno="3405"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>RaiseArgTupleInvalid<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3406"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_RaiseArgtupleInvalid(</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>func_name,</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exact,</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>num_min,</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>num_max,</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>num_found)</highlight></codeline>
<codeline lineno="3412"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>num_expected;</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*more_or_less;</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_found<sp/>&lt;<sp/>num_min)<sp/>{</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_expected<sp/>=<sp/>num_min;</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>more_or_less<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;at<sp/>least&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_expected<sp/>=<sp/>num_max;</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>more_or_less<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;at<sp/>most&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exact)<sp/>{</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>more_or_less<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;exactly&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_TypeError,</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%.200s()<sp/>takes<sp/>%.8s<sp/>%&quot;</highlight><highlight class="normal"><sp/>CYTHON_FORMAT_SSIZE_T<sp/></highlight><highlight class="stringliteral">&quot;d<sp/>positional<sp/>argument%.1s<sp/>(%&quot;</highlight><highlight class="normal"><sp/>CYTHON_FORMAT_SSIZE_T<sp/></highlight><highlight class="stringliteral">&quot;d<sp/>given)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_name,<sp/>more_or_less,<sp/>num_expected,</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(num_expected<sp/>==<sp/>1)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">,<sp/>num_found);</highlight></codeline>
<codeline lineno="3429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"></highlight></codeline>
<codeline lineno="3431"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyErrFetchRestore<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3432"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_FAST_THREAD_STATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3433"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_ErrRestoreInState(PyThreadState<sp/>*tstate,<sp/>PyObject<sp/>*type,<sp/>PyObject<sp/>*value,<sp/>PyObject<sp/>*tb)<sp/>{</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*tmp_type,<sp/>*tmp_value,<sp/>*tmp_tb;</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_type<sp/>=<sp/>tstate-&gt;curexc_type;</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_value<sp/>=<sp/>tstate-&gt;curexc_value;</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_tb<sp/>=<sp/>tstate-&gt;curexc_traceback;</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/>tstate-&gt;curexc_type<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/>tstate-&gt;curexc_value<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/>tstate-&gt;curexc_traceback<sp/>=<sp/>tb;</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(tmp_type);</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(tmp_value);</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(tmp_tb);</highlight></codeline>
<codeline lineno="3444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_ErrFetchInState(PyThreadState<sp/>*tstate,<sp/>PyObject<sp/>**type,<sp/>PyObject<sp/>**value,<sp/>PyObject<sp/>**tb)<sp/>{</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/>*type<sp/>=<sp/>tstate-&gt;curexc_type;</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/>*value<sp/>=<sp/>tstate-&gt;curexc_value;</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/>*tb<sp/>=<sp/>tstate-&gt;curexc_traceback;</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/>tstate-&gt;curexc_type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/>tstate-&gt;curexc_value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/>tstate-&gt;curexc_traceback<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3454"><highlight class="normal"></highlight></codeline>
<codeline lineno="3455"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Profile<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3456"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_PROFILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3457"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_TraceSetupAndCall(PyCodeObject**<sp/>code,</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyFrameObject**<sp/>frame,</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyThreadState*<sp/>tstate,</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*funcname,</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*srcfile,</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>firstlineno)<sp/>{</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*type,<sp/>*value,<sp/>*traceback;</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*frame<sp/>==<sp/>NULL<sp/>||<sp/>!CYTHON_PROFILE_REUSE_FRAME)<sp/>{</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*code<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*code<sp/>=<sp/>__Pyx_createFrameCodeObject(funcname,<sp/>srcfile,<sp/>firstlineno);</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*code<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*frame<sp/>=<sp/>PyFrame_New(</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstate,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*PyThreadState<sp/>*tstate*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*code,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*PyCodeObject<sp/>*code*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_d,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*PyObject<sp/>*globals*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*PyObject<sp/>*locals*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*frame<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CYTHON_TRACE<sp/>&amp;&amp;<sp/>(*frame)-&gt;f_trace<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(Py_None);</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*frame)-&gt;f_trace<sp/>=<sp/>Py_None;</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x030400B1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*frame)-&gt;f_tstate<sp/>=<sp/>tstate;</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_PyFrame_SetLineNumber(*frame,<sp/>firstlineno);</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_EnterTracing(tstate);</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_ErrFetchInState(tstate,<sp/>&amp;type,<sp/>&amp;value,<sp/>&amp;traceback);</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>CYTHON_TRACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tstate-&gt;c_tracefunc)</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>tstate-&gt;c_tracefunc(tstate-&gt;c_traceobj,<sp/>*frame,<sp/>PyTrace_CALL,<sp/>NULL)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retval<sp/>&amp;&amp;<sp/>tstate-&gt;c_profilefunc)</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>tstate-&gt;c_profilefunc(tstate-&gt;c_profileobj,<sp/>*frame,<sp/>PyTrace_CALL,<sp/>NULL)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_LeaveTracing(tstate);</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retval)<sp/>{</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_ErrRestoreInState(tstate,<sp/>type,<sp/>value,<sp/>traceback);</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_IsTracing(tstate,<sp/>0,<sp/>0)<sp/>&amp;&amp;<sp/>retval;</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(type);</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(value);</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(traceback);</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyCodeObject<sp/>*__Pyx_createFrameCodeObject(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*funcname,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*srcfile,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>firstlineno)<sp/>{</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/>PyCodeObject<sp/>*py_code<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/>py_code<sp/>=<sp/>PyCode_NewEmpty(srcfile,<sp/>funcname,<sp/>firstlineno);</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(py_code))<sp/>{</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_code-&gt;co_flags<sp/>|=<sp/>CO_OPTIMIZED<sp/>|<sp/>CO_NEWLOCALS;</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*py_srcfile<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*py_funcname<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/>py_funcname<sp/>=<sp/>PyString_FromString(funcname);</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!py_funcname))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/>py_srcfile<sp/>=<sp/>PyString_FromString(srcfile);</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!py_srcfile))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/>py_code<sp/>=<sp/>PyCode_New(</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CO_OPTIMIZED<sp/>|<sp/>CO_NEWLOCALS,</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_empty_bytes,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*PyObject<sp/>*code,*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_empty_tuple,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*PyObject<sp/>*consts,*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_empty_tuple,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*PyObject<sp/>*names,*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_empty_tuple,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*PyObject<sp/>*varnames,*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_empty_tuple,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*PyObject<sp/>*freevars,*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_empty_tuple,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*PyObject<sp/>*cellvars,*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_srcfile,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*PyObject<sp/>*filename,*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_funcname,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*PyObject<sp/>*name,*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstlineno,</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_empty_bytes<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*PyObject<sp/>*lnotab*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="3537"><highlight class="normal">bad:</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(py_srcfile);</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(py_funcname);</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>py_code;</highlight></codeline>
<codeline lineno="3542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3544"><highlight class="normal"></highlight></codeline>
<codeline lineno="3545"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyDictVersioning<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3546"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_USE_DICT_VERSIONS<sp/>&amp;&amp;<sp/>CYTHON_USE_TYPE_SLOTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3547"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PY_UINT64_T<sp/>__Pyx_get_tp_dict_version(PyObject<sp/>*obj)<sp/>{</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*dict<sp/>=<sp/>Py_TYPE(obj)-&gt;tp_dict;</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>likely(dict)<sp/>?<sp/>__PYX_GET_DICT_VERSION(dict)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="3550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PY_UINT64_T<sp/>__Pyx_get_object_dict_version(PyObject<sp/>*obj)<sp/>{</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>**dictptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>offset<sp/>=<sp/>Py_TYPE(obj)-&gt;tp_dictoffset;</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset)<sp/>{</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_CPYTHON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dictptr<sp/>=<sp/>(likely(offset<sp/>&gt;<sp/>0))<sp/>?<sp/>(PyObject<sp/>**)<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)obj<sp/>+<sp/>offset)<sp/>:<sp/>_PyObject_GetDictPtr(obj);</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dictptr<sp/>=<sp/>_PyObject_GetDictPtr(obj);</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(dictptr<sp/>&amp;&amp;<sp/>*dictptr)<sp/>?<sp/>__PYX_GET_DICT_VERSION(*dictptr)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="3562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_object_dict_version_matches(PyObject*<sp/>obj,<sp/>PY_UINT64_T<sp/>tp_dict_version,<sp/>PY_UINT64_T<sp/>obj_dict_version)<sp/>{</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*dict<sp/>=<sp/>Py_TYPE(obj)-&gt;tp_dict;</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!dict)<sp/>||<sp/>unlikely(tp_dict_version<sp/>!=<sp/>__PYX_GET_DICT_VERSION(dict)))</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj_dict_version<sp/>==<sp/>__Pyx_get_object_dict_version(obj);</highlight></codeline>
<codeline lineno="3568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3570"><highlight class="normal"></highlight></codeline>
<codeline lineno="3571"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>GetModuleGlobalName<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3572"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_USE_DICT_VERSIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3573"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__Pyx__GetModuleGlobalName(PyObject<sp/>*name,<sp/>PY_UINT64_T<sp/>*dict_version,<sp/>PyObject<sp/>**dict_cached_value)</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3575"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyObject<sp/>*__Pyx__GetModuleGlobalName(PyObject<sp/>*name)</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3577"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*result;</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!CYTHON_AVOID_BORROWED_REFS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3580"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_CPYTHON<sp/>&amp;&amp;<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x030500A1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>_PyDict_GetItem_KnownHash(__pyx_d,<sp/>name,<sp/>((PyASCIIObject<sp/>*)<sp/>name)-&gt;hash);</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/>__PYX_UPDATE_DICT_CACHE(__pyx_d,<sp/>result,<sp/>*dict_cached_value,<sp/>*dict_version)</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(result))<sp/>{</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_NewRef(result);</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(PyErr_Occurred()))<sp/>{</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>PyDict_GetItem(__pyx_d,<sp/>name);</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/>__PYX_UPDATE_DICT_CACHE(__pyx_d,<sp/>result,<sp/>*dict_cached_value,<sp/>*dict_version)</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(result))<sp/>{</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_NewRef(result);</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3595"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>PyObject_GetItem(__pyx_d,<sp/>name);</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/>__PYX_UPDATE_DICT_CACHE(__pyx_d,<sp/>result,<sp/>*dict_cached_value,<sp/>*dict_version)</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(result))<sp/>{</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_NewRef(result);</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_Clear();</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_GetBuiltinName(name);</highlight></codeline>
<codeline lineno="3604"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"></highlight></codeline>
<codeline lineno="3606"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyCFunctionFastCall<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3607"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_FAST_PYCCALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3608"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyObject<sp/>*<sp/>__Pyx_PyCFunction_FastCall(PyObject<sp/>*func_obj,<sp/>PyObject<sp/>**args,<sp/>Py_ssize_t<sp/>nargs)<sp/>{</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/>PyCFunctionObject<sp/>*func<sp/>=<sp/>(PyCFunctionObject*)func_obj;</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/>PyCFunction<sp/>meth<sp/>=<sp/>PyCFunction_GET_FUNCTION(func);</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/>PyCFunction_GET_SELF(func);</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags<sp/>=<sp/>PyCFunction_GET_FLAGS(func);</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(PyCFunction_Check(func));</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(METH_FASTCALL<sp/>==<sp/>(flags<sp/>&amp;<sp/>~(METH_CLASS<sp/>|<sp/>METH_STATIC<sp/>|<sp/>METH_COEXIST<sp/>|<sp/>METH_KEYWORDS<sp/>|<sp/>METH_STACKLESS)));</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(nargs<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(nargs<sp/>==<sp/>0<sp/>||<sp/>args<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>_PyCFunction_FastCallDict()<sp/>must<sp/>not<sp/>be<sp/>called<sp/>with<sp/>an<sp/>exception<sp/>set,</highlight></codeline>
<codeline lineno="3618"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>because<sp/>it<sp/>may<sp/>clear<sp/>it<sp/>(directly<sp/>or<sp/>indirectly)<sp/>and<sp/>so<sp/>the</highlight></codeline>
<codeline lineno="3619"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caller<sp/>loses<sp/>its<sp/>exception<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!PyErr_Occurred());</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((PY_VERSION_HEX<sp/>&lt;<sp/>0x030700A0)<sp/>||<sp/>unlikely(flags<sp/>&amp;<sp/>METH_KEYWORDS))<sp/>{</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*((__Pyx_PyCFunctionFastWithKeywords)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)meth))<sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>args,<sp/>nargs,<sp/>NULL);</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*((__Pyx_PyCFunctionFast)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)meth))<sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>args,<sp/>nargs);</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3628"><highlight class="normal"></highlight></codeline>
<codeline lineno="3629"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyFunctionFastCall<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3630"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_FAST_PYCALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3631"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>__Pyx_PyFunction_FastCallNoKw(PyCodeObject<sp/>*co,<sp/>PyObject<sp/>**args,<sp/>Py_ssize_t<sp/>na,</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*globals)<sp/>{</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/>PyFrameObject<sp/>*f;</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/>PyThreadState<sp/>*tstate<sp/>=<sp/>__Pyx_PyThreadState_Current;</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>**fastlocals;</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>i;</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*result;</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(globals<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>XXX<sp/>Perhaps<sp/>we<sp/>should<sp/>create<sp/>a<sp/>specialized</highlight></codeline>
<codeline lineno="3640"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyFrame_New()<sp/>that<sp/>doesn&apos;t<sp/>take<sp/>locals,<sp/>but<sp/>does</highlight></codeline>
<codeline lineno="3641"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>take<sp/>builtins<sp/>without<sp/>sanity<sp/>checking<sp/>them.</highlight></codeline>
<codeline lineno="3642"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(tstate<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>PyFrame_New(tstate,<sp/>co,<sp/>globals,<sp/>NULL);</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/>fastlocals<sp/>=<sp/>__Pyx_PyFrame_GetLocalsplus(f);</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>na;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(*args);</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fastlocals[i]<sp/>=<sp/>*args++;</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>PyEval_EvalFrameEx(f,0);</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/>++tstate-&gt;recursion_depth;</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_DECREF(f);</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/>--tstate-&gt;recursion_depth;</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>1<sp/>||<sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x030600B1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3660"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__Pyx_PyFunction_FastCallDict(PyObject<sp/>*func,<sp/>PyObject<sp/>**args,<sp/>Py_ssize_t<sp/>nargs,<sp/>PyObject<sp/>*kwargs)<sp/>{</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/>PyCodeObject<sp/>*co<sp/>=<sp/>(PyCodeObject<sp/>*)PyFunction_GET_CODE(func);</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*globals<sp/>=<sp/>PyFunction_GET_GLOBALS(func);</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*argdefs<sp/>=<sp/>PyFunction_GET_DEFAULTS(func);</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*closure;</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*kwdefs;</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*kwtuple,<sp/>**k;</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>**d;</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>nd;</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>nk;</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*result;</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(kwargs<sp/>==<sp/>NULL<sp/>||<sp/>PyDict_Check(kwargs));</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/>nk<sp/>=<sp/>kwargs<sp/>?<sp/>PyDict_Size(kwargs)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Py_EnterRecursiveCall((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;<sp/>while<sp/>calling<sp/>a<sp/>Python<sp/>object&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="3679"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co-&gt;co_kwonlyargcount<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3681"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>likely(kwargs<sp/>==<sp/>NULL<sp/>||<sp/>nk<sp/>==<sp/>0)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>co-&gt;co_flags<sp/>==<sp/>(CO_OPTIMIZED<sp/>|<sp/>CO_NEWLOCALS<sp/>|<sp/>CO_NOFREE))<sp/>{</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argdefs<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>co-&gt;co_argcount<sp/>==<sp/>nargs)<sp/>{</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>__Pyx_PyFunction_FastCallNoKw(co,<sp/>args,<sp/>nargs,<sp/>globals);</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nargs<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>argdefs<sp/>!=<sp/>NULL</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>co-&gt;co_argcount<sp/>==<sp/>Py_SIZE(argdefs))<sp/>{</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>function<sp/>called<sp/>with<sp/>no<sp/>arguments,<sp/>but<sp/>all<sp/>parameters<sp/>have</highlight></codeline>
<codeline lineno="3691"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>default<sp/>value:<sp/>use<sp/>default<sp/>values<sp/>as<sp/>arguments<sp/>.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args<sp/>=<sp/>&amp;PyTuple_GET_ITEM(argdefs,<sp/>0);</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=__Pyx_PyFunction_FastCallNoKw(co,<sp/>args,<sp/>Py_SIZE(argdefs),<sp/>globals);</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kwargs<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>pos,<sp/>i;</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kwtuple<sp/>=<sp/>PyTuple_New(2<sp/>*<sp/>nk);</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kwtuple<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>&amp;PyTuple_GET_ITEM(kwtuple,<sp/>0);</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(PyDict_Next(kwargs,<sp/>&amp;pos,<sp/>&amp;k[i],<sp/>&amp;k[i+1]))<sp/>{</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(k[i]);</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(k[i+1]);</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nk<sp/>=<sp/>i<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kwtuple<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/>closure<sp/>=<sp/>PyFunction_GET_CLOSURE(func);</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/>kwdefs<sp/>=<sp/>PyFunction_GET_KW_DEFAULTS(func);</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argdefs<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>&amp;PyTuple_GET_ITEM(argdefs,<sp/>0);</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd<sp/>=<sp/>Py_SIZE(argdefs);</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>PyEval_EvalCodeEx((PyObject*)co,<sp/>globals,<sp/>(PyObject<sp/>*)NULL,</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)nargs,</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)nk,</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)nd,<sp/>kwdefs,<sp/>closure);</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>PyEval_EvalCodeEx(co,<sp/>globals,<sp/>(PyObject<sp/>*)NULL,</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)nargs,</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)nk,</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)nd,<sp/>closure);</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(kwtuple);</highlight></codeline>
<codeline lineno="3741"><highlight class="normal">done:</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_LeaveRecursiveCall();</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3746"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3747"><highlight class="normal"></highlight></codeline>
<codeline lineno="3748"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyObjectCall<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3749"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_CPYTHON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3750"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyObject*<sp/>__Pyx_PyObject_Call(PyObject<sp/>*func,<sp/>PyObject<sp/>*arg,<sp/>PyObject<sp/>*kw)<sp/>{</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*result;</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/><sp/><sp/>ternaryfunc<sp/>call<sp/>=<sp/>Py_TYPE(func)-&gt;tp_call;</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!call))</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyObject_Call(func,<sp/>arg,<sp/>kw);</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(Py_EnterRecursiveCall((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;<sp/>while<sp/>calling<sp/>a<sp/>Python<sp/>object&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(*call)(func,<sp/>arg,<sp/>kw);</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_LeaveRecursiveCall();</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!result)<sp/>&amp;&amp;<sp/>unlikely(!PyErr_Occurred()))<sp/>{</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyExc_SystemError,</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;NULL<sp/>result<sp/>without<sp/>error<sp/>in<sp/>PyObject_Call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3767"><highlight class="normal"></highlight></codeline>
<codeline lineno="3768"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyObjectCall2Args<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3769"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_UNUSED<sp/>PyObject*<sp/>__Pyx_PyObject_Call2Args(PyObject*<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>PyObject*<sp/>arg1,<sp/>PyObject*<sp/>arg2)<sp/>{</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*args,<sp/>*result<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>CYTHON_FAST_PYCALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyFunction_Check(</highlight><highlight class="keyword">function</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*args[2]<sp/>=<sp/>{arg1,<sp/>arg2};</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_PyFunction_FastCall(</highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>args,<sp/>2);</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3777"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>CYTHON_FAST_PYCCALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__Pyx_PyFastCFunction_Check(</highlight><highlight class="keyword">function</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*args[2]<sp/>=<sp/>{arg1,<sp/>arg2};</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_PyCFunction_FastCall(</highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>args,<sp/>2);</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><sp/><sp/>args<sp/>=<sp/>PyTuple_New(2);</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!args))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(arg1);</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/>PyTuple_SET_ITEM(args,<sp/>0,<sp/>arg1);</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(arg2);</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/>PyTuple_SET_ITEM(args,<sp/>1,<sp/>arg2);</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(</highlight><highlight class="keyword">function</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>__Pyx_PyObject_Call(</highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>args,<sp/>NULL);</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_DECREF(args);</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_DECREF(</highlight><highlight class="keyword">function</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3793"><highlight class="normal">done:</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"></highlight></codeline>
<codeline lineno="3797"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyObjectCallMethO<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3798"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_CPYTHON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3799"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyObject*<sp/>__Pyx_PyObject_CallMethO(PyObject<sp/>*func,<sp/>PyObject<sp/>*arg)<sp/>{</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>*result;</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/><sp/><sp/>PyCFunction<sp/>cfunc;</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/><sp/>cfunc<sp/>=<sp/>PyCFunction_GET_FUNCTION(func);</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/>PyCFunction_GET_SELF(func);</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(Py_EnterRecursiveCall((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight><highlight class="stringliteral">&quot;<sp/>while<sp/>calling<sp/>a<sp/>Python<sp/>object&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>cfunc(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>arg);</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_LeaveRecursiveCall();</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!result)<sp/>&amp;&amp;<sp/>unlikely(!PyErr_Occurred()))<sp/>{</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyExc_SystemError,</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;NULL<sp/>result<sp/>without<sp/>error<sp/>in<sp/>PyObject_Call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3814"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3816"><highlight class="normal"></highlight></codeline>
<codeline lineno="3817"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyObjectCallOneArg<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3818"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_CPYTHON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3819"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>__Pyx__PyObject_CallOneArg(PyObject<sp/>*func,<sp/>PyObject<sp/>*arg)<sp/>{</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*result;</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*args<sp/>=<sp/>PyTuple_New(1);</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!args))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(arg);</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/><sp/><sp/>PyTuple_SET_ITEM(args,<sp/>0,<sp/>arg);</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>__Pyx_PyObject_Call(func,<sp/>args,<sp/>NULL);</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_DECREF(args);</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3828"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyObject*<sp/>__Pyx_PyObject_CallOneArg(PyObject<sp/>*func,<sp/>PyObject<sp/>*arg)<sp/>{</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_FAST_PYCALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyFunction_Check(func))<sp/>{</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_PyFunction_FastCall(func,<sp/>&amp;arg,<sp/>1);</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(PyCFunction_Check(func)))<sp/>{</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(PyCFunction_GET_FLAGS(func)<sp/>&amp;<sp/>METH_O))<sp/>{</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_PyObject_CallMethO(func,<sp/>arg);</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_FAST_PYCCALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__Pyx_PyFastCFunction_Check(func))<sp/>{</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_PyCFunction_FastCall(func,<sp/>&amp;arg,<sp/>1);</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx__PyObject_CallOneArg(func,<sp/>arg);</highlight></codeline>
<codeline lineno="3845"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3847"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyObject*<sp/>__Pyx_PyObject_CallOneArg(PyObject<sp/>*func,<sp/>PyObject<sp/>*arg)<sp/>{</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*result;</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*args<sp/>=<sp/>PyTuple_Pack(1,<sp/>arg);</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!args))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>__Pyx_PyObject_Call(func,<sp/>args,<sp/>NULL);</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_DECREF(args);</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3856"><highlight class="normal"></highlight></codeline>
<codeline lineno="3857"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PyObjectCallNoArg<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3858"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_CPYTHON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3859"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyObject*<sp/>__Pyx_PyObject_CallNoArg(PyObject<sp/>*func)<sp/>{</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_FAST_PYCALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyFunction_Check(func))<sp/>{</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_PyFunction_FastCall(func,<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3865"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__Pyx_CyFunction_USED)<sp/>&amp;&amp;<sp/>defined(NDEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(PyCFunction_Check(func)<sp/>||<sp/>__Pyx_CyFunction_Check(func)))</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(PyCFunction_Check(func)))</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(PyCFunction_GET_FLAGS(func)<sp/>&amp;<sp/>METH_NOARGS))<sp/>{</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_PyObject_CallMethO(func,<sp/>NULL);</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_PyObject_Call(func,<sp/>__pyx_empty_tuple,<sp/>NULL);</highlight></codeline>
<codeline lineno="3876"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3878"><highlight class="normal"></highlight></codeline>
<codeline lineno="3879"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>RaiseTooManyValuesToUnpack<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3880"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_RaiseTooManyValuesError(Py_ssize_t<sp/>expected)<sp/>{</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_ValueError,</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;too<sp/>many<sp/>values<sp/>to<sp/>unpack<sp/>(expected<sp/>%&quot;</highlight><highlight class="normal"><sp/>CYTHON_FORMAT_SSIZE_T<sp/></highlight><highlight class="stringliteral">&quot;d)&quot;</highlight><highlight class="normal">,<sp/>expected);</highlight></codeline>
<codeline lineno="3883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"></highlight></codeline>
<codeline lineno="3885"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>RaiseNeedMoreValuesToUnpack<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3886"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_RaiseNeedMoreValuesError(Py_ssize_t<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_ValueError,</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;need<sp/>more<sp/>than<sp/>%&quot;</highlight><highlight class="normal"><sp/>CYTHON_FORMAT_SSIZE_T<sp/></highlight><highlight class="stringliteral">&quot;d<sp/>value%.1s<sp/>to<sp/>unpack&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,<sp/>(index<sp/>==<sp/>1)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3890"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"></highlight></codeline>
<codeline lineno="3892"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>IterFinish<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3893"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_IterFinish(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_FAST_THREAD_STATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/><sp/><sp/>PyThreadState<sp/>*tstate<sp/>=<sp/>__Pyx_PyThreadState_Current;</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>exc_type<sp/>=<sp/>tstate-&gt;curexc_type;</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(exc_type))<sp/>{</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(__Pyx_PyErr_GivenExceptionMatches(exc_type,<sp/>PyExc_StopIteration)))<sp/>{</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*exc_value,<sp/>*exc_tb;</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exc_value<sp/>=<sp/>tstate-&gt;curexc_value;</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exc_tb<sp/>=<sp/>tstate-&gt;curexc_traceback;</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstate-&gt;curexc_type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstate-&gt;curexc_value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstate-&gt;curexc_traceback<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(exc_type);</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(exc_value);</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(exc_tb);</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(PyErr_Occurred()))<sp/>{</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(PyErr_ExceptionMatches(PyExc_StopIteration)))<sp/>{</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Clear();</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3925"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"></highlight></codeline>
<codeline lineno="3927"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>UnpackItemEndCheck<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3928"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_IternextUnpackEndCheck(PyObject<sp/>*retval,<sp/>Py_ssize_t<sp/>expected)<sp/>{</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(retval))<sp/>{</highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(retval);</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_RaiseTooManyValuesError(expected);</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_IterFinish();</highlight></codeline>
<codeline lineno="3935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"></highlight></codeline>
<codeline lineno="3937"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>RaiseException<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3938"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3939"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_Raise(PyObject<sp/>*type,<sp/>PyObject<sp/>*value,<sp/>PyObject<sp/>*tb,</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CYTHON_UNUSED<sp/>PyObject<sp/>*cause)<sp/>{</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_PyThreadState_declare</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XINCREF(type);</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!value<sp/>||<sp/>value<sp/>==<sp/>Py_None)</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(value);</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tb<sp/>||<sp/>tb<sp/>==<sp/>Py_None)</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tb<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(tb);</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyTraceBack_Check(tb))<sp/>{</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_TypeError,</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;raise:<sp/>arg<sp/>3<sp/>must<sp/>be<sp/>a<sp/>traceback<sp/>or<sp/>None&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>raise_error;</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyType_Check(type))<sp/>{</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_PYPY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!value)<sp/>{</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(Py_None);</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>Py_None;</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_NormalizeException(&amp;type,<sp/>&amp;value,<sp/>&amp;tb);</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_TypeError,</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;instance<sp/>exception<sp/>may<sp/>not<sp/>have<sp/>a<sp/>separate<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>raise_error;</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>=<sp/>(PyObject*)<sp/>Py_TYPE(type);</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(type);</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyType_IsSubtype((PyTypeObject<sp/>*)type,<sp/>(PyTypeObject<sp/>*)PyExc_BaseException))<sp/>{</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_TypeError,</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;raise:<sp/>exception<sp/>class<sp/>must<sp/>be<sp/>a<sp/>subclass<sp/>of<sp/>BaseException&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>raise_error;</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_PyThreadState_assign</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_ErrRestore(type,<sp/>value,<sp/>tb);</highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3983"><highlight class="normal">raise_error:</highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(value);</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(type);</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(tb);</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3988"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3990"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_Raise(PyObject<sp/>*type,<sp/>PyObject<sp/>*value,<sp/>PyObject<sp/>*tb,<sp/>PyObject<sp/>*cause)<sp/>{</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>owned_instance<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tb<sp/>==<sp/>Py_None)<sp/>{</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tb<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tb<sp/>&amp;&amp;<sp/>!PyTraceBack_Check(tb))<sp/>{</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_TypeError,</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;raise:<sp/>arg<sp/>3<sp/>must<sp/>be<sp/>a<sp/>traceback<sp/>or<sp/>None&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>==<sp/>Py_None)</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyExceptionInstance_Check(type))<sp/>{</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_TypeError,</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;instance<sp/>exception<sp/>may<sp/>not<sp/>have<sp/>a<sp/>separate<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>=<sp/>(PyObject*)<sp/>Py_TYPE(value);</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyExceptionClass_Check(type))<sp/>{</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*instance_class<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>&amp;&amp;<sp/>PyExceptionInstance_Check(value))<sp/>{</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance_class<sp/>=<sp/>(PyObject*)<sp/>Py_TYPE(value);</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(instance_class<sp/>!=<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_subclass<sp/>=<sp/>PyObject_IsSubclass(instance_class,<sp/>type);</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_subclass)<sp/>{</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance_class<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(is_subclass<sp/>==<sp/>-1))<sp/>{</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>=<sp/>instance_class;</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!instance_class)<sp/>{</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*args;</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!value)</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args<sp/>=<sp/>PyTuple_New(0);</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyTuple_Check(value))<sp/>{</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(value);</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args<sp/>=<sp/>PyTuple_Pack(1,<sp/>value);</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!args)</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>owned_instance<sp/>=<sp/>PyObject_Call(type,<sp/>args,<sp/>NULL);</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(args);</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!owned_instance)</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>owned_instance;</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyExceptionInstance_Check(value))<sp/>{</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_TypeError,</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;calling<sp/>%R<sp/>should<sp/>have<sp/>returned<sp/>an<sp/>instance<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;BaseException,<sp/>not<sp/>%R&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type,<sp/>Py_TYPE(value));</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_TypeError,</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;raise:<sp/>exception<sp/>class<sp/>must<sp/>be<sp/>a<sp/>subclass<sp/>of<sp/>BaseException&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cause)<sp/>{</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*fixed_cause;</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cause<sp/>==<sp/>Py_None)<sp/>{</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fixed_cause<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyExceptionClass_Check(cause))<sp/>{</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fixed_cause<sp/>=<sp/>PyObject_CallObject(cause,<sp/>NULL);</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fixed_cause<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyExceptionInstance_Check(cause))<sp/>{</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fixed_cause<sp/>=<sp/>cause;</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(fixed_cause);</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_TypeError,</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exception<sp/>causes<sp/>must<sp/>derive<sp/>from<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;BaseException&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyException_SetCause(value,<sp/>fixed_cause);</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_SetObject(type,<sp/>value);</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tb)<sp/>{</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_FAST_THREAD_STATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyThreadState<sp/>*tstate<sp/>=<sp/>__Pyx_PyThreadState_Current;</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject*<sp/>tmp_tb<sp/>=<sp/>tstate-&gt;curexc_traceback;</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tb<sp/>!=<sp/>tmp_tb)<sp/>{</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(tb);</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstate-&gt;curexc_traceback<sp/>=<sp/>tb;</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(tmp_tb);</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*tmp_type,<sp/>*tmp_value,<sp/>*tmp_tb;</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Fetch(&amp;tmp_type,<sp/>&amp;tmp_value,<sp/>&amp;tmp_tb);</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(tb);</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Restore(tmp_type,<sp/>tmp_value,<sp/>tb);</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(tmp_tb);</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4090"><highlight class="normal">bad:</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(owned_instance);</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4093"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4095"><highlight class="normal"></highlight></codeline>
<codeline lineno="4096"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>TypeImport<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4097"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__PYX_HAVE_RT_ImportType_0_29_36</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4098"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PYX_HAVE_RT_ImportType_0_29_36</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4099"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyTypeObject<sp/>*__Pyx_ImportType_0_29_36(PyObject<sp/>*module,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*module_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*class_name,</highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alignment,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>__Pyx_ImportType_CheckSize_0_29_36<sp/>check_size)</highlight></codeline>
<codeline lineno="4101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>warning[200];</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>basicsize;</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>itemsize;</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*py_basicsize;</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*py_itemsize;</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>PyObject_GetAttrString(module,<sp/>class_name);</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyType_Check(result))<sp/>{</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_TypeError,</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%.200s.%.200s<sp/>is<sp/>not<sp/>a<sp/>type<sp/>object&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>module_name,<sp/>class_name);</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>Py_LIMITED_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/><sp/><sp/>basicsize<sp/>=<sp/>((PyTypeObject<sp/>*)result)-&gt;tp_basicsize;</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/>itemsize<sp/>=<sp/>((PyTypeObject<sp/>*)result)-&gt;tp_itemsize;</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/>py_basicsize<sp/>=<sp/>PyObject_GetAttrString(result,<sp/></highlight><highlight class="stringliteral">&quot;__basicsize__&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!py_basicsize)</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/>basicsize<sp/>=<sp/>PyLong_AsSsize_t(py_basicsize);</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_DECREF(py_basicsize);</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/>py_basicsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(basicsize<sp/>==<sp/>(Py_ssize_t)-1<sp/>&amp;&amp;<sp/>PyErr_Occurred())</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/>py_itemsize<sp/>=<sp/>PyObject_GetAttrString(result,<sp/></highlight><highlight class="stringliteral">&quot;__itemsize__&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!py_itemsize)</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/>itemsize<sp/>=<sp/>PyLong_AsSsize_t(py_itemsize);</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_DECREF(py_itemsize);</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/><sp/><sp/>py_itemsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itemsize<sp/>==<sp/>(Py_ssize_t)-1<sp/>&amp;&amp;<sp/>PyErr_Occurred())</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itemsize)<sp/>{</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>%<sp/>alignment)<sp/>{</highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alignment<sp/>=<sp/>size<sp/>%<sp/>alignment;</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itemsize<sp/>&lt;<sp/>(Py_ssize_t)alignment)</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itemsize<sp/>=<sp/>(Py_ssize_t)alignment;</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(basicsize<sp/>+<sp/>itemsize)<sp/>&lt;<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_ValueError,</highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%.200s.%.200s<sp/>size<sp/>changed,<sp/>may<sp/>indicate<sp/>binary<sp/>incompatibility.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>%zd<sp/>from<sp/>C<sp/>header,<sp/>got<sp/>%zd<sp/>from<sp/>PyObject&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>module_name,<sp/>class_name,<sp/>size,<sp/>basicsize);</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(check_size<sp/>==<sp/>__Pyx_ImportType_CheckSize_Error_0_29_36<sp/>&amp;&amp;<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)basicsize<sp/>!=<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_ValueError,</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%.200s.%.200s<sp/>size<sp/>changed,<sp/>may<sp/>indicate<sp/>binary<sp/>incompatibility.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>%zd<sp/>from<sp/>C<sp/>header,<sp/>got<sp/>%zd<sp/>from<sp/>PyObject&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>module_name,<sp/>class_name,<sp/>size,<sp/>basicsize);</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(check_size<sp/>==<sp/>__Pyx_ImportType_CheckSize_Warn_0_29_36<sp/>&amp;&amp;<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)basicsize<sp/>&gt;<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyOS_snprintf(warning,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(warning),</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s.%s<sp/>size<sp/>changed,<sp/>may<sp/>indicate<sp/>binary<sp/>incompatibility.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>%zd<sp/>from<sp/>C<sp/>header,<sp/>got<sp/>%zd<sp/>from<sp/>PyObject&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>module_name,<sp/>class_name,<sp/>size,<sp/>basicsize);</highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyErr_WarnEx(NULL,<sp/>warning,<sp/>0)<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(PyTypeObject<sp/>*)result;</highlight></codeline>
<codeline lineno="4169"><highlight class="normal">bad:</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(result);</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4174"><highlight class="normal"></highlight></codeline>
<codeline lineno="4175"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>GetVTable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4176"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>__Pyx_GetVtable(PyObject<sp/>*dict)<sp/>{</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr;</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*ob<sp/>=<sp/>PyObject_GetItem(dict,<sp/>__pyx_n_s_pyx_vtable);</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ob)</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x02070000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>PyCapsule_GetPointer(ob,<sp/>0);</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>PyCObject_AsVoidPtr(ob);</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ptr<sp/>&amp;&amp;<sp/>!PyErr_Occurred())</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_RuntimeError,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>vtable<sp/>found<sp/>for<sp/>imported<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_DECREF(ob);</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="4190"><highlight class="normal">bad:</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(ob);</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"></highlight></codeline>
<codeline lineno="4195"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Import<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4196"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__Pyx_Import(PyObject<sp/>*name,<sp/>PyObject<sp/>*from_list,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level)<sp/>{</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*empty_list<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*module<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*global_dict<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*empty_dict<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*list;</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*py_import;</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/>py_import<sp/>=<sp/>__Pyx_PyObject_GetAttrStr(__pyx_b,<sp/>__pyx_n_s_import);</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!py_import)</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from_list)</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>=<sp/>from_list;</highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>empty_list<sp/>=<sp/>PyList_New(0);</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!empty_list)</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>=<sp/>empty_list;</highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/><sp/><sp/>global_dict<sp/>=<sp/>PyModule_GetDict(__pyx_m);</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!global_dict)</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/><sp/><sp/>empty_dict<sp/>=<sp/>PyDict_New();</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!empty_dict)</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((1)<sp/>&amp;&amp;<sp/>(strchr(__Pyx_MODULE_NAME,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>module<sp/>=<sp/>PyImport_ImportModuleLevelObject(</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,<sp/>global_dict,<sp/>empty_dict,<sp/>list,<sp/>1);</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!module)<sp/>{</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyErr_ExceptionMatches(PyExc_ImportError))</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Clear();</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>level<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!module)<sp/>{</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*py_level<sp/>=<sp/>PyInt_FromLong(level);</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!py_level)</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>module<sp/>=<sp/>PyObject_CallFunctionObjArgs(py_import,</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,<sp/>global_dict,<sp/>empty_dict,<sp/>list,<sp/>py_level,<sp/>(PyObject<sp/>*)NULL);</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(py_level);</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>module<sp/>=<sp/>PyImport_ImportModuleLevelObject(</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,<sp/>global_dict,<sp/>empty_dict,<sp/>list,<sp/>level);</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4251"><highlight class="normal">bad:</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(py_import);</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(empty_list);</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(empty_dict);</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>module;</highlight></codeline>
<codeline lineno="4258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"></highlight></codeline>
<codeline lineno="4260"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ImportFrom<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4261"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>__Pyx_ImportFrom(PyObject*<sp/>module,<sp/>PyObject*<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>value<sp/>=<sp/>__Pyx_PyObject_GetAttrStr(module,<sp/>name);</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!value)<sp/>&amp;&amp;<sp/>PyErr_ExceptionMatches(PyExc_AttributeError))<sp/>{</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_ImportError,</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>import<sp/>name<sp/>%.230s&quot;</highlight><highlight class="normal">,<sp/>PyString_AS_STRING(name));</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>import<sp/>name<sp/>%S&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="4272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"></highlight></codeline>
<codeline lineno="4274"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>FetchCommonType<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4275"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyTypeObject*<sp/>__Pyx_FetchCommonType(PyTypeObject*<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>fake_module;</highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/><sp/><sp/>PyTypeObject*<sp/>cached_type<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/><sp/><sp/>fake_module<sp/>=<sp/>PyImport_AddModule((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/></highlight><highlight class="stringliteral">&quot;_cython_&quot;</highlight><highlight class="normal"><sp/>CYTHON_ABI);</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fake_module)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(fake_module);</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/><sp/><sp/>cached_type<sp/>=<sp/>(PyTypeObject*)<sp/>PyObject_GetAttrString(fake_module,<sp/>type-&gt;tp_name);</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_type)<sp/>{</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyType_Check((PyObject*)cached_type))<sp/>{</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_TypeError,</highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Shared<sp/>Cython<sp/>type<sp/>%.200s<sp/>is<sp/>not<sp/>a<sp/>type<sp/>object&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type-&gt;tp_name);</highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cached_type-&gt;tp_basicsize<sp/>!=<sp/>type-&gt;tp_basicsize)<sp/>{</highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_TypeError,</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Shared<sp/>Cython<sp/>type<sp/>%.200s<sp/>has<sp/>the<sp/>wrong<sp/>size,<sp/>try<sp/>recompiling&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type-&gt;tp_name);</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyErr_ExceptionMatches(PyExc_AttributeError))<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Clear();</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyType_Ready(type)<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyObject_SetAttrString(fake_module,<sp/>type-&gt;tp_name,<sp/>(PyObject*)<sp/>type)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="4301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(type);</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cached_type<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4304"><highlight class="normal">done:</highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_DECREF(fake_module);</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cached_type;</highlight></codeline>
<codeline lineno="4307"><highlight class="normal">bad:</highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(cached_type);</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/><sp/><sp/>cached_type<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>done;</highlight></codeline>
<codeline lineno="4311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"></highlight></codeline>
<codeline lineno="4313"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CythonFunctionShared<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4314"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;structmember.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4315"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*</highlight></codeline>
<codeline lineno="4316"><highlight class="normal">__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject<sp/>*op,<sp/>CYTHON_UNUSED<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*closure)</highlight></codeline>
<codeline lineno="4317"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(op-&gt;func_doc<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op-&gt;func.m_ml-&gt;ml_doc)<sp/>{</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;func_doc<sp/>=<sp/>PyUnicode_FromString(op-&gt;func.m_ml-&gt;ml_doc);</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;func_doc<sp/>=<sp/>PyString_FromString(op-&gt;func.m_ml-&gt;ml_doc);</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(op-&gt;func_doc<sp/>==<sp/>NULL))</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(Py_None);</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Py_None;</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(op-&gt;func_doc);</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>op-&gt;func_doc;</highlight></codeline>
<codeline lineno="4334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4336"><highlight class="normal">__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject<sp/>*op,<sp/>PyObject<sp/>*value,<sp/>CYTHON_UNUSED<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context)</highlight></codeline>
<codeline lineno="4337"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*tmp<sp/>=<sp/>op-&gt;func_doc;</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>Py_None;</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(value);</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;func_doc<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(tmp);</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*</highlight></codeline>
<codeline lineno="4348"><highlight class="normal">__Pyx_CyFunction_get_name(__pyx_CyFunctionObject<sp/>*op,<sp/>CYTHON_UNUSED<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context)</highlight></codeline>
<codeline lineno="4349"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(op-&gt;func_name<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="4351"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;func_name<sp/>=<sp/>PyUnicode_InternFromString(op-&gt;func.m_ml-&gt;ml_name);</highlight></codeline>
<codeline lineno="4353"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;func_name<sp/>=<sp/>PyString_InternFromString(op-&gt;func.m_ml-&gt;ml_name);</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(op-&gt;func_name<sp/>==<sp/>NULL))</highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(op-&gt;func_name);</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>op-&gt;func_name;</highlight></codeline>
<codeline lineno="4361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4363"><highlight class="normal">__Pyx_CyFunction_set_name(__pyx_CyFunctionObject<sp/>*op,<sp/>PyObject<sp/>*value,<sp/>CYTHON_UNUSED<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context)</highlight></codeline>
<codeline lineno="4364"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*tmp;</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(value<sp/>==<sp/>NULL<sp/>||<sp/>!PyUnicode_Check(value)))</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(value<sp/>==<sp/>NULL<sp/>||<sp/>!PyString_Check(value)))</highlight></codeline>
<codeline lineno="4370"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4371"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_TypeError,</highlight></codeline>
<codeline lineno="4373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;__name__<sp/>must<sp/>be<sp/>set<sp/>to<sp/>a<sp/>string<sp/>object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4376"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>op-&gt;func_name;</highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(value);</highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;func_name<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(tmp);</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*</highlight></codeline>
<codeline lineno="4383"><highlight class="normal">__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject<sp/>*op,<sp/>CYTHON_UNUSED<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context)</highlight></codeline>
<codeline lineno="4384"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4385"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(op-&gt;func_qualname);</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>op-&gt;func_qualname;</highlight></codeline>
<codeline lineno="4387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4389"><highlight class="normal">__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject<sp/>*op,<sp/>PyObject<sp/>*value,<sp/>CYTHON_UNUSED<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context)</highlight></codeline>
<codeline lineno="4390"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*tmp;</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(value<sp/>==<sp/>NULL<sp/>||<sp/>!PyUnicode_Check(value)))</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(value<sp/>==<sp/>NULL<sp/>||<sp/>!PyString_Check(value)))</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_TypeError,</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;__qualname__<sp/>must<sp/>be<sp/>set<sp/>to<sp/>a<sp/>string<sp/>object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>op-&gt;func_qualname;</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(value);</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;func_qualname<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(tmp);</highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*</highlight></codeline>
<codeline lineno="4409"><highlight class="normal">__Pyx_CyFunction_get_self(__pyx_CyFunctionObject<sp/>*m,<sp/>CYTHON_UNUSED<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*closure)</highlight></codeline>
<codeline lineno="4410"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/>m-&gt;func_closure;</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/>Py_None;</highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*</highlight></codeline>
<codeline lineno="4419"><highlight class="normal">__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject<sp/>*op,<sp/>CYTHON_UNUSED<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context)</highlight></codeline>
<codeline lineno="4420"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(op-&gt;func_dict<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;func_dict<sp/>=<sp/>PyDict_New();</highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(op-&gt;func_dict<sp/>==<sp/>NULL))</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(op-&gt;func_dict);</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>op-&gt;func_dict;</highlight></codeline>
<codeline lineno="4428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4429"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4430"><highlight class="normal">__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject<sp/>*op,<sp/>PyObject<sp/>*value,<sp/>CYTHON_UNUSED<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context)</highlight></codeline>
<codeline lineno="4431"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*tmp;</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(value<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_TypeError,</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;function&apos;s<sp/>dictionary<sp/>may<sp/>not<sp/>be<sp/>deleted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!PyDict_Check(value)))<sp/>{</highlight></codeline>
<codeline lineno="4439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_TypeError,</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;setting<sp/>function&apos;s<sp/>dictionary<sp/>to<sp/>a<sp/>non-dict&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>op-&gt;func_dict;</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(value);</highlight></codeline>
<codeline lineno="4445"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;func_dict<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(tmp);</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*</highlight></codeline>
<codeline lineno="4450"><highlight class="normal">__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject<sp/>*op,<sp/>CYTHON_UNUSED<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context)</highlight></codeline>
<codeline lineno="4451"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4452"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(op-&gt;func_globals);</highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>op-&gt;func_globals;</highlight></codeline>
<codeline lineno="4454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*</highlight></codeline>
<codeline lineno="4456"><highlight class="normal">__Pyx_CyFunction_get_closure(CYTHON_UNUSED<sp/>__pyx_CyFunctionObject<sp/>*op,<sp/>CYTHON_UNUSED<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context)</highlight></codeline>
<codeline lineno="4457"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(Py_None);</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Py_None;</highlight></codeline>
<codeline lineno="4460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*</highlight></codeline>
<codeline lineno="4462"><highlight class="normal">__Pyx_CyFunction_get_code(__pyx_CyFunctionObject<sp/>*op,<sp/>CYTHON_UNUSED<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context)</highlight></codeline>
<codeline lineno="4463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>result<sp/>=<sp/>(op-&gt;func_code)<sp/>?<sp/>op-&gt;func_code<sp/>:<sp/>Py_None;</highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(result);</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4468"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4469"><highlight class="normal">__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject<sp/>*op)<sp/>{</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4471"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*res<sp/>=<sp/>op-&gt;defaults_getter((PyObject<sp/>*)<sp/>op);</highlight></codeline>
<codeline lineno="4472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!res))</highlight></codeline>
<codeline lineno="4473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4474"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>CYTHON_ASSUME_SAFE_MACROS<sp/>&amp;&amp;<sp/>!CYTHON_AVOID_BORROWED_REFS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;defaults_tuple<sp/>=<sp/>PyTuple_GET_ITEM(res,<sp/>0);</highlight></codeline>
<codeline lineno="4476"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(op-&gt;defaults_tuple);</highlight></codeline>
<codeline lineno="4477"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;defaults_kwdict<sp/>=<sp/>PyTuple_GET_ITEM(res,<sp/>1);</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(op-&gt;defaults_kwdict);</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;defaults_tuple<sp/>=<sp/>PySequence_ITEM(res,<sp/>0);</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!op-&gt;defaults_tuple))<sp/>result<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;defaults_kwdict<sp/>=<sp/>PySequence_ITEM(res,<sp/>1);</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!op-&gt;defaults_kwdict))<sp/>result<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4486"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_DECREF(res);</highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4490"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4491"><highlight class="normal">__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject<sp/>*op,<sp/>PyObject*<sp/>value,<sp/>CYTHON_UNUSED<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context)<sp/>{</highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>tmp;</highlight></codeline>
<codeline lineno="4493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!value)<sp/>{</highlight></codeline>
<codeline lineno="4494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>Py_None;</highlight></codeline>
<codeline lineno="4495"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>!=<sp/>Py_None<sp/>&amp;&amp;<sp/>!PyTuple_Check(value))<sp/>{</highlight></codeline>
<codeline lineno="4496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_TypeError,</highlight></codeline>
<codeline lineno="4497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;__defaults__<sp/>must<sp/>be<sp/>set<sp/>to<sp/>a<sp/>tuple<sp/>object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(value);</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>op-&gt;defaults_tuple;</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;defaults_tuple<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(tmp);</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*</highlight></codeline>
<codeline lineno="4507"><highlight class="normal">__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject<sp/>*op,<sp/>CYTHON_UNUSED<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context)<sp/>{</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>result<sp/>=<sp/>op-&gt;defaults_tuple;</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!result))<sp/>{</highlight></codeline>
<codeline lineno="4510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op-&gt;defaults_getter)<sp/>{</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__Pyx_CyFunction_init_defaults(op)<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>op-&gt;defaults_tuple;</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>Py_None;</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(result);</highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4521"><highlight class="normal">__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject<sp/>*op,<sp/>PyObject*<sp/>value,<sp/>CYTHON_UNUSED<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context)<sp/>{</highlight></codeline>
<codeline lineno="4522"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>tmp;</highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!value)<sp/>{</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>Py_None;</highlight></codeline>
<codeline lineno="4525"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>!=<sp/>Py_None<sp/>&amp;&amp;<sp/>!PyDict_Check(value))<sp/>{</highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_TypeError,</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;__kwdefaults__<sp/>must<sp/>be<sp/>set<sp/>to<sp/>a<sp/>dict<sp/>object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(value);</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>op-&gt;defaults_kwdict;</highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;defaults_kwdict<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(tmp);</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4536"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*</highlight></codeline>
<codeline lineno="4537"><highlight class="normal">__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject<sp/>*op,<sp/>CYTHON_UNUSED<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context)<sp/>{</highlight></codeline>
<codeline lineno="4538"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>result<sp/>=<sp/>op-&gt;defaults_kwdict;</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!result))<sp/>{</highlight></codeline>
<codeline lineno="4540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op-&gt;defaults_getter)<sp/>{</highlight></codeline>
<codeline lineno="4541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__Pyx_CyFunction_init_defaults(op)<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>op-&gt;defaults_kwdict;</highlight></codeline>
<codeline lineno="4543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>Py_None;</highlight></codeline>
<codeline lineno="4545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4546"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(result);</highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4551"><highlight class="normal">__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject<sp/>*op,<sp/>PyObject*<sp/>value,<sp/>CYTHON_UNUSED<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context)<sp/>{</highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>tmp;</highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!value<sp/>||<sp/>value<sp/>==<sp/>Py_None)<sp/>{</highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyDict_Check(value))<sp/>{</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_TypeError,</highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;__annotations__<sp/>must<sp/>be<sp/>set<sp/>to<sp/>a<sp/>dict<sp/>object&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XINCREF(value);</highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>op-&gt;func_annotations;</highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;func_annotations<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(tmp);</highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4565"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4566"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*</highlight></codeline>
<codeline lineno="4567"><highlight class="normal">__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject<sp/>*op,<sp/>CYTHON_UNUSED<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context)<sp/>{</highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>result<sp/>=<sp/>op-&gt;func_annotations;</highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!result))<sp/>{</highlight></codeline>
<codeline lineno="4570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>PyDict_New();</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!result))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;func_annotations<sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(result);</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4577"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyGetSetDef<sp/>__pyx_CyFunction_getsets[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"><sp/><sp/><sp/><sp/>{(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/></highlight><highlight class="stringliteral">&quot;func_doc&quot;</highlight><highlight class="normal">,<sp/>(getter)__Pyx_CyFunction_get_doc,<sp/>(setter)__Pyx_CyFunction_set_doc,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="4579"><highlight class="normal"><sp/><sp/><sp/><sp/>{(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/></highlight><highlight class="stringliteral">&quot;__doc__&quot;</highlight><highlight class="normal">,<sp/><sp/>(getter)__Pyx_CyFunction_get_doc,<sp/>(setter)__Pyx_CyFunction_set_doc,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/><sp/><sp/>{(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/></highlight><highlight class="stringliteral">&quot;func_name&quot;</highlight><highlight class="normal">,<sp/>(getter)__Pyx_CyFunction_get_name,<sp/>(setter)__Pyx_CyFunction_set_name,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/><sp/><sp/>{(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/></highlight><highlight class="stringliteral">&quot;__name__&quot;</highlight><highlight class="normal">,<sp/>(getter)__Pyx_CyFunction_get_name,<sp/>(setter)__Pyx_CyFunction_set_name,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/><sp/><sp/>{(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/></highlight><highlight class="stringliteral">&quot;__qualname__&quot;</highlight><highlight class="normal">,<sp/>(getter)__Pyx_CyFunction_get_qualname,<sp/>(setter)__Pyx_CyFunction_set_qualname,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="4583"><highlight class="normal"><sp/><sp/><sp/><sp/>{(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/></highlight><highlight class="stringliteral">&quot;__self__&quot;</highlight><highlight class="normal">,<sp/>(getter)__Pyx_CyFunction_get_self,<sp/>0,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="4584"><highlight class="normal"><sp/><sp/><sp/><sp/>{(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/></highlight><highlight class="stringliteral">&quot;func_dict&quot;</highlight><highlight class="normal">,<sp/>(getter)__Pyx_CyFunction_get_dict,<sp/>(setter)__Pyx_CyFunction_set_dict,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/><sp/><sp/>{(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/></highlight><highlight class="stringliteral">&quot;__dict__&quot;</highlight><highlight class="normal">,<sp/>(getter)__Pyx_CyFunction_get_dict,<sp/>(setter)__Pyx_CyFunction_set_dict,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"><sp/><sp/><sp/><sp/>{(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/></highlight><highlight class="stringliteral">&quot;func_globals&quot;</highlight><highlight class="normal">,<sp/>(getter)__Pyx_CyFunction_get_globals,<sp/>0,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/><sp/><sp/>{(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/></highlight><highlight class="stringliteral">&quot;__globals__&quot;</highlight><highlight class="normal">,<sp/>(getter)__Pyx_CyFunction_get_globals,<sp/>0,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"><sp/><sp/><sp/><sp/>{(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/></highlight><highlight class="stringliteral">&quot;func_closure&quot;</highlight><highlight class="normal">,<sp/>(getter)__Pyx_CyFunction_get_closure,<sp/>0,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="4589"><highlight class="normal"><sp/><sp/><sp/><sp/>{(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/></highlight><highlight class="stringliteral">&quot;__closure__&quot;</highlight><highlight class="normal">,<sp/>(getter)__Pyx_CyFunction_get_closure,<sp/>0,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"><sp/><sp/><sp/><sp/>{(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/></highlight><highlight class="stringliteral">&quot;func_code&quot;</highlight><highlight class="normal">,<sp/>(getter)__Pyx_CyFunction_get_code,<sp/>0,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/><sp/><sp/>{(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/></highlight><highlight class="stringliteral">&quot;__code__&quot;</highlight><highlight class="normal">,<sp/>(getter)__Pyx_CyFunction_get_code,<sp/>0,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/><sp/><sp/>{(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/></highlight><highlight class="stringliteral">&quot;func_defaults&quot;</highlight><highlight class="normal">,<sp/>(getter)__Pyx_CyFunction_get_defaults,<sp/>(setter)__Pyx_CyFunction_set_defaults,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"><sp/><sp/><sp/><sp/>{(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/></highlight><highlight class="stringliteral">&quot;__defaults__&quot;</highlight><highlight class="normal">,<sp/>(getter)__Pyx_CyFunction_get_defaults,<sp/>(setter)__Pyx_CyFunction_set_defaults,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/><sp/><sp/>{(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/></highlight><highlight class="stringliteral">&quot;__kwdefaults__&quot;</highlight><highlight class="normal">,<sp/>(getter)__Pyx_CyFunction_get_kwdefaults,<sp/>(setter)__Pyx_CyFunction_set_kwdefaults,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/><sp/><sp/>{(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/></highlight><highlight class="stringliteral">&quot;__annotations__&quot;</highlight><highlight class="normal">,<sp/>(getter)__Pyx_CyFunction_get_annotations,<sp/>(setter)__Pyx_CyFunction_set_annotations,<sp/>0,<sp/>0},</highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/><sp/><sp/>{0,<sp/>0,<sp/>0,<sp/>0,<sp/>0}</highlight></codeline>
<codeline lineno="4597"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyMemberDef<sp/>__pyx_CyFunction_members[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/><sp/><sp/>{(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/></highlight><highlight class="stringliteral">&quot;__module__&quot;</highlight><highlight class="normal">,<sp/>T_OBJECT,<sp/>offsetof(PyCFunctionObject,<sp/>m_module),<sp/>PY_WRITE_RESTRICTED,<sp/>0},</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"><sp/><sp/><sp/><sp/>{0,<sp/>0,<sp/>0,<sp/><sp/>0,<sp/>0}</highlight></codeline>
<codeline lineno="4601"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4602"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*</highlight></codeline>
<codeline lineno="4603"><highlight class="normal">__Pyx_CyFunction_reduce(__pyx_CyFunctionObject<sp/>*m,<sp/>CYTHON_UNUSED<sp/>PyObject<sp/>*args)</highlight></codeline>
<codeline lineno="4604"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4605"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(m-&gt;func_qualname);</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m-&gt;func_qualname;</highlight></codeline>
<codeline lineno="4608"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyString_FromString(m-&gt;func.m_ml-&gt;ml_name);</highlight></codeline>
<codeline lineno="4610"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyMethodDef<sp/>__pyx_CyFunction_methods[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;__reduce__&quot;</highlight><highlight class="normal">,<sp/>(PyCFunction)__Pyx_CyFunction_reduce,<sp/>METH_VARARGS,<sp/>0},</highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/><sp/><sp/>{0,<sp/>0,<sp/>0,<sp/>0}</highlight></codeline>
<codeline lineno="4615"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x030500A0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4617"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_CyFunction_weakreflist(cyfunc)<sp/>((cyfunc)-&gt;func_weakreflist)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4618"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4619"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__Pyx_CyFunction_weakreflist(cyfunc)<sp/>((cyfunc)-&gt;func.m_weakreflist)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4620"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4621"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__Pyx_CyFunction_Init(__pyx_CyFunctionObject<sp/>*op,<sp/>PyMethodDef<sp/>*ml,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,<sp/>PyObject*<sp/>qualname,</highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*closure,<sp/>PyObject<sp/>*module,<sp/>PyObject*<sp/>globals,<sp/>PyObject*<sp/>code)<sp/>{</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(op<sp/>==<sp/>NULL))</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;flags<sp/>=<sp/>flags;</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_CyFunction_weakreflist(op)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;func.m_ml<sp/>=<sp/>ml;</highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;func.m_self<sp/>=<sp/>(PyObject<sp/>*)<sp/>op;</highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XINCREF(closure);</highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;func_closure<sp/>=<sp/>closure;</highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XINCREF(module);</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;func.m_module<sp/>=<sp/>module;</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;func_dict<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;func_name<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(qualname);</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;func_qualname<sp/>=<sp/>qualname;</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;func_doc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;func_classobj<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;func_globals<sp/>=<sp/>globals;</highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(op-&gt;func_globals);</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XINCREF(code);</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;func_code<sp/>=<sp/>code;</highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;defaults_pyobjects<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;defaults_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;defaults<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;defaults_tuple<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;defaults_kwdict<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;defaults_getter<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4649"><highlight class="normal"><sp/><sp/><sp/><sp/>op-&gt;func_annotations<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(PyObject<sp/>*)<sp/>op;</highlight></codeline>
<codeline lineno="4651"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4652"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4653"><highlight class="normal">__Pyx_CyFunction_clear(__pyx_CyFunctionObject<sp/>*m)</highlight></codeline>
<codeline lineno="4654"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_CLEAR(m-&gt;func_closure);</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_CLEAR(m-&gt;func.m_module);</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_CLEAR(m-&gt;func_dict);</highlight></codeline>
<codeline lineno="4658"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_CLEAR(m-&gt;func_name);</highlight></codeline>
<codeline lineno="4659"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_CLEAR(m-&gt;func_qualname);</highlight></codeline>
<codeline lineno="4660"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_CLEAR(m-&gt;func_doc);</highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_CLEAR(m-&gt;func_globals);</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_CLEAR(m-&gt;func_code);</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_CLEAR(m-&gt;func_classobj);</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_CLEAR(m-&gt;defaults_tuple);</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_CLEAR(m-&gt;defaults_kwdict);</highlight></codeline>
<codeline lineno="4666"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_CLEAR(m-&gt;func_annotations);</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;defaults)<sp/>{</highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>**pydefaults<sp/>=<sp/>__Pyx_CyFunction_Defaults(PyObject<sp/>*,<sp/>m);</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m-&gt;defaults_pyobjects;<sp/>i++)</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(pydefaults[i]);</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject_Free(m-&gt;defaults);</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;defaults<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx__CyFunction_dealloc(__pyx_CyFunctionObject<sp/>*m)</highlight></codeline>
<codeline lineno="4678"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__Pyx_CyFunction_weakreflist(m)<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject_ClearWeakRefs((PyObject<sp/>*)<sp/>m);</highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_CyFunction_clear(m);</highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject_GC_Del(m);</highlight></codeline>
<codeline lineno="4683"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_CyFunction_dealloc(__pyx_CyFunctionObject<sp/>*m)</highlight></codeline>
<codeline lineno="4685"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject_GC_UnTrack(m);</highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx__CyFunction_dealloc(m);</highlight></codeline>
<codeline lineno="4688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_CyFunction_traverse(__pyx_CyFunctionObject<sp/>*m,<sp/>visitproc<sp/>visit,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg)</highlight></codeline>
<codeline lineno="4690"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_VISIT(m-&gt;func_closure);</highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_VISIT(m-&gt;func.m_module);</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_VISIT(m-&gt;func_dict);</highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_VISIT(m-&gt;func_name);</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_VISIT(m-&gt;func_qualname);</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_VISIT(m-&gt;func_doc);</highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_VISIT(m-&gt;func_globals);</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_VISIT(m-&gt;func_code);</highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_VISIT(m-&gt;func_classobj);</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_VISIT(m-&gt;defaults_tuple);</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_VISIT(m-&gt;defaults_kwdict);</highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;defaults)<sp/>{</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>**pydefaults<sp/>=<sp/>__Pyx_CyFunction_Defaults(PyObject<sp/>*,<sp/>m);</highlight></codeline>
<codeline lineno="4704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="4705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m-&gt;defaults_pyobjects;<sp/>i++)</highlight></codeline>
<codeline lineno="4706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_VISIT(pydefaults[i]);</highlight></codeline>
<codeline lineno="4707"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4710"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__Pyx_CyFunction_descr_get(PyObject<sp/>*func,<sp/>PyObject<sp/>*obj,<sp/>PyObject<sp/>*type)</highlight></codeline>
<codeline lineno="4711"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_CyFunctionObject<sp/>*m<sp/>=<sp/>(__pyx_CyFunctionObject<sp/>*)<sp/>func;</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;flags<sp/>&amp;<sp/>__Pyx_CYFUNCTION_STATICMETHOD)<sp/>{</highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(func);</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>func;</highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;flags<sp/>&amp;<sp/>__Pyx_CYFUNCTION_CLASSMETHOD)<sp/>{</highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="4720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>=<sp/>(PyObject<sp/>*)(Py_TYPE(obj));</highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_PyMethod_New(func,<sp/>type,<sp/>(PyObject<sp/>*)(Py_TYPE(type)));</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj<sp/>==<sp/>Py_None)</highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4725"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_PyMethod_New(func,<sp/>obj,<sp/>type);</highlight></codeline>
<codeline lineno="4727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4728"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*</highlight></codeline>
<codeline lineno="4729"><highlight class="normal">__Pyx_CyFunction_repr(__pyx_CyFunctionObject<sp/>*op)</highlight></codeline>
<codeline lineno="4730"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4731"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyUnicode_FromFormat(</highlight><highlight class="stringliteral">&quot;&lt;cyfunction<sp/>%U<sp/>at<sp/>%p&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;func_qualname,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)op);</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyString_FromFormat(</highlight><highlight class="stringliteral">&quot;&lt;cyfunction<sp/>%s<sp/>at<sp/>%p&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyString_AsString(op-&gt;func_qualname),<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)op);</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*<sp/>__Pyx_CyFunction_CallMethod(PyObject<sp/>*func,<sp/>PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>PyObject<sp/>*arg,<sp/>PyObject<sp/>*kw)<sp/>{</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/><sp/><sp/>PyCFunctionObject*<sp/>f<sp/>=<sp/>(PyCFunctionObject*)func;</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/><sp/><sp/>PyCFunction<sp/>meth<sp/>=<sp/>f-&gt;m_ml-&gt;ml_meth;</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>size;</highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(f-&gt;m_ml-&gt;ml_flags<sp/>&amp;<sp/>(METH_VARARGS<sp/>|<sp/>METH_KEYWORDS<sp/>|<sp/>METH_NOARGS<sp/>|<sp/>METH_O))<sp/>{</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>METH_VARARGS:</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(kw<sp/>==<sp/>NULL<sp/>||<sp/>PyDict_Size(kw)<sp/>==<sp/>0))</highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*meth)(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>arg);</highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>METH_VARARGS<sp/>|<sp/>METH_KEYWORDS:</highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*(PyCFunctionWithKeywords)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)meth)(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>arg,<sp/>kw);</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>METH_NOARGS:</highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(kw<sp/>==<sp/>NULL<sp/>||<sp/>PyDict_Size(kw)<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="4752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>PyTuple_GET_SIZE(arg);</highlight></codeline>
<codeline lineno="4753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(size<sp/>==<sp/>0))</highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*meth)(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>NULL);</highlight></codeline>
<codeline lineno="4755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_TypeError,</highlight></codeline>
<codeline lineno="4756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%.200s()<sp/>takes<sp/>no<sp/>arguments<sp/>(%&quot;</highlight><highlight class="normal"><sp/>CYTHON_FORMAT_SSIZE_T<sp/></highlight><highlight class="stringliteral">&quot;d<sp/>given)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;m_ml-&gt;ml_name,<sp/>size);</highlight></codeline>
<codeline lineno="4758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>METH_O:</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(kw<sp/>==<sp/>NULL<sp/>||<sp/>PyDict_Size(kw)<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>PyTuple_GET_SIZE(arg);</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(size<sp/>==<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*result,<sp/>*arg0;</highlight></codeline>
<codeline lineno="4766"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>CYTHON_ASSUME_SAFE_MACROS<sp/>&amp;&amp;<sp/>!CYTHON_AVOID_BORROWED_REFS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg0<sp/>=<sp/>PyTuple_GET_ITEM(arg,<sp/>0);</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg0<sp/>=<sp/>PySequence_ITEM(arg,<sp/>0);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!arg0))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4770"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(*meth)(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>arg0);</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>!(CYTHON_ASSUME_SAFE_MACROS<sp/>&amp;&amp;<sp/>!CYTHON_AVOID_BORROWED_REFS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(arg0);</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_TypeError,</highlight></codeline>
<codeline lineno="4778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%.200s()<sp/>takes<sp/>exactly<sp/>one<sp/>argument<sp/>(%&quot;</highlight><highlight class="normal"><sp/>CYTHON_FORMAT_SSIZE_T<sp/></highlight><highlight class="stringliteral">&quot;d<sp/>given)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;m_ml-&gt;ml_name,<sp/>size);</highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_SystemError,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>call<sp/>flags<sp/>in<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;__Pyx_CyFunction_Call.<sp/>METH_OLDARGS<sp/>is<sp/>no<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;longer<sp/>supported!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4788"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_TypeError,<sp/></highlight><highlight class="stringliteral">&quot;%.200s()<sp/>takes<sp/>no<sp/>keyword<sp/>arguments&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f-&gt;m_ml-&gt;ml_name);</highlight></codeline>
<codeline lineno="4791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyObject<sp/>*__Pyx_CyFunction_Call(PyObject<sp/>*func,<sp/>PyObject<sp/>*arg,<sp/>PyObject<sp/>*kw)<sp/>{</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_CyFunction_CallMethod(func,<sp/>((PyCFunctionObject*)func)-&gt;m_self,<sp/>arg,<sp/>kw);</highlight></codeline>
<codeline lineno="4795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__Pyx_CyFunction_CallAsMethod(PyObject<sp/>*func,<sp/>PyObject<sp/>*args,<sp/>PyObject<sp/>*kw)<sp/>{</highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*result;</highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_CyFunctionObject<sp/>*cyfunc<sp/>=<sp/>(__pyx_CyFunctionObject<sp/>*)<sp/>func;</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((cyfunc-&gt;flags<sp/>&amp;<sp/>__Pyx_CYFUNCTION_CCLASS)<sp/>&amp;&amp;<sp/>!(cyfunc-&gt;flags<sp/>&amp;<sp/>__Pyx_CYFUNCTION_STATICMETHOD))<sp/>{</highlight></codeline>
<codeline lineno="4800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>argc;</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*new_args;</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*</highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argc<sp/>=<sp/>PyTuple_GET_SIZE(args);</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_args<sp/>=<sp/>PyTuple_GetSlice(args,<sp/>1,<sp/>argc);</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!new_args))</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/>PyTuple_GetItem(args,<sp/>0);</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!</highlight><highlight class="keyword">self</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(new_args);</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_TypeError,</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;unbound<sp/>method<sp/>%.200S()<sp/>needs<sp/>an<sp/>argument&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cyfunc-&gt;func_qualname);</highlight></codeline>
<codeline lineno="4814"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_TypeError,</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;unbound<sp/>method<sp/>needs<sp/>an<sp/>argument&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4817"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>__Pyx_CyFunction_CallMethod(func,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>new_args,<sp/>kw);</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(new_args);</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>__Pyx_CyFunction_Call(func,<sp/>args,<sp/>kw);</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="4826"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4827"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyTypeObject<sp/>__pyx_CyFunctionType_type<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/><sp/><sp/>PyVarObject_HEAD_INIT(0,<sp/>0)</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;cython_function_or_method&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__pyx_CyFunctionObject),</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/><sp/><sp/>(destructor)<sp/>__Pyx_CyFunction_dealloc,</highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4840"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/><sp/><sp/>(reprfunc)<sp/>__Pyx_CyFunction_repr,</highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4844"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4845"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4846"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_CyFunction_CallAsMethod,</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4851"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_TPFLAGS_DEFAULT<sp/>|<sp/>Py_TPFLAGS_HAVE_GC,</highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/><sp/><sp/>(traverseproc)<sp/>__Pyx_CyFunction_traverse,</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/><sp/><sp/>(inquiry)<sp/>__Pyx_CyFunction_clear,</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4856"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x030500A0</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/><sp/><sp/>offsetof(__pyx_CyFunctionObject,<sp/>func_weakreflist),</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/><sp/><sp/>offsetof(PyCFunctionObject,<sp/>m_weakreflist),</highlight></codeline>
<codeline lineno="4860"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_CyFunction_methods,</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_CyFunction_members,</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_CyFunction_getsets,</highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4868"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_CyFunction_descr_get,</highlight></codeline>
<codeline lineno="4869"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4870"><highlight class="normal"><sp/><sp/><sp/><sp/>offsetof(__pyx_CyFunctionObject,<sp/>func_dict),</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4883"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x030400a1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4885"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4886"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x030800b1<sp/>&amp;&amp;<sp/>(!CYTHON_COMPILING_IN_PYPY<sp/>||<sp/>PYPY_VERSION_NUM<sp/>&gt;=<sp/>0x07030800)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4889"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x030800b4<sp/>&amp;&amp;<sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x03090000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4891"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4892"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x030C0000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4893"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4894"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4895"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_PYPY<sp/>&amp;&amp;<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x03090000<sp/>&amp;&amp;<sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x030a0000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4896"><highlight class="normal"><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="4897"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4898"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pyx_CyFunction_init(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4900"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_CyFunctionType<sp/>=<sp/>__Pyx_FetchCommonType(&amp;__pyx_CyFunctionType_type);</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(__pyx_CyFunctionType<sp/>==<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="4902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4906"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*__Pyx_CyFunction_InitDefaults(PyObject<sp/>*func,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pyobjects)<sp/>{</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_CyFunctionObject<sp/>*m<sp/>=<sp/>(__pyx_CyFunctionObject<sp/>*)<sp/>func;</highlight></codeline>
<codeline lineno="4908"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;defaults<sp/>=<sp/>PyObject_Malloc(size);</highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!m-&gt;defaults))</highlight></codeline>
<codeline lineno="4910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyErr_NoMemory();</highlight></codeline>
<codeline lineno="4911"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(m-&gt;defaults,<sp/>0,<sp/>size);</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;defaults_pyobjects<sp/>=<sp/>pyobjects;</highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;defaults_size<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m-&gt;defaults;</highlight></codeline>
<codeline lineno="4915"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_CyFunction_SetDefaultsTuple(PyObject<sp/>*func,<sp/>PyObject<sp/>*tuple)<sp/>{</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_CyFunctionObject<sp/>*m<sp/>=<sp/>(__pyx_CyFunctionObject<sp/>*)<sp/>func;</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;defaults_tuple<sp/>=<sp/>tuple;</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(tuple);</highlight></codeline>
<codeline lineno="4920"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4921"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_CyFunction_SetDefaultsKwDict(PyObject<sp/>*func,<sp/>PyObject<sp/>*dict)<sp/>{</highlight></codeline>
<codeline lineno="4922"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_CyFunctionObject<sp/>*m<sp/>=<sp/>(__pyx_CyFunctionObject<sp/>*)<sp/>func;</highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;defaults_kwdict<sp/>=<sp/>dict;</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(dict);</highlight></codeline>
<codeline lineno="4925"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4926"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_CyFunction_SetAnnotationsDict(PyObject<sp/>*func,<sp/>PyObject<sp/>*dict)<sp/>{</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_CyFunctionObject<sp/>*m<sp/>=<sp/>(__pyx_CyFunctionObject<sp/>*)<sp/>func;</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;func_annotations<sp/>=<sp/>dict;</highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(dict);</highlight></codeline>
<codeline lineno="4930"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"></highlight></codeline>
<codeline lineno="4932"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CythonFunction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4933"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject<sp/>*__Pyx_CyFunction_New(PyMethodDef<sp/>*ml,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,<sp/>PyObject*<sp/>qualname,</highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*closure,<sp/>PyObject<sp/>*module,<sp/>PyObject*<sp/>globals,<sp/>PyObject*<sp/>code)<sp/>{</highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*op<sp/>=<sp/>__Pyx_CyFunction_Init(</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject_GC_New(__pyx_CyFunctionObject,<sp/>__pyx_CyFunctionType),</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ml,<sp/>flags,<sp/>qualname,<sp/>closure,<sp/>module,<sp/>globals,<sp/>code</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(op))<sp/>{</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject_GC_Track(op);</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>op;</highlight></codeline>
<codeline lineno="4943"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4944"><highlight class="normal"></highlight></codeline>
<codeline lineno="4945"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CLineInTraceback<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4946"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CYTHON_CLINE_IN_TRACEBACK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4947"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_CLineForTraceback(CYTHON_UNUSED<sp/>PyThreadState<sp/>*tstate,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c_line)<sp/>{</highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*use_cline;</highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*ptype,<sp/>*pvalue,<sp/>*ptraceback;</highlight></codeline>
<codeline lineno="4950"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_CPYTHON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4951"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>**cython_runtime_dict;</highlight></codeline>
<codeline lineno="4952"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!__pyx_cython_runtime))<sp/>{</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c_line;</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_ErrFetchInState(tstate,<sp/>&amp;ptype,<sp/>&amp;pvalue,<sp/>&amp;ptraceback);</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_CPYTHON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4958"><highlight class="normal"><sp/><sp/><sp/><sp/>cython_runtime_dict<sp/>=<sp/>_PyObject_GetDictPtr(__pyx_cython_runtime);</highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(cython_runtime_dict))<sp/>{</highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_PY_DICT_LOOKUP_IF_MODIFIED(</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_cline,<sp/>*cython_runtime_dict,</highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_PyDict_GetItemStr(*cython_runtime_dict,<sp/>__pyx_n_s_cline_in_traceback))</highlight></codeline>
<codeline lineno="4963"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4964"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*use_cline_obj<sp/>=<sp/>__Pyx_PyObject_GetAttrStr(__pyx_cython_runtime,<sp/>__pyx_n_s_cline_in_traceback);</highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_cline_obj)<sp/>{</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_cline<sp/>=<sp/>PyObject_Not(use_cline_obj)<sp/>?<sp/>Py_False<sp/>:<sp/>Py_True;</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(use_cline_obj);</highlight></codeline>
<codeline lineno="4970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Clear();</highlight></codeline>
<codeline lineno="4972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_cline<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!use_cline)<sp/>{</highlight></codeline>
<codeline lineno="4976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_line<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)<sp/>PyObject_SetAttr(__pyx_cython_runtime,<sp/>__pyx_n_s_cline_in_traceback,<sp/>Py_False);</highlight></codeline>
<codeline lineno="4978"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_cline<sp/>==<sp/>Py_False<sp/>||<sp/>(use_cline<sp/>!=<sp/>Py_True<sp/>&amp;&amp;<sp/>PyObject_Not(use_cline)<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_line<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4982"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_ErrRestoreInState(tstate,<sp/>ptype,<sp/>pvalue,<sp/>ptraceback);</highlight></codeline>
<codeline lineno="4983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c_line;</highlight></codeline>
<codeline lineno="4984"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4986"><highlight class="normal"></highlight></codeline>
<codeline lineno="4987"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CodeObjectCache<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4988"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry*<sp/>entries,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code_line)<sp/>{</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0,<sp/>mid<sp/>=<sp/>0,<sp/>end<sp/>=<sp/>count<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="4990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>code_line<sp/>&gt;<sp/>entries[end].code_line)<sp/>{</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="4992"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mid<sp/>=<sp/>start<sp/>+<sp/>(end<sp/>-<sp/>start)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code_line<sp/>&lt;<sp/>entries[mid].code_line)<sp/>{</highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>mid;</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code_line<sp/>&gt;<sp/>entries[mid].code_line)<sp/>{</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>mid<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mid;</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code_line<sp/>&lt;=<sp/>entries[mid].code_line)<sp/>{</highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mid;</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mid<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5008"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyCodeObject<sp/>*__pyx_find_code_object(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code_line)<sp/>{</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/><sp/><sp/><sp/>PyCodeObject*<sp/>code_object;</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos;</highlight></codeline>
<codeline lineno="5012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!code_line)<sp/>||<sp/>unlikely(!__pyx_code_cache.entries))<sp/>{</highlight></codeline>
<codeline lineno="5013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>__pyx_bisect_code_objects(__pyx_code_cache.entries,<sp/>__pyx_code_cache.count,<sp/>code_line);</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(pos<sp/>&gt;=<sp/>__pyx_code_cache.count)<sp/>||<sp/>unlikely(__pyx_code_cache.entries[pos].code_line<sp/>!=<sp/>code_line))<sp/>{</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/><sp/><sp/>code_object<sp/>=<sp/>__pyx_code_cache.entries[pos].code_object;</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(code_object);</highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>code_object;</highlight></codeline>
<codeline lineno="5022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5023"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__pyx_insert_code_object(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code_line,<sp/>PyCodeObject*<sp/>code_object)<sp/>{</highlight></codeline>
<codeline lineno="5024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos,<sp/>i;</highlight></codeline>
<codeline lineno="5025"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_CodeObjectCacheEntry*<sp/>entries<sp/>=<sp/>__pyx_code_cache.entries;</highlight></codeline>
<codeline lineno="5026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!code_line))<sp/>{</highlight></codeline>
<codeline lineno="5027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5028"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!entries))<sp/>{</highlight></codeline>
<codeline lineno="5030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entries<sp/>=<sp/>(__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__Pyx_CodeObjectCacheEntry));</highlight></codeline>
<codeline lineno="5031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(entries))<sp/>{</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_code_cache.entries<sp/>=<sp/>entries;</highlight></codeline>
<codeline lineno="5033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_code_cache.max_count<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="5034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_code_cache.count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entries[0].code_line<sp/>=<sp/>code_line;</highlight></codeline>
<codeline lineno="5036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entries[0].code_object<sp/>=<sp/>code_object;</highlight></codeline>
<codeline lineno="5037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_INCREF(code_object);</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5040"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5041"><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>__pyx_bisect_code_objects(__pyx_code_cache.entries,<sp/>__pyx_code_cache.count,<sp/>code_line);</highlight></codeline>
<codeline lineno="5042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pos<sp/>&lt;<sp/>__pyx_code_cache.count)<sp/>&amp;&amp;<sp/>unlikely(__pyx_code_cache.entries[pos].code_line<sp/>==<sp/>code_line))<sp/>{</highlight></codeline>
<codeline lineno="5043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyCodeObject*<sp/>tmp<sp/>=<sp/>entries[pos].code_object;</highlight></codeline>
<codeline lineno="5044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entries[pos].code_object<sp/>=<sp/>code_object;</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(tmp);</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5047"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__pyx_code_cache.count<sp/>==<sp/>__pyx_code_cache.max_count)<sp/>{</highlight></codeline>
<codeline lineno="5049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_max<sp/>=<sp/>__pyx_code_cache.max_count<sp/>+<sp/>64;</highlight></codeline>
<codeline lineno="5050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entries<sp/>=<sp/>(__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(</highlight></codeline>
<codeline lineno="5051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_code_cache.entries,<sp/>((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)new_max)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__Pyx_CodeObjectCacheEntry));</highlight></codeline>
<codeline lineno="5052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!entries))<sp/>{</highlight></codeline>
<codeline lineno="5053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_code_cache.entries<sp/>=<sp/>entries;</highlight></codeline>
<codeline lineno="5056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_code_cache.max_count<sp/>=<sp/>new_max;</highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=__pyx_code_cache.count;<sp/>i&gt;pos;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="5059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entries[i]<sp/>=<sp/>entries[i-1];</highlight></codeline>
<codeline lineno="5060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5061"><highlight class="normal"><sp/><sp/><sp/><sp/>entries[pos].code_line<sp/>=<sp/>code_line;</highlight></codeline>
<codeline lineno="5062"><highlight class="normal"><sp/><sp/><sp/><sp/>entries[pos].code_object<sp/>=<sp/>code_object;</highlight></codeline>
<codeline lineno="5063"><highlight class="normal"><sp/><sp/><sp/><sp/>__pyx_code_cache.count++;</highlight></codeline>
<codeline lineno="5064"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_INCREF(code_object);</highlight></codeline>
<codeline lineno="5065"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5066"><highlight class="normal"></highlight></codeline>
<codeline lineno="5067"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>AddTraceback<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5068"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;compile.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5069"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;frameobject.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5070"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;traceback.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5071"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x030b00a6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5072"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifndef<sp/>Py_BUILD_CORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5073"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>Py_BUILD_CORE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5074"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5075"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&quot;internal/pycore_frame.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5076"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5077"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyCodeObject*<sp/>__Pyx_CreateCodeObjectForTraceback(</highlight></codeline>
<codeline lineno="5078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*funcname,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c_line,</highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>py_line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename)<sp/>{</highlight></codeline>
<codeline lineno="5080"><highlight class="normal"><sp/><sp/><sp/><sp/>PyCodeObject<sp/>*py_code<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*py_funcname<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5082"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5083"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*py_srcfile<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5084"><highlight class="normal"><sp/><sp/><sp/><sp/>py_srcfile<sp/>=<sp/>PyString_FromString(filename);</highlight></codeline>
<codeline lineno="5085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!py_srcfile)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c_line)<sp/>{</highlight></codeline>
<codeline lineno="5088"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_funcname<sp/>=<sp/>PyString_FromFormat(<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>(%s:%d)&quot;</highlight><highlight class="normal">,<sp/>funcname,<sp/>__pyx_cfilenm,<sp/>c_line);</highlight></codeline>
<codeline lineno="5090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!py_funcname)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="5091"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_funcname<sp/>=<sp/>PyUnicode_FromFormat(<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>(%s:%d)&quot;</highlight><highlight class="normal">,<sp/>funcname,<sp/>__pyx_cfilenm,<sp/>c_line);</highlight></codeline>
<codeline lineno="5093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!py_funcname)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="5094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcname<sp/>=<sp/>PyUnicode_AsUTF8(py_funcname);</highlight></codeline>
<codeline lineno="5095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!funcname)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="5096"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5097"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5099"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_funcname<sp/>=<sp/>PyString_FromString(funcname);</highlight></codeline>
<codeline lineno="5101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!py_funcname)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="5102"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5104"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5105"><highlight class="normal"><sp/><sp/><sp/><sp/>py_code<sp/>=<sp/>__Pyx_PyCode_New(</highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="5109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="5110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="5111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_empty_bytes,<sp/></highlight><highlight class="comment">/*PyObject<sp/>*code,*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_empty_tuple,<sp/></highlight><highlight class="comment">/*PyObject<sp/>*consts,*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_empty_tuple,<sp/></highlight><highlight class="comment">/*PyObject<sp/>*names,*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_empty_tuple,<sp/></highlight><highlight class="comment">/*PyObject<sp/>*varnames,*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_empty_tuple,<sp/></highlight><highlight class="comment">/*PyObject<sp/>*freevars,*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_empty_tuple,<sp/></highlight><highlight class="comment">/*PyObject<sp/>*cellvars,*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_srcfile,<sp/><sp/><sp/></highlight><highlight class="comment">/*PyObject<sp/>*filename,*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_funcname,<sp/><sp/></highlight><highlight class="comment">/*PyObject<sp/>*name,*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_line,</highlight></codeline>
<codeline lineno="5120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_empty_bytes<sp/><sp/></highlight><highlight class="comment">/*PyObject<sp/>*lnotab*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5121"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_DECREF(py_srcfile);</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5124"><highlight class="normal"><sp/><sp/><sp/><sp/>py_code<sp/>=<sp/>PyCode_NewEmpty(filename,<sp/>funcname,<sp/>py_line);</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(py_funcname);<sp/><sp/></highlight><highlight class="comment">//<sp/>XDECREF<sp/>since<sp/>it&apos;s<sp/>only<sp/>set<sp/>on<sp/>Py3<sp/>if<sp/>cline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>py_code;</highlight></codeline>
<codeline lineno="5128"><highlight class="normal">bad:</highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(py_funcname);</highlight></codeline>
<codeline lineno="5130"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5131"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(py_srcfile);</highlight></codeline>
<codeline lineno="5132"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5135"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__Pyx_AddTraceback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*funcname,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c_line,</highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>py_line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename)<sp/>{</highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/><sp/><sp/>PyCodeObject<sp/>*py_code<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"><sp/><sp/><sp/><sp/>PyFrameObject<sp/>*py_frame<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5139"><highlight class="normal"><sp/><sp/><sp/><sp/>PyThreadState<sp/>*tstate<sp/>=<sp/>__Pyx_PyThreadState_Current;</highlight></codeline>
<codeline lineno="5140"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*ptype,<sp/>*pvalue,<sp/>*ptraceback;</highlight></codeline>
<codeline lineno="5141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c_line)<sp/>{</highlight></codeline>
<codeline lineno="5142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c_line<sp/>=<sp/>__Pyx_CLineForTraceback(tstate,<sp/>c_line);</highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5144"><highlight class="normal"><sp/><sp/><sp/><sp/>py_code<sp/>=<sp/>__pyx_find_code_object(c_line<sp/>?<sp/>-c_line<sp/>:<sp/>py_line);</highlight></codeline>
<codeline lineno="5145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!py_code)<sp/>{</highlight></codeline>
<codeline lineno="5146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_ErrFetchInState(tstate,<sp/>&amp;ptype,<sp/>&amp;pvalue,<sp/>&amp;ptraceback);</highlight></codeline>
<codeline lineno="5147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_code<sp/>=<sp/>__Pyx_CreateCodeObjectForTraceback(</highlight></codeline>
<codeline lineno="5148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcname,<sp/>c_line,<sp/>py_line,<sp/>filename);</highlight></codeline>
<codeline lineno="5149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!py_code)<sp/>{</highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>code<sp/>object<sp/>creation<sp/>fails,<sp/>then<sp/>we<sp/>should<sp/>clear<sp/>the</highlight></codeline>
<codeline lineno="5151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fetched<sp/>exception<sp/>references<sp/>and<sp/>propagate<sp/>the<sp/>new<sp/>exception<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(ptype);</highlight></codeline>
<codeline lineno="5153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(pvalue);</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_XDECREF(ptraceback);</highlight></codeline>
<codeline lineno="5155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_ErrRestoreInState(tstate,<sp/>ptype,<sp/>pvalue,<sp/>ptraceback);</highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_insert_code_object(c_line<sp/>?<sp/>-c_line<sp/>:<sp/>py_line,<sp/>py_code);</highlight></codeline>
<codeline lineno="5159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"><sp/><sp/><sp/><sp/>py_frame<sp/>=<sp/>PyFrame_New(</highlight></codeline>
<codeline lineno="5161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tstate,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*PyThreadState<sp/>*tstate,*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>py_code,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*PyCodeObject<sp/>*code,*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__pyx_d,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*PyObject<sp/>*globals,*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*PyObject<sp/>*locals*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5165"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="5166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!py_frame)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="5167"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_PyFrame_SetLineNumber(py_frame,<sp/>py_line);</highlight></codeline>
<codeline lineno="5168"><highlight class="normal"><sp/><sp/><sp/><sp/>PyTraceBack_Here(py_frame);</highlight></codeline>
<codeline lineno="5169"><highlight class="normal">bad:</highlight></codeline>
<codeline lineno="5170"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(py_code);</highlight></codeline>
<codeline lineno="5171"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(py_frame);</highlight></codeline>
<codeline lineno="5172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"></highlight></codeline>
<codeline lineno="5174"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CIntToPy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5175"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyObject*<sp/>__Pyx_PyInt_From_long(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__Pyx_HAS_GCC_DIAGNOSTIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5177"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5178"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wconversion&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5179"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>neg_one<sp/>=<sp/>(long)<sp/>-1,<sp/>const_zero<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>0;</highlight></codeline>
<codeline lineno="5181"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__Pyx_HAS_GCC_DIAGNOSTIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5182"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5183"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_unsigned<sp/>=<sp/>neg_one<sp/>&gt;<sp/>const_zero;</highlight></codeline>
<codeline lineno="5185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_unsigned)<sp/>{</highlight></codeline>
<codeline lineno="5186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(long))<sp/>{</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyInt_FromLong((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>value);</highlight></codeline>
<codeline lineno="5188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyLong_FromUnsignedLong((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>value);</highlight></codeline>
<codeline lineno="5190"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_LONG_LONG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>PY_LONG_LONG))<sp/>{</highlight></codeline>
<codeline lineno="5192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyLong_FromUnsignedLongLong((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>PY_LONG_LONG)<sp/>value);</highlight></codeline>
<codeline lineno="5193"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5195"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="5197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyInt_FromLong((</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>value);</highlight></codeline>
<codeline lineno="5198"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_LONG_LONG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PY_LONG_LONG))<sp/>{</highlight></codeline>
<codeline lineno="5200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyLong_FromLongLong((PY_LONG_LONG)<sp/>value);</highlight></codeline>
<codeline lineno="5201"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5204"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>one<sp/>=<sp/>1;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>little<sp/>=<sp/>(int)*(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;one;</highlight></codeline>
<codeline lineno="5206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bytes<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;value;</highlight></codeline>
<codeline lineno="5207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_PyLong_FromByteArray(bytes,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="5208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>little,<sp/>!is_unsigned);</highlight></codeline>
<codeline lineno="5209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5211"><highlight class="normal"></highlight></codeline>
<codeline lineno="5212"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CIntFromPyVerify<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5213"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PYX_VERIFY_RETURN_INT(target_type,<sp/>func_type,<sp/>func_value)\</highlight></codeline>
<codeline lineno="5214"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>__PYX__VERIFY_RETURN_INT(target_type,<sp/>func_type,<sp/>func_value,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5215"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PYX_VERIFY_RETURN_INT_EXC(target_type,<sp/>func_type,<sp/>func_value)\</highlight></codeline>
<codeline lineno="5216"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>__PYX__VERIFY_RETURN_INT(target_type,<sp/>func_type,<sp/>func_value,<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5217"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PYX__VERIFY_RETURN_INT(target_type,<sp/>func_type,<sp/>func_value,<sp/>exc)\</highlight></codeline>
<codeline lineno="5218"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="5219"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_type<sp/>value<sp/>=<sp/>func_value;\</highlight></codeline>
<codeline lineno="5220"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(sizeof(target_type)<sp/>&lt;<sp/>sizeof(func_type))<sp/>{\</highlight></codeline>
<codeline lineno="5221"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(unlikely(value<sp/>!=<sp/>(func_type)<sp/>(target_type)<sp/>value))<sp/>{\</highlight></codeline>
<codeline lineno="5222"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_type<sp/>zero<sp/>=<sp/>0;\</highlight></codeline>
<codeline lineno="5223"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(exc<sp/>&amp;&amp;<sp/>unlikely(value<sp/>==<sp/>(func_type)-1<sp/>&amp;&amp;<sp/>PyErr_Occurred()))\</highlight></codeline>
<codeline lineno="5224"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(target_type)<sp/>-1;\</highlight></codeline>
<codeline lineno="5225"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(is_unsigned<sp/>&amp;&amp;<sp/>unlikely(value<sp/>&lt;<sp/>zero))\</highlight></codeline>
<codeline lineno="5226"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>raise_neg_overflow;\</highlight></codeline>
<codeline lineno="5227"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else\</highlight></codeline>
<codeline lineno="5228"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>raise_overflow;\</highlight></codeline>
<codeline lineno="5229"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="5230"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="5231"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(target_type)<sp/>value;\</highlight></codeline>
<codeline lineno="5232"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5233"><highlight class="normal"></highlight></codeline>
<codeline lineno="5234"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CIntFromPy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5235"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>__Pyx_PyInt_As_long(PyObject<sp/>*x)<sp/>{</highlight></codeline>
<codeline lineno="5236"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__Pyx_HAS_GCC_DIAGNOSTIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5237"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5238"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wconversion&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5239"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>neg_one<sp/>=<sp/>(long)<sp/>-1,<sp/>const_zero<sp/>=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>0;</highlight></codeline>
<codeline lineno="5241"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__Pyx_HAS_GCC_DIAGNOSTIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5242"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5243"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_unsigned<sp/>=<sp/>neg_one<sp/>&gt;<sp/>const_zero;</highlight></codeline>
<codeline lineno="5245"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(PyInt_Check(x)))<sp/>{</highlight></codeline>
<codeline lineno="5247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(long))<sp/>{</highlight></codeline>
<codeline lineno="5248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>PyInt_AS_LONG(x))</highlight></codeline>
<codeline lineno="5249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>PyInt_AS_LONG(x);</highlight></codeline>
<codeline lineno="5251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_unsigned<sp/>&amp;&amp;<sp/>unlikely(val<sp/>&lt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="5252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>raise_neg_overflow;</highlight></codeline>
<codeline lineno="5253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>val;</highlight></codeline>
<codeline lineno="5255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5256"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5257"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(PyLong_Check(x)))<sp/>{</highlight></codeline>
<codeline lineno="5259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_unsigned)<sp/>{</highlight></codeline>
<codeline lineno="5260"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_USE_PYLONG_INTERNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>digit*<sp/>digits<sp/>=<sp/>((PyLongObject*)x)-&gt;ob_digit;</highlight></codeline>
<codeline lineno="5262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Py_SIZE(x))<sp/>{</highlight></codeline>
<codeline lineno="5263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>0:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>0;</highlight></codeline>
<codeline lineno="5264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>1:<sp/>__PYX_VERIFY_RETURN_INT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>digit,<sp/>digits[0])</highlight></codeline>
<codeline lineno="5265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;<sp/>1<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;<sp/>2<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>(((((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[0])))</highlight></codeline>
<codeline lineno="5269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;=<sp/>2<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>(((((long)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[0]));</highlight></codeline>
<codeline lineno="5271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;<sp/>2<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;<sp/>3<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>(((((((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[0])))</highlight></codeline>
<codeline lineno="5278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;=<sp/>3<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>(((((((long)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(long)digits[0]));</highlight></codeline>
<codeline lineno="5280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="5284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;<sp/>3<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;<sp/>4<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>(((((((((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[3])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[0])))</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;=<sp/>4<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>(((((((((long)digits[3])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(long)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[0]));</highlight></codeline>
<codeline lineno="5289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5293"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5294"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_CPYTHON<sp/>&amp;&amp;<sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x030C00A7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(Py_SIZE(x)<sp/>&lt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="5296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>raise_neg_overflow;</highlight></codeline>
<codeline lineno="5297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5298"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>PyObject_RichCompareBool(x,<sp/>Py_False,<sp/>Py_LT);</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(result<sp/>&lt;<sp/>0))</highlight></codeline>
<codeline lineno="5302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>-1;</highlight></codeline>
<codeline lineno="5303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(result<sp/>==<sp/>1))</highlight></codeline>
<codeline lineno="5304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>raise_neg_overflow;</highlight></codeline>
<codeline lineno="5305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5306"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="5308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT_EXC(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>PyLong_AsUnsignedLong(x))</highlight></codeline>
<codeline lineno="5309"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_LONG_LONG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>PY_LONG_LONG))<sp/>{</highlight></codeline>
<codeline lineno="5311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT_EXC(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>PY_LONG_LONG,<sp/>PyLong_AsUnsignedLongLong(x))</highlight></codeline>
<codeline lineno="5312"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5315"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_USE_PYLONG_INTERNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>digit*<sp/>digits<sp/>=<sp/>((PyLongObject*)x)-&gt;ob_digit;</highlight></codeline>
<codeline lineno="5317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Py_SIZE(x))<sp/>{</highlight></codeline>
<codeline lineno="5318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>0:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>0;</highlight></codeline>
<codeline lineno="5319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>-1:<sp/>__PYX_VERIFY_RETURN_INT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>sdigit,<sp/>(sdigit)<sp/>(-(sdigit)digits[0]))</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>1:<sp/>__PYX_VERIFY_RETURN_INT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/><sp/>digit,<sp/>+digits[0])</highlight></codeline>
<codeline lineno="5321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>-2:</highlight></codeline>
<codeline lineno="5322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>-<sp/>1<sp/>&gt;<sp/>1<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;<sp/>2<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>-(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>(((((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[0])))</highlight></codeline>
<codeline lineno="5325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>-<sp/>1<sp/>&gt;<sp/>2<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>(((long)-1)*(((((long)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[0])));</highlight></codeline>
<codeline lineno="5327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="5331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;<sp/>1<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;<sp/>2<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>(((((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[0])))</highlight></codeline>
<codeline lineno="5334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>-<sp/>1<sp/>&gt;<sp/>2<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>((((((long)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[0])));</highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>-3:</highlight></codeline>
<codeline lineno="5340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>-<sp/>1<sp/>&gt;<sp/>2<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;<sp/>3<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>-(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>(((((((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[0])))</highlight></codeline>
<codeline lineno="5343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>-<sp/>1<sp/>&gt;<sp/>3<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>(((long)-1)*(((((((long)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(long)digits[0])));</highlight></codeline>
<codeline lineno="5345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="5349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;<sp/>2<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;<sp/>3<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>(((((((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[0])))</highlight></codeline>
<codeline lineno="5352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>-<sp/>1<sp/>&gt;<sp/>3<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>((((((((long)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(long)digits[0])));</highlight></codeline>
<codeline lineno="5354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>-4:</highlight></codeline>
<codeline lineno="5358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>-<sp/>1<sp/>&gt;<sp/>3<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;<sp/>4<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>-(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>(((((((((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[3])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[0])))</highlight></codeline>
<codeline lineno="5361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>-<sp/>1<sp/>&gt;<sp/>4<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>(((long)-1)*(((((((((long)digits[3])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(long)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[0])));</highlight></codeline>
<codeline lineno="5363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="5367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;<sp/>3<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;<sp/>4<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>(((((((((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[3])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[0])))</highlight></codeline>
<codeline lineno="5370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>-<sp/>1<sp/>&gt;<sp/>4<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>((((((((((long)digits[3])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(long)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[0])));</highlight></codeline>
<codeline lineno="5372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5376"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(long))<sp/>{</highlight></codeline>
<codeline lineno="5378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT_EXC(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>PyLong_AsLong(x))</highlight></codeline>
<codeline lineno="5379"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_LONG_LONG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PY_LONG_LONG))<sp/>{</highlight></codeline>
<codeline lineno="5381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT_EXC(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>PY_LONG_LONG,<sp/>PyLong_AsLongLong(x))</highlight></codeline>
<codeline lineno="5382"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5386"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_PYPY<sp/>&amp;&amp;<sp/>!defined(_PyLong_AsByteArray)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_RuntimeError,</highlight></codeline>
<codeline lineno="5388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;_PyLong_AsByteArray()<sp/>not<sp/>available<sp/>in<sp/>PyPy,<sp/>cannot<sp/>convert<sp/>large<sp/>numbers&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5389"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="5391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*v<sp/>=<sp/>__Pyx_PyNumber_IntOrLong(x);</highlight></codeline>
<codeline lineno="5392"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/>#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(v)<sp/>&amp;&amp;<sp/>!PyLong_Check(v))<sp/>{</highlight></codeline>
<codeline lineno="5394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*tmp<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="5395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>PyNumber_Long(tmp);</highlight></codeline>
<codeline lineno="5396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(tmp);</highlight></codeline>
<codeline lineno="5397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5398"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(v))<sp/>{</highlight></codeline>
<codeline lineno="5400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>one<sp/>=<sp/>1;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_little<sp/>=<sp/>(int)*(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;one;</highlight></codeline>
<codeline lineno="5401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bytes<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;val;</highlight></codeline>
<codeline lineno="5402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>_PyLong_AsByteArray((PyLongObject<sp/>*)v,</highlight></codeline>
<codeline lineno="5403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(val),</highlight></codeline>
<codeline lineno="5404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_little,<sp/>!is_unsigned);</highlight></codeline>
<codeline lineno="5405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(v);</highlight></codeline>
<codeline lineno="5406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(!ret))</highlight></codeline>
<codeline lineno="5407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="5408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5409"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>-1;</highlight></codeline>
<codeline lineno="5411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5412"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="5414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*tmp<sp/>=<sp/>__Pyx_PyNumber_IntOrLong(x);</highlight></codeline>
<codeline lineno="5415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tmp)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>-1;</highlight></codeline>
<codeline lineno="5416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>__Pyx_PyInt_As_long(tmp);</highlight></codeline>
<codeline lineno="5417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(tmp);</highlight></codeline>
<codeline lineno="5418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="5419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5420"><highlight class="normal">raise_overflow:</highlight></codeline>
<codeline lineno="5421"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_OverflowError,</highlight></codeline>
<codeline lineno="5422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;value<sp/>too<sp/>large<sp/>to<sp/>convert<sp/>to<sp/>long&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>-1;</highlight></codeline>
<codeline lineno="5424"><highlight class="normal">raise_neg_overflow:</highlight></codeline>
<codeline lineno="5425"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_OverflowError,</highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>convert<sp/>negative<sp/>value<sp/>to<sp/>long&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>-1;</highlight></codeline>
<codeline lineno="5428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5429"><highlight class="normal"></highlight></codeline>
<codeline lineno="5430"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CIntFromPy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5431"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_PyInt_As_int(PyObject<sp/>*x)<sp/>{</highlight></codeline>
<codeline lineno="5432"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__Pyx_HAS_GCC_DIAGNOSTIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5433"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5434"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wconversion&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5435"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>neg_one<sp/>=<sp/>(int)<sp/>-1,<sp/>const_zero<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>0;</highlight></codeline>
<codeline lineno="5437"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__Pyx_HAS_GCC_DIAGNOSTIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5438"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5439"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_unsigned<sp/>=<sp/>neg_one<sp/>&gt;<sp/>const_zero;</highlight></codeline>
<codeline lineno="5441"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(PyInt_Check(x)))<sp/>{</highlight></codeline>
<codeline lineno="5443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(long))<sp/>{</highlight></codeline>
<codeline lineno="5444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>PyInt_AS_LONG(x))</highlight></codeline>
<codeline lineno="5445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>PyInt_AS_LONG(x);</highlight></codeline>
<codeline lineno="5447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_unsigned<sp/>&amp;&amp;<sp/>unlikely(val<sp/>&lt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="5448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>raise_neg_overflow;</highlight></codeline>
<codeline lineno="5449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>val;</highlight></codeline>
<codeline lineno="5451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5452"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5453"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(PyLong_Check(x)))<sp/>{</highlight></codeline>
<codeline lineno="5455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_unsigned)<sp/>{</highlight></codeline>
<codeline lineno="5456"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_USE_PYLONG_INTERNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>digit*<sp/>digits<sp/>=<sp/>((PyLongObject*)x)-&gt;ob_digit;</highlight></codeline>
<codeline lineno="5458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Py_SIZE(x))<sp/>{</highlight></codeline>
<codeline lineno="5459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>0:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>0;</highlight></codeline>
<codeline lineno="5460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>1:<sp/>__PYX_VERIFY_RETURN_INT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>digit,<sp/>digits[0])</highlight></codeline>
<codeline lineno="5461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="5462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>&gt;<sp/>1<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;<sp/>2<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>(((((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[0])))</highlight></codeline>
<codeline lineno="5465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>&gt;=<sp/>2<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(((((int)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)digits[0]));</highlight></codeline>
<codeline lineno="5467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="5471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>&gt;<sp/>2<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;<sp/>3<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>(((((((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[0])))</highlight></codeline>
<codeline lineno="5474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>&gt;=<sp/>3<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(((((((int)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(int)digits[0]));</highlight></codeline>
<codeline lineno="5476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="5480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>&gt;<sp/>3<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;<sp/>4<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>(((((((((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[3])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[0])))</highlight></codeline>
<codeline lineno="5483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>&gt;=<sp/>4<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(((((((((int)digits[3])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(int)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)digits[0]));</highlight></codeline>
<codeline lineno="5485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5489"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5490"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_CPYTHON<sp/>&amp;&amp;<sp/>PY_VERSION_HEX<sp/>&lt;<sp/>0x030C00A7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(Py_SIZE(x)<sp/>&lt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="5492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>raise_neg_overflow;</highlight></codeline>
<codeline lineno="5493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5494"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>PyObject_RichCompareBool(x,<sp/>Py_False,<sp/>Py_LT);</highlight></codeline>
<codeline lineno="5497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(result<sp/>&lt;<sp/>0))</highlight></codeline>
<codeline lineno="5498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-1;</highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(result<sp/>==<sp/>1))</highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>raise_neg_overflow;</highlight></codeline>
<codeline lineno="5501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5502"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="5504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT_EXC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>PyLong_AsUnsignedLong(x))</highlight></codeline>
<codeline lineno="5505"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_LONG_LONG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>PY_LONG_LONG))<sp/>{</highlight></codeline>
<codeline lineno="5507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT_EXC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>PY_LONG_LONG,<sp/>PyLong_AsUnsignedLongLong(x))</highlight></codeline>
<codeline lineno="5508"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5511"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_USE_PYLONG_INTERNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>digit*<sp/>digits<sp/>=<sp/>((PyLongObject*)x)-&gt;ob_digit;</highlight></codeline>
<codeline lineno="5513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Py_SIZE(x))<sp/>{</highlight></codeline>
<codeline lineno="5514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>0:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>0;</highlight></codeline>
<codeline lineno="5515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>-1:<sp/>__PYX_VERIFY_RETURN_INT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>sdigit,<sp/>(sdigit)<sp/>(-(sdigit)digits[0]))</highlight></codeline>
<codeline lineno="5516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><sp/>1:<sp/>__PYX_VERIFY_RETURN_INT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/><sp/>digit,<sp/>+digits[0])</highlight></codeline>
<codeline lineno="5517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>-2:</highlight></codeline>
<codeline lineno="5518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-<sp/>1<sp/>&gt;<sp/>1<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;<sp/>2<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>-(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>(((((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[0])))</highlight></codeline>
<codeline lineno="5521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-<sp/>1<sp/>&gt;<sp/>2<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(((int)-1)*(((((int)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)digits[0])));</highlight></codeline>
<codeline lineno="5523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="5527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>&gt;<sp/>1<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;<sp/>2<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>(((((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[0])))</highlight></codeline>
<codeline lineno="5530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-<sp/>1<sp/>&gt;<sp/>2<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>((((((int)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)digits[0])));</highlight></codeline>
<codeline lineno="5532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>-3:</highlight></codeline>
<codeline lineno="5536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-<sp/>1<sp/>&gt;<sp/>2<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;<sp/>3<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>-(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>(((((((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[0])))</highlight></codeline>
<codeline lineno="5539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-<sp/>1<sp/>&gt;<sp/>3<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(((int)-1)*(((((((int)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(int)digits[0])));</highlight></codeline>
<codeline lineno="5541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="5545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>&gt;<sp/>2<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;<sp/>3<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>(((((((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[0])))</highlight></codeline>
<codeline lineno="5548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-<sp/>1<sp/>&gt;<sp/>3<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>((((((((int)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(int)digits[0])));</highlight></codeline>
<codeline lineno="5550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>-4:</highlight></codeline>
<codeline lineno="5554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-<sp/>1<sp/>&gt;<sp/>3<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;<sp/>4<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>-(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>(((((((((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[3])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[0])))</highlight></codeline>
<codeline lineno="5557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-<sp/>1<sp/>&gt;<sp/>4<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>(((int)-1)*(((((((((int)digits[3])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(int)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)digits[0])));</highlight></codeline>
<codeline lineno="5559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="5563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>&gt;<sp/>3<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)<sp/>&gt;<sp/>4<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>(((((((((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[3])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)digits[0])))</highlight></codeline>
<codeline lineno="5566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-<sp/>1<sp/>&gt;<sp/>4<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="5567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>((((((((((int)digits[3])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(int)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)digits[0])));</highlight></codeline>
<codeline lineno="5568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5572"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(long))<sp/>{</highlight></codeline>
<codeline lineno="5574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT_EXC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>PyLong_AsLong(x))</highlight></codeline>
<codeline lineno="5575"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_LONG_LONG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(PY_LONG_LONG))<sp/>{</highlight></codeline>
<codeline lineno="5577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PYX_VERIFY_RETURN_INT_EXC(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>PY_LONG_LONG,<sp/>PyLong_AsLongLong(x))</highlight></codeline>
<codeline lineno="5578"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5582"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_PYPY<sp/>&amp;&amp;<sp/>!defined(_PyLong_AsByteArray)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_RuntimeError,</highlight></codeline>
<codeline lineno="5584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;_PyLong_AsByteArray()<sp/>not<sp/>available<sp/>in<sp/>PyPy,<sp/>cannot<sp/>convert<sp/>large<sp/>numbers&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5585"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="5587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*v<sp/>=<sp/>__Pyx_PyNumber_IntOrLong(x);</highlight></codeline>
<codeline lineno="5588"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/>#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(v)<sp/>&amp;&amp;<sp/>!PyLong_Check(v))<sp/>{</highlight></codeline>
<codeline lineno="5590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*tmp<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="5591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>PyNumber_Long(tmp);</highlight></codeline>
<codeline lineno="5592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(tmp);</highlight></codeline>
<codeline lineno="5593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5594"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(v))<sp/>{</highlight></codeline>
<codeline lineno="5596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>one<sp/>=<sp/>1;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_little<sp/>=<sp/>(int)*(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;one;</highlight></codeline>
<codeline lineno="5597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bytes<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;val;</highlight></codeline>
<codeline lineno="5598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>_PyLong_AsByteArray((PyLongObject<sp/>*)v,</highlight></codeline>
<codeline lineno="5599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(val),</highlight></codeline>
<codeline lineno="5600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_little,<sp/>!is_unsigned);</highlight></codeline>
<codeline lineno="5601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(v);</highlight></codeline>
<codeline lineno="5602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(!ret))</highlight></codeline>
<codeline lineno="5603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="5604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5605"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-1;</highlight></codeline>
<codeline lineno="5607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5608"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="5610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*tmp<sp/>=<sp/>__Pyx_PyNumber_IntOrLong(x);</highlight></codeline>
<codeline lineno="5611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tmp)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-1;</highlight></codeline>
<codeline lineno="5612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>__Pyx_PyInt_As_int(tmp);</highlight></codeline>
<codeline lineno="5613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(tmp);</highlight></codeline>
<codeline lineno="5614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="5615"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5616"><highlight class="normal">raise_overflow:</highlight></codeline>
<codeline lineno="5617"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_OverflowError,</highlight></codeline>
<codeline lineno="5618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;value<sp/>too<sp/>large<sp/>to<sp/>convert<sp/>to<sp/>int&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-1;</highlight></codeline>
<codeline lineno="5620"><highlight class="normal">raise_neg_overflow:</highlight></codeline>
<codeline lineno="5621"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_OverflowError,</highlight></codeline>
<codeline lineno="5622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;can&apos;t<sp/>convert<sp/>negative<sp/>value<sp/>to<sp/>int&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-1;</highlight></codeline>
<codeline lineno="5624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5625"><highlight class="normal"></highlight></codeline>
<codeline lineno="5626"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>FastTypeChecks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5627"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_COMPILING_IN_CPYTHON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5628"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_InBases(PyTypeObject<sp/>*a,<sp/>PyTypeObject<sp/>*b)<sp/>{</highlight></codeline>
<codeline lineno="5629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(a)<sp/>{</highlight></codeline>
<codeline lineno="5630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>a-&gt;tp_base;</highlight></codeline>
<codeline lineno="5631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>==<sp/>b)</highlight></codeline>
<codeline lineno="5632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="5633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b<sp/>==<sp/>&amp;PyBaseObject_Type;</highlight></codeline>
<codeline lineno="5635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5636"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_IsSubtype(PyTypeObject<sp/>*a,<sp/>PyTypeObject<sp/>*b)<sp/>{</highlight></codeline>
<codeline lineno="5637"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*mro;</highlight></codeline>
<codeline lineno="5638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>==<sp/>b)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="5639"><highlight class="normal"><sp/><sp/><sp/><sp/>mro<sp/>=<sp/>a-&gt;tp_mro;</highlight></codeline>
<codeline lineno="5640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(mro))<sp/>{</highlight></codeline>
<codeline lineno="5641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>i,<sp/>n;</highlight></codeline>
<codeline lineno="5642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>PyTuple_GET_SIZE(mro);</highlight></codeline>
<codeline lineno="5643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyTuple_GET_ITEM(mro,<sp/>i)<sp/>==<sp/>(PyObject<sp/>*)b)</highlight></codeline>
<codeline lineno="5645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="5646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5648"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_InBases(a,<sp/>b);</highlight></codeline>
<codeline lineno="5650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5651"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>==<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5652"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_inner_PyErr_GivenExceptionMatches2(PyObject<sp/>*err,<sp/>PyObject*<sp/>exc_type1,<sp/>PyObject*<sp/>exc_type2)<sp/>{</highlight></codeline>
<codeline lineno="5653"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*exception,<sp/>*value,<sp/>*tb;</highlight></codeline>
<codeline lineno="5654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="5655"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_PyThreadState_declare</highlight></codeline>
<codeline lineno="5656"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_PyThreadState_assign</highlight></codeline>
<codeline lineno="5657"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_ErrFetch(&amp;exception,<sp/>&amp;value,<sp/>&amp;tb);</highlight></codeline>
<codeline lineno="5658"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>exc_type1<sp/>?<sp/>PyObject_IsSubclass(err,<sp/>exc_type1)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="5659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(res<sp/>==<sp/>-1))<sp/>{</highlight></codeline>
<codeline lineno="5660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_WriteUnraisable(err);</highlight></codeline>
<codeline lineno="5661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5662"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!res)<sp/>{</highlight></codeline>
<codeline lineno="5664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>PyObject_IsSubclass(err,<sp/>exc_type2);</highlight></codeline>
<codeline lineno="5665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(res<sp/>==<sp/>-1))<sp/>{</highlight></codeline>
<codeline lineno="5666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_WriteUnraisable(err);</highlight></codeline>
<codeline lineno="5667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5669"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5670"><highlight class="normal"><sp/><sp/><sp/><sp/>__Pyx_ErrRestore(exception,<sp/>value,<sp/>tb);</highlight></codeline>
<codeline lineno="5671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="5672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5673"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5674"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_inner_PyErr_GivenExceptionMatches2(PyObject<sp/>*err,<sp/>PyObject*<sp/>exc_type1,<sp/>PyObject<sp/>*exc_type2)<sp/>{</highlight></codeline>
<codeline lineno="5675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>exc_type1<sp/>?<sp/>__Pyx_IsSubtype((PyTypeObject*)err,<sp/>(PyTypeObject*)exc_type1)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="5676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!res)<sp/>{</highlight></codeline>
<codeline lineno="5677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>__Pyx_IsSubtype((PyTypeObject*)err,<sp/>(PyTypeObject*)exc_type2);</highlight></codeline>
<codeline lineno="5678"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="5680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5681"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5682"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_PyErr_GivenExceptionMatchesTuple(PyObject<sp/>*exc_type,<sp/>PyObject<sp/>*tuple)<sp/>{</highlight></codeline>
<codeline lineno="5683"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>i,<sp/>n;</highlight></codeline>
<codeline lineno="5684"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(PyExceptionClass_Check(exc_type));</highlight></codeline>
<codeline lineno="5685"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>PyTuple_GET_SIZE(tuple);</highlight></codeline>
<codeline lineno="5686"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exc_type<sp/>==<sp/>PyTuple_GET_ITEM(tuple,<sp/>i))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="5689"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5690"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyObject<sp/>*t<sp/>=<sp/>PyTuple_GET_ITEM(tuple,<sp/>i);</highlight></codeline>
<codeline lineno="5693"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(exc_type<sp/>==<sp/>t))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="5695"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(PyExceptionClass_Check(t)))<sp/>{</highlight></codeline>
<codeline lineno="5697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type,<sp/>NULL,<sp/>t))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="5698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5700"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5702"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5703"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_PyErr_GivenExceptionMatches(PyObject<sp/>*err,<sp/>PyObject*<sp/>exc_type)<sp/>{</highlight></codeline>
<codeline lineno="5704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(err<sp/>==<sp/>exc_type))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="5705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(PyExceptionClass_Check(err)))<sp/>{</highlight></codeline>
<codeline lineno="5706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(PyExceptionClass_Check(exc_type)))<sp/>{</highlight></codeline>
<codeline lineno="5707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_inner_PyErr_GivenExceptionMatches2(err,<sp/>NULL,<sp/>exc_type);</highlight></codeline>
<codeline lineno="5708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(PyTuple_Check(exc_type)))<sp/>{</highlight></codeline>
<codeline lineno="5709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_PyErr_GivenExceptionMatchesTuple(err,<sp/>exc_type);</highlight></codeline>
<codeline lineno="5710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5712"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyErr_GivenExceptionMatches(err,<sp/>exc_type);</highlight></codeline>
<codeline lineno="5714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5715"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_PyErr_GivenExceptionMatches2(PyObject<sp/>*err,<sp/>PyObject<sp/>*exc_type1,<sp/>PyObject<sp/>*exc_type2)<sp/>{</highlight></codeline>
<codeline lineno="5716"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(PyExceptionClass_Check(exc_type1));</highlight></codeline>
<codeline lineno="5717"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(PyExceptionClass_Check(exc_type2));</highlight></codeline>
<codeline lineno="5718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(err<sp/>==<sp/>exc_type1<sp/>||<sp/>err<sp/>==<sp/>exc_type2))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="5719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(PyExceptionClass_Check(err)))<sp/>{</highlight></codeline>
<codeline lineno="5720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_inner_PyErr_GivenExceptionMatches2(err,<sp/>exc_type1,<sp/>exc_type2);</highlight></codeline>
<codeline lineno="5721"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(PyErr_GivenExceptionMatches(err,<sp/>exc_type1)<sp/>||<sp/>PyErr_GivenExceptionMatches(err,<sp/>exc_type2));</highlight></codeline>
<codeline lineno="5723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5724"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5725"><highlight class="normal"></highlight></codeline>
<codeline lineno="5726"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CheckBinaryVersion<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5727"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_check_binary_version(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ctversion[5];</highlight></codeline>
<codeline lineno="5729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>same=1,<sp/>i,<sp/>found_dot;</highlight></codeline>
<codeline lineno="5730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rt_from_call<sp/>=<sp/>Py_GetVersion();</highlight></codeline>
<codeline lineno="5731"><highlight class="normal"><sp/><sp/><sp/><sp/>PyOS_snprintf(ctversion,<sp/>5,<sp/></highlight><highlight class="stringliteral">&quot;%d.%d&quot;</highlight><highlight class="normal">,<sp/>PY_MAJOR_VERSION,<sp/>PY_MINOR_VERSION);</highlight></codeline>
<codeline lineno="5732"><highlight class="normal"><sp/><sp/><sp/><sp/>found_dot<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ctversion[i])<sp/>{</highlight></codeline>
<codeline lineno="5735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>same<sp/>=<sp/>(rt_from_call[i]<sp/>&lt;<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>||<sp/>rt_from_call[i]<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rt_from_call[i]<sp/>!=<sp/>ctversion[i])<sp/>{</highlight></codeline>
<codeline lineno="5739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>same<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!same)<sp/>{</highlight></codeline>
<codeline lineno="5744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>rtversion[5]<sp/>=<sp/>{</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>message[200];</highlight></codeline>
<codeline lineno="5746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rt_from_call[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found_dot)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found_dot<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rt_from_call[i]<sp/>&lt;<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>||<sp/>rt_from_call[i]<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rtversion[i]<sp/>=<sp/>rt_from_call[i];</highlight></codeline>
<codeline lineno="5754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyOS_snprintf(message,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(message),</highlight></codeline>
<codeline lineno="5756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;compiletime<sp/>version<sp/>%s<sp/>of<sp/>module<sp/>&apos;%.100s&apos;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;does<sp/>not<sp/>match<sp/>runtime<sp/>version<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctversion,<sp/>__Pyx_MODULE_NAME,<sp/>rtversion);</highlight></codeline>
<codeline lineno="5759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyErr_WarnEx(NULL,<sp/>message,<sp/>1);</highlight></codeline>
<codeline lineno="5760"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5762"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5763"><highlight class="normal"></highlight></codeline>
<codeline lineno="5764"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>FunctionImport<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5765"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__PYX_HAVE_RT_ImportFunction_0_29_36</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5766"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PYX_HAVE_RT_ImportFunction_0_29_36</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5767"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_ImportFunction_0_29_36(PyObject<sp/>*module,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*funcname,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(**f)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig)<sp/>{</highlight></codeline>
<codeline lineno="5768"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*d<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5769"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*cobj<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(*fp)(void);</highlight></codeline>
<codeline lineno="5772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="5773"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>tmp;</highlight></codeline>
<codeline lineno="5774"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>PyObject_GetAttrString(module,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)</highlight><highlight class="stringliteral">&quot;__pyx_capi__&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!d)</highlight></codeline>
<codeline lineno="5776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="5777"><highlight class="normal"><sp/><sp/><sp/><sp/>cobj<sp/>=<sp/>PyDict_GetItemString(d,<sp/>funcname);</highlight></codeline>
<codeline lineno="5778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cobj)<sp/>{</highlight></codeline>
<codeline lineno="5779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_ImportError,</highlight></codeline>
<codeline lineno="5780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%.200s<sp/>does<sp/>not<sp/>export<sp/>expected<sp/>C<sp/>function<sp/>%.200s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyModule_GetName(module),<sp/>funcname);</highlight></codeline>
<codeline lineno="5782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="5783"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5784"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_VERSION_HEX<sp/>&gt;=<sp/>0x02070000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyCapsule_IsValid(cobj,<sp/>sig))<sp/>{</highlight></codeline>
<codeline lineno="5786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_TypeError,</highlight></codeline>
<codeline lineno="5787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;C<sp/>function<sp/>%.200s.%.200s<sp/>has<sp/>wrong<sp/>signature<sp/>(expected<sp/>%.500s,<sp/>got<sp/>%.500s)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyModule_GetName(module),<sp/>funcname,<sp/>sig,<sp/>PyCapsule_GetName(cobj));</highlight></codeline>
<codeline lineno="5789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="5790"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5791"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.p<sp/>=<sp/>PyCapsule_GetPointer(cobj,<sp/>sig);</highlight></codeline>
<codeline lineno="5792"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5793"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*desc,<sp/>*s1,<sp/>*s2;</highlight></codeline>
<codeline lineno="5794"><highlight class="normal"><sp/><sp/><sp/><sp/>desc<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)PyCObject_GetDesc(cobj);</highlight></codeline>
<codeline lineno="5795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!desc)</highlight></codeline>
<codeline lineno="5796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="5797"><highlight class="normal"><sp/><sp/><sp/><sp/>s1<sp/>=<sp/>desc;<sp/>s2<sp/>=<sp/>sig;</highlight></codeline>
<codeline lineno="5798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*s1<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*s1<sp/>==<sp/>*s2)<sp/>{<sp/>s1++;<sp/>s2++;<sp/>}</highlight></codeline>
<codeline lineno="5799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s1<sp/>!=<sp/>*s2)<sp/>{</highlight></codeline>
<codeline lineno="5800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_TypeError,</highlight></codeline>
<codeline lineno="5801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;C<sp/>function<sp/>%.200s.%.200s<sp/>has<sp/>wrong<sp/>signature<sp/>(expected<sp/>%.500s,<sp/>got<sp/>%.500s)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyModule_GetName(module),<sp/>funcname,<sp/>sig,<sp/>desc);</highlight></codeline>
<codeline lineno="5803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="5804"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5805"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.p<sp/>=<sp/>PyCObject_AsVoidPtr(cobj);}</highlight></codeline>
<codeline lineno="5806"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5807"><highlight class="normal"><sp/><sp/><sp/><sp/>*f<sp/>=<sp/>tmp.fp;</highlight></codeline>
<codeline lineno="5808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(*f))</highlight></codeline>
<codeline lineno="5809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>bad;</highlight></codeline>
<codeline lineno="5810"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_DECREF(d);</highlight></codeline>
<codeline lineno="5811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5812"><highlight class="normal">bad:</highlight></codeline>
<codeline lineno="5813"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_XDECREF(d);</highlight></codeline>
<codeline lineno="5814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="5815"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5816"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5817"><highlight class="normal"></highlight></codeline>
<codeline lineno="5818"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>InitStrings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5819"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_InitStrings(__Pyx_StringTabEntry<sp/>*t)<sp/>{</highlight></codeline>
<codeline lineno="5820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(t-&gt;p)<sp/>{</highlight></codeline>
<codeline lineno="5821"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t-&gt;is_unicode)<sp/>{</highlight></codeline>
<codeline lineno="5823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*t-&gt;p<sp/>=<sp/>PyUnicode_DecodeUTF8(t-&gt;s,<sp/>t-&gt;n<sp/>-<sp/>1,<sp/>NULL);</highlight></codeline>
<codeline lineno="5824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t-&gt;intern)<sp/>{</highlight></codeline>
<codeline lineno="5825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*t-&gt;p<sp/>=<sp/>PyString_InternFromString(t-&gt;s);</highlight></codeline>
<codeline lineno="5826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*t-&gt;p<sp/>=<sp/>PyString_FromStringAndSize(t-&gt;s,<sp/>t-&gt;n<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="5828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5829"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t-&gt;is_unicode<sp/>|<sp/>t-&gt;is_str)<sp/>{</highlight></codeline>
<codeline lineno="5831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t-&gt;intern)<sp/>{</highlight></codeline>
<codeline lineno="5832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*t-&gt;p<sp/>=<sp/>PyUnicode_InternFromString(t-&gt;s);</highlight></codeline>
<codeline lineno="5833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t-&gt;encoding)<sp/>{</highlight></codeline>
<codeline lineno="5834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*t-&gt;p<sp/>=<sp/>PyUnicode_Decode(t-&gt;s,<sp/>t-&gt;n<sp/>-<sp/>1,<sp/>t-&gt;encoding,<sp/>NULL);</highlight></codeline>
<codeline lineno="5835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*t-&gt;p<sp/>=<sp/>PyUnicode_FromStringAndSize(t-&gt;s,<sp/>t-&gt;n<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="5837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*t-&gt;p<sp/>=<sp/>PyBytes_FromStringAndSize(t-&gt;s,<sp/>t-&gt;n<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="5840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5841"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*t-&gt;p)</highlight></codeline>
<codeline lineno="5843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="5844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyObject_Hash(*t-&gt;p)<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="5845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="5846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++t;</highlight></codeline>
<codeline lineno="5847"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5850"><highlight class="normal"></highlight></codeline>
<codeline lineno="5851"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyObject*<sp/>__Pyx_PyUnicode_FromString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c_str)<sp/>{</highlight></codeline>
<codeline lineno="5852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_PyUnicode_FromStringAndSize(c_str,<sp/>(Py_ssize_t)strlen(c_str));</highlight></codeline>
<codeline lineno="5853"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5854"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>__Pyx_PyObject_AsString(PyObject*<sp/>o)<sp/>{</highlight></codeline>
<codeline lineno="5855"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>ignore;</highlight></codeline>
<codeline lineno="5856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_PyObject_AsStringAndSize(o,<sp/>&amp;ignore);</highlight></codeline>
<codeline lineno="5857"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5858"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__PYX_DEFAULT_STRING_ENCODING_IS_ASCII<sp/>||<sp/>__PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5859"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!CYTHON_PEP393_ENABLED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5860"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>__Pyx_PyUnicode_AsStringAndSize(PyObject*<sp/>o,<sp/>Py_ssize_t<sp/>*length)<sp/>{</highlight></codeline>
<codeline lineno="5861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>defenc_c;</highlight></codeline>
<codeline lineno="5862"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject*<sp/>defenc<sp/>=<sp/>_PyUnicode_AsDefaultEncodedString(o,<sp/>NULL);</highlight></codeline>
<codeline lineno="5863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!defenc)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5864"><highlight class="normal"><sp/><sp/><sp/><sp/>defenc_c<sp/>=<sp/>PyBytes_AS_STRING(defenc);</highlight></codeline>
<codeline lineno="5865"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__PYX_DEFAULT_STRING_ENCODING_IS_ASCII</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5866"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>end<sp/>=<sp/>defenc_c<sp/>+<sp/>PyBytes_GET_SIZE(defenc);</highlight></codeline>
<codeline lineno="5868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c;</highlight></codeline>
<codeline lineno="5869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(c<sp/>=<sp/>defenc_c;<sp/>c<sp/>&lt;<sp/>end;<sp/>c++)<sp/>{</highlight></codeline>
<codeline lineno="5870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>(*c)<sp/>&gt;=<sp/>128)<sp/>{</highlight></codeline>
<codeline lineno="5871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyUnicode_AsASCIIString(o);</highlight></codeline>
<codeline lineno="5872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5875"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5876"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5877"><highlight class="normal"><sp/><sp/><sp/><sp/>*length<sp/>=<sp/>PyBytes_GET_SIZE(defenc);</highlight></codeline>
<codeline lineno="5878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>defenc_c;</highlight></codeline>
<codeline lineno="5879"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5880"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5881"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>__Pyx_PyUnicode_AsStringAndSize(PyObject*<sp/>o,<sp/>Py_ssize_t<sp/>*length)<sp/>{</highlight></codeline>
<codeline lineno="5882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(__Pyx_PyUnicode_READY(o)<sp/>==<sp/>-1))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5883"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__PYX_DEFAULT_STRING_ENCODING_IS_ASCII</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(PyUnicode_IS_ASCII(o)))<sp/>{</highlight></codeline>
<codeline lineno="5885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*length<sp/>=<sp/>PyUnicode_GET_LENGTH(o);</highlight></codeline>
<codeline lineno="5886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyUnicode_AsUTF8(o);</highlight></codeline>
<codeline lineno="5887"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyUnicode_AsASCIIString(o);</highlight></codeline>
<codeline lineno="5889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5890"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5891"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyUnicode_AsUTF8AndSize(o,<sp/>length);</highlight></codeline>
<codeline lineno="5893"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5894"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5895"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5896"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5897"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>__Pyx_PyObject_AsStringAndSize(PyObject*<sp/>o,<sp/>Py_ssize_t<sp/>*length)<sp/>{</highlight></codeline>
<codeline lineno="5898"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__PYX_DEFAULT_STRING_ENCODING_IS_ASCII<sp/>||<sp/>__PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="5900"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3<sp/>&amp;&amp;<sp/>__PYX_DEFAULT_STRING_ENCODING_IS_ASCII</highlight></codeline>
<codeline lineno="5901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__Pyx_sys_getdefaultencoding_not_ascii<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5902"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="5903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyUnicode_Check(o))<sp/>{</highlight></codeline>
<codeline lineno="5904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_PyUnicode_AsStringAndSize(o,<sp/>length);</highlight></codeline>
<codeline lineno="5905"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5906"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5907"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!CYTHON_COMPILING_IN_PYPY)<sp/>||<sp/>(defined(PyByteArray_AS_STRING)<sp/>&amp;&amp;<sp/>defined(PyByteArray_GET_SIZE))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyByteArray_Check(o))<sp/>{</highlight></codeline>
<codeline lineno="5909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*length<sp/>=<sp/>PyByteArray_GET_SIZE(o);</highlight></codeline>
<codeline lineno="5910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyByteArray_AS_STRING(o);</highlight></codeline>
<codeline lineno="5911"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5912"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5913"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>result;</highlight></codeline>
<codeline lineno="5915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>PyBytes_AsStringAndSize(o,<sp/>&amp;result,<sp/>length);</highlight></codeline>
<codeline lineno="5916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(r<sp/>&lt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="5917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5921"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5922"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5923"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_PyObject_IsTrue(PyObject*<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="5924"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is_true<sp/>=<sp/>x<sp/>==<sp/>Py_True;</highlight></codeline>
<codeline lineno="5925"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_true<sp/>|<sp/>(x<sp/>==<sp/>Py_False)<sp/>|<sp/>(x<sp/>==<sp/>Py_None))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_true;</highlight></codeline>
<codeline lineno="5926"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyObject_IsTrue(x);</highlight></codeline>
<codeline lineno="5927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5928"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__Pyx_PyObject_IsTrueAndDecref(PyObject*<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="5929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="5930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!x))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="5931"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>__Pyx_PyObject_IsTrue(x);</highlight></codeline>
<codeline lineno="5932"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_DECREF(x);</highlight></codeline>
<codeline lineno="5933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retval;</highlight></codeline>
<codeline lineno="5934"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5935"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PyObject*<sp/>__Pyx_PyNumber_IntOrLongWrongResultType(PyObject*<sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>type_name)<sp/>{</highlight></codeline>
<codeline lineno="5936"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&gt;=<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyLong_Check(result))<sp/>{</highlight></codeline>
<codeline lineno="5938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PyErr_WarnFormat(PyExc_DeprecationWarning,<sp/>1,</highlight></codeline>
<codeline lineno="5939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;__int__<sp/>returned<sp/>non-int<sp/>(type<sp/>%.200s).<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;The<sp/>ability<sp/>to<sp/>return<sp/>an<sp/>instance<sp/>of<sp/>a<sp/>strict<sp/>subclass<sp/>of<sp/>int<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;is<sp/>deprecated,<sp/>and<sp/>may<sp/>be<sp/>removed<sp/>in<sp/>a<sp/>future<sp/>version<sp/>of<sp/>Python.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_TYPE(result)-&gt;tp_name))<sp/>{</highlight></codeline>
<codeline lineno="5943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Py_DECREF(result);</highlight></codeline>
<codeline lineno="5944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5947"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5948"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5949"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_Format(PyExc_TypeError,</highlight></codeline>
<codeline lineno="5950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;__%.4s__<sp/>returned<sp/>non-%.4s<sp/>(type<sp/>%.200s)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_name,<sp/>type_name,<sp/>Py_TYPE(result)-&gt;tp_name);</highlight></codeline>
<codeline lineno="5952"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_DECREF(result);</highlight></codeline>
<codeline lineno="5953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="5954"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5955"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyObject*<sp/>__Pyx_PyNumber_IntOrLong(PyObject*<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="5956"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_USE_TYPE_SLOTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5957"><highlight class="normal"><sp/><sp/>PyNumberMethods<sp/>*m;</highlight></codeline>
<codeline lineno="5958"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5960"><highlight class="normal"><sp/><sp/>PyObject<sp/>*res<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5961"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(PyInt_Check(x)<sp/>||<sp/>PyLong_Check(x)))</highlight></codeline>
<codeline lineno="5963"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(PyLong_Check(x)))</highlight></codeline>
<codeline lineno="5965"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_NewRef(x);</highlight></codeline>
<codeline lineno="5967"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>CYTHON_USE_TYPE_SLOTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5968"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>Py_TYPE(x)-&gt;tp_as_number;</highlight></codeline>
<codeline lineno="5969"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&amp;&amp;<sp/>m-&gt;nb_int)<sp/>{</highlight></codeline>
<codeline lineno="5971"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5972"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>m-&gt;nb_int(x);</highlight></codeline>
<codeline lineno="5973"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&amp;&amp;<sp/>m-&gt;nb_long)<sp/>{</highlight></codeline>
<codeline lineno="5975"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;long&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5976"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>m-&gt;nb_long(x);</highlight></codeline>
<codeline lineno="5977"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5978"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5979"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(m<sp/>&amp;&amp;<sp/>m-&gt;nb_int))<sp/>{</highlight></codeline>
<codeline lineno="5980"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5981"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>m-&gt;nb_int(x);</highlight></codeline>
<codeline lineno="5982"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5983"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5984"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyBytes_CheckExact(x)<sp/>&amp;&amp;<sp/>!PyUnicode_CheckExact(x))<sp/>{</highlight></codeline>
<codeline lineno="5986"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>PyNumber_Int(x);</highlight></codeline>
<codeline lineno="5987"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5988"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(res))<sp/>{</highlight></codeline>
<codeline lineno="5990"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!PyInt_Check(res)<sp/>&amp;&amp;<sp/>!PyLong_Check(res)))<sp/>{</highlight></codeline>
<codeline lineno="5992"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unlikely(!PyLong_CheckExact(res)))<sp/>{</highlight></codeline>
<codeline lineno="5994"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__Pyx_PyNumber_IntOrLongWrongResultType(res,<sp/>name);</highlight></codeline>
<codeline lineno="5996"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5997"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5998"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PyErr_Occurred())<sp/>{</highlight></codeline>
<codeline lineno="5999"><highlight class="normal"><sp/><sp/><sp/><sp/>PyErr_SetString(PyExc_TypeError,</highlight></codeline>
<codeline lineno="6000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;an<sp/>integer<sp/>is<sp/>required&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6001"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6002"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="6003"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6004"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>Py_ssize_t<sp/>__Pyx_PyIndex_AsSsize_t(PyObject*<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="6005"><highlight class="normal"><sp/><sp/>Py_ssize_t<sp/>ival;</highlight></codeline>
<codeline lineno="6006"><highlight class="normal"><sp/><sp/>PyObject<sp/>*x;</highlight></codeline>
<codeline lineno="6007"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(PyInt_CheckExact(b)))<sp/>{</highlight></codeline>
<codeline lineno="6009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Py_ssize_t)<sp/>&gt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="6010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyInt_AS_LONG(b);</highlight></codeline>
<codeline lineno="6011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyInt_AsSsize_t(b);</highlight></codeline>
<codeline lineno="6013"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6014"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(PyLong_CheckExact(b)))<sp/>{</highlight></codeline>
<codeline lineno="6016"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>CYTHON_USE_PYLONG_INTERNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>digit*<sp/>digits<sp/>=<sp/>((PyLongObject*)b)-&gt;ob_digit;</highlight></codeline>
<codeline lineno="6018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Py_ssize_t<sp/>size<sp/>=<sp/>Py_SIZE(b);</highlight></codeline>
<codeline lineno="6019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(__Pyx_sst_abs(size)<sp/>&lt;=<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="6020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ival<sp/>=<sp/>likely(size)<sp/>?<sp/>digits[0]<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="6021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>-1)<sp/>ival<sp/>=<sp/>-ival;</highlight></codeline>
<codeline lineno="6022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ival;</highlight></codeline>
<codeline lineno="6023"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(size)<sp/>{</highlight></codeline>
<codeline lineno="6025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="6026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Py_ssize_t)<sp/>&gt;<sp/>2<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="6027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Py_ssize_t)<sp/>(((((size_t)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)digits[0]));</highlight></codeline>
<codeline lineno="6028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>-2:</highlight></codeline>
<codeline lineno="6031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Py_ssize_t)<sp/>&gt;<sp/>2<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="6032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(Py_ssize_t)<sp/>(((((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(size_t)digits[0]));</highlight></codeline>
<codeline lineno="6033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="6036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Py_ssize_t)<sp/>&gt;<sp/>3<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="6037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Py_ssize_t)<sp/>(((((((size_t)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(size_t)digits[0]));</highlight></codeline>
<codeline lineno="6038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>-3:</highlight></codeline>
<codeline lineno="6041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Py_ssize_t)<sp/>&gt;<sp/>3<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="6042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(Py_ssize_t)<sp/>(((((((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(size_t)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)digits[0]));</highlight></codeline>
<codeline lineno="6043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="6046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Py_ssize_t)<sp/>&gt;<sp/>4<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="6047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Py_ssize_t)<sp/>(((((((((size_t)digits[3])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(size_t)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)digits[0]));</highlight></codeline>
<codeline lineno="6048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>-4:</highlight></codeline>
<codeline lineno="6051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Py_ssize_t)<sp/>&gt;<sp/>4<sp/>*<sp/>PyLong_SHIFT)<sp/>{</highlight></codeline>
<codeline lineno="6052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(Py_ssize_t)<sp/>(((((((((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)digits[3])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(size_t)digits[2])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)digits[1])<sp/>&lt;&lt;<sp/>PyLong_SHIFT)<sp/>|<sp/>(size_t)digits[0]));</highlight></codeline>
<codeline lineno="6053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6056"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6057"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyLong_AsSsize_t(b);</highlight></codeline>
<codeline lineno="6059"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6060"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>PyNumber_Index(b);</highlight></codeline>
<codeline lineno="6061"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!x)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="6062"><highlight class="normal"><sp/><sp/>ival<sp/>=<sp/>PyInt_AsSsize_t(x);</highlight></codeline>
<codeline lineno="6063"><highlight class="normal"><sp/><sp/>Py_DECREF(x);</highlight></codeline>
<codeline lineno="6064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ival;</highlight></codeline>
<codeline lineno="6065"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6066"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>Py_hash_t<sp/>__Pyx_PyIndex_AsHash_t(PyObject*<sp/>o)<sp/>{</highlight></codeline>
<codeline lineno="6067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Py_hash_t)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Py_ssize_t))<sp/>{</highlight></codeline>
<codeline lineno="6068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Py_hash_t)<sp/>__Pyx_PyIndex_AsSsize_t(o);</highlight></codeline>
<codeline lineno="6069"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PY_MAJOR_VERSION<sp/>&lt;<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6070"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(likely(PyInt_CheckExact(o)))<sp/>{</highlight></codeline>
<codeline lineno="6071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyInt_AS_LONG(o);</highlight></codeline>
<codeline lineno="6072"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6073"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6074"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_ssize_t<sp/>ival;</highlight></codeline>
<codeline lineno="6075"><highlight class="normal"><sp/><sp/><sp/><sp/>PyObject<sp/>*x;</highlight></codeline>
<codeline lineno="6076"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>PyNumber_Index(o);</highlight></codeline>
<codeline lineno="6077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!x)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="6078"><highlight class="normal"><sp/><sp/><sp/><sp/>ival<sp/>=<sp/>PyInt_AsLong(x);</highlight></codeline>
<codeline lineno="6079"><highlight class="normal"><sp/><sp/><sp/><sp/>Py_DECREF(x);</highlight></codeline>
<codeline lineno="6080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ival;</highlight></codeline>
<codeline lineno="6081"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6082"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6083"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyObject<sp/>*<sp/>__Pyx_PyBool_FromLong(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="6084"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b<sp/>?<sp/>__Pyx_NewRef(Py_True)<sp/>:<sp/>__Pyx_NewRef(Py_False);</highlight></codeline>
<codeline lineno="6085"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6086"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CYTHON_INLINE<sp/>PyObject<sp/>*<sp/>__Pyx_PyInt_FromSize_t(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ival)<sp/>{</highlight></codeline>
<codeline lineno="6087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PyInt_FromSize_t(ival);</highlight></codeline>
<codeline lineno="6088"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6089"><highlight class="normal"></highlight></codeline>
<codeline lineno="6090"><highlight class="normal"></highlight></codeline>
<codeline lineno="6091"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>Py_PYTHON_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/home/sia/work/github/imate/imate/logdet/_slq_method.cpp"/>
  </compounddef>
</doxygen>
