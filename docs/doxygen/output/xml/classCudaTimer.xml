<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classCudaTimer" kind="class" language="C++" prot="public">
    <compoundname>CudaTimer</compoundname>
    <includes refid="cuda__timer_8h" local="no">cuda_timer.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classCudaTimer_1adee1927c98d5463b563d8e350158eac0" prot="protected" static="no" mutable="no">
        <type>cudaEvent_t</type>
        <definition>cudaEvent_t CudaTimer::start_time</definition>
        <argsstring></argsstring>
        <name>start_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_utilities/cuda_timer.h" line="72" column="21" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_utilities/cuda_timer.h" bodystart="72" bodyend="-1"/>
        <referencedby refid="classCudaTimer_1add52b7f92343ff892346eb3f9d6f9173" compoundref="cuda__timer_8cu" startline="26" endline="30">CudaTimer</referencedby>
        <referencedby refid="classCudaTimer_1ab7853cd930e7c0500da53565d8e431d2" compoundref="cuda__timer_8cu" startline="80" endline="88">elapsed</referencedby>
        <referencedby refid="classCudaTimer_1a5db3e05cd63573015bf1a9f55cc37e32" compoundref="cuda__timer_8cu" startline="54" endline="57">start</referencedby>
        <referencedby refid="classCudaTimer_1a1399cfa1437978db51c918ef5b9eeb70" compoundref="cuda__timer_8cu" startline="40" endline="44">~CudaTimer</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classCudaTimer_1ab26d57fd0d2807646c469505a974a776" prot="protected" static="no" mutable="no">
        <type>cudaEvent_t</type>
        <definition>cudaEvent_t CudaTimer::stop_time</definition>
        <argsstring></argsstring>
        <name>stop_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_utilities/cuda_timer.h" line="73" column="21" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_utilities/cuda_timer.h" bodystart="73" bodyend="-1"/>
        <referencedby refid="classCudaTimer_1add52b7f92343ff892346eb3f9d6f9173" compoundref="cuda__timer_8cu" startline="26" endline="30">CudaTimer</referencedby>
        <referencedby refid="classCudaTimer_1ab7853cd930e7c0500da53565d8e431d2" compoundref="cuda__timer_8cu" startline="80" endline="88">elapsed</referencedby>
        <referencedby refid="classCudaTimer_1a20e3226471439fed515fdde5d6e4ce75" compoundref="cuda__timer_8cu" startline="67" endline="70">stop</referencedby>
        <referencedby refid="classCudaTimer_1a1399cfa1437978db51c918ef5b9eeb70" compoundref="cuda__timer_8cu" startline="40" endline="44">~CudaTimer</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCudaTimer_1add52b7f92343ff892346eb3f9d6f9173" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CudaTimer::CudaTimer</definition>
        <argsstring>()</argsstring>
        <name>CudaTimer</name>
        <briefdescription>
<para>constructor for <computeroutput><ref refid="classCudaTimer" kindref="compound">CudaTimer</ref></computeroutput> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_utilities/cuda_timer.h" line="65" column="9" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_utilities/cuda_timer.cu" bodystart="26" bodyend="30"/>
        <references refid="cudart__symbols_8cpp_1a320ab51604f3a7a082795202e7eaf774" compoundref="cudart__symbols_8cpp" startline="106" endline="120">cudaEventCreate</references>
        <references refid="classCudaTimer_1adee1927c98d5463b563d8e350158eac0" compoundref="cuda__timer_8h" startline="72">start_time</references>
        <references refid="classCudaTimer_1ab26d57fd0d2807646c469505a974a776" compoundref="cuda__timer_8h" startline="73">stop_time</references>
      </memberdef>
      <memberdef kind="function" id="classCudaTimer_1a1399cfa1437978db51c918ef5b9eeb70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CudaTimer::~CudaTimer</definition>
        <argsstring>()</argsstring>
        <name>~CudaTimer</name>
        <briefdescription>
<para>Destructor for <computeroutput><ref refid="classCudaTimer" kindref="compound">CudaTimer</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_utilities/cuda_timer.h" line="66" column="9" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_utilities/cuda_timer.cu" bodystart="40" bodyend="44"/>
        <references refid="cudart__symbols_8cpp_1a513a33d6c552db36be7edc5b3e9e0765" compoundref="cudart__symbols_8cpp" startline="130" endline="144">cudaEventDestroy</references>
        <references refid="classCudaTimer_1adee1927c98d5463b563d8e350158eac0" compoundref="cuda__timer_8h" startline="72">start_time</references>
        <references refid="classCudaTimer_1ab26d57fd0d2807646c469505a974a776" compoundref="cuda__timer_8h" startline="73">stop_time</references>
      </memberdef>
      <memberdef kind="function" id="classCudaTimer_1a5db3e05cd63573015bf1a9f55cc37e32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CudaTimer::start</definition>
        <argsstring>()</argsstring>
        <name>start</name>
        <briefdescription>
<para>Starts the timer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_utilities/cuda_timer.h" line="67" column="14" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_utilities/cuda_timer.cu" bodystart="54" bodyend="57"/>
        <references refid="cudart__symbols_8cpp_1aa50793c0412e7d1aa9b184c576888732" compoundref="cudart__symbols_8cpp" startline="181" endline="195">cudaEventRecord</references>
        <references refid="classCudaTimer_1adee1927c98d5463b563d8e350158eac0" compoundref="cuda__timer_8h" startline="72">start_time</references>
        <referencedby refid="classcuTraceEstimator_1aac1cf44a9dc5522d3104b2cdf3b05285" compoundref="cu__trace__estimator_8cu" startline="188" endline="305">cuTraceEstimator&lt; DataType &gt;::cu_trace_estimator</referencedby>
      </memberdef>
      <memberdef kind="function" id="classCudaTimer_1a20e3226471439fed515fdde5d6e4ce75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CudaTimer::stop</definition>
        <argsstring>()</argsstring>
        <name>stop</name>
        <briefdescription>
<para>Stops the timer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_utilities/cuda_timer.h" line="68" column="14" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_utilities/cuda_timer.cu" bodystart="67" bodyend="70"/>
        <references refid="cudart__symbols_8cpp_1aa50793c0412e7d1aa9b184c576888732" compoundref="cudart__symbols_8cpp" startline="181" endline="195">cudaEventRecord</references>
        <references refid="classCudaTimer_1ab26d57fd0d2807646c469505a974a776" compoundref="cuda__timer_8h" startline="73">stop_time</references>
        <referencedby refid="classcuTraceEstimator_1aac1cf44a9dc5522d3104b2cdf3b05285" compoundref="cu__trace__estimator_8cu" startline="188" endline="305">cuTraceEstimator&lt; DataType &gt;::cu_trace_estimator</referencedby>
      </memberdef>
      <memberdef kind="function" id="classCudaTimer_1ab7853cd930e7c0500da53565d8e431d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float CudaTimer::elapsed</definition>
        <argsstring>() const</argsstring>
        <name>elapsed</name>
        <briefdescription>
<para>Returns the elapsed time in seconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_utilities/cuda_timer.h" line="69" column="15" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_utilities/cuda_timer.cu" bodystart="80" bodyend="88"/>
        <references refid="cudart__symbols_8cpp_1a14c387cc57ce2e328f6669854e6020a5" compoundref="cudart__symbols_8cpp" startline="154" endline="171">cudaEventElapsedTime</references>
        <references refid="cudart__symbols_8cpp_1a08241bcf5c5cb686b1882a8492f1e2d9" compoundref="cudart__symbols_8cpp" startline="205" endline="219">cudaEventSynchronize</references>
        <references refid="classCudaTimer_1adee1927c98d5463b563d8e350158eac0" compoundref="cuda__timer_8h" startline="72">start_time</references>
        <references refid="classCudaTimer_1ab26d57fd0d2807646c469505a974a776" compoundref="cuda__timer_8h" startline="73">stop_time</references>
        <referencedby refid="classcuTraceEstimator_1aac1cf44a9dc5522d3104b2cdf3b05285" compoundref="cu__trace__estimator_8cu" startline="188" endline="305">cuTraceEstimator&lt; DataType &gt;::cu_trace_estimator</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Records elasped time between two CUDA events. </para>
    </briefdescription>
    <detaileddescription>
<para>The measured time is the <emphasis>wall</emphasis> time, not the <emphasis>process time</emphasis> of the GPU. In fact, the measured time the same as the wall clock time of CPU.</para>
<para><bold>Example:</bold></para>
<para>It is better to <emphasis>synchronize</emphasis> all GPU threads before reading the time. For instance: <verbatim>CudaTimer cuda_timer;
cuda_timer.start();

// Some GPU threads here.
// ...

// Note, this CudaTime measures wall time, so the sleep()
// time counts toward the measured time.
sleep(1);

// Sync threads so the CPU do not jump to the next before
// gpu threads are done.
cudaDeviceSynchronize();

cuda_timer.stop();
float elapsed_time = cuda_timer.elapsed();
</verbatim> <simplesect kind="see"><para><ref refid="classTimer" kindref="compound">Timer</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_utilities/cuda_timer.h" line="61" column="1" bodyfile="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/_cuda_utilities/cuda_timer.h" bodystart="62" bodyend="74"/>
    <listofallmembers>
      <member refid="classCudaTimer_1add52b7f92343ff892346eb3f9d6f9173" prot="public" virt="non-virtual"><scope>CudaTimer</scope><name>CudaTimer</name></member>
      <member refid="classCudaTimer_1ab7853cd930e7c0500da53565d8e431d2" prot="public" virt="non-virtual"><scope>CudaTimer</scope><name>elapsed</name></member>
      <member refid="classCudaTimer_1a5db3e05cd63573015bf1a9f55cc37e32" prot="public" virt="non-virtual"><scope>CudaTimer</scope><name>start</name></member>
      <member refid="classCudaTimer_1adee1927c98d5463b563d8e350158eac0" prot="protected" virt="non-virtual"><scope>CudaTimer</scope><name>start_time</name></member>
      <member refid="classCudaTimer_1a20e3226471439fed515fdde5d6e4ce75" prot="public" virt="non-virtual"><scope>CudaTimer</scope><name>stop</name></member>
      <member refid="classCudaTimer_1ab26d57fd0d2807646c469505a974a776" prot="protected" virt="non-virtual"><scope>CudaTimer</scope><name>stop_time</name></member>
      <member refid="classCudaTimer_1a1399cfa1437978db51c918ef5b9eeb70" prot="public" virt="non-virtual"><scope>CudaTimer</scope><name>~CudaTimer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
