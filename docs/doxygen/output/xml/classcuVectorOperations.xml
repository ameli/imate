<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classcuVectorOperations" kind="class" language="C++" prot="public">
    <compoundname>cuVectorOperations</compoundname>
    <includes refid="cu__vector__operations_8h" local="no">cu_vector_operations.h</includes>
    <templateparamlist>
      <param>
        <type>typename DataType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classcuVectorOperations_1a08467db301f35f715fb07e4ec4907406" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuVectorOperations&lt; DataType &gt;::copy_vector</definition>
        <argsstring>(cublasHandle_t cublas_handle, const DataType *input_vector, const LongIndexType vector_size, DataType *output_vector)</argsstring>
        <name>copy_vector</name>
        <param>
          <type>cublasHandle_t</type>
          <declname>cublas_handle</declname>
        </param>
        <param>
          <type>const DataType *</type>
          <declname>input_vector</declname>
        </param>
        <param>
          <type>const <ref refid="types_8h_1a4918759cb64dcead17269b3613b27d25" kindref="member">LongIndexType</ref></type>
          <declname>vector_size</declname>
        </param>
        <param>
          <type>DataType *</type>
          <declname>output_vector</declname>
        </param>
        <briefdescription>
<para>Copies a vector to a new vector. Result is written in-place. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cublas_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The cuBLAS object handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">input_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>A 1D array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">vector_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of vector array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>Output vector (written in place). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/github/imate/imate/_cu_basic_algebra/cu_vector_operations.h" line="41" column="21" bodyfile="/home/sia/work/github/imate/imate/_cu_basic_algebra/cu_vector_operations.cu" bodystart="38" bodyend="52"/>
        <references refid="namespacecublas__interface_1a7baec66eaf5a126362956ed808c8e9ce">cublas_interface::cublasXcopy</references>
      </memberdef>
      <memberdef kind="function" id="classcuVectorOperations_1a18e8a8069b986b0b559f8ac97b72a495" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuVectorOperations&lt; DataType &gt;::copy_scaled_vector</definition>
        <argsstring>(cublasHandle_t cublas_handle, const DataType *input_vector, const LongIndexType vector_size, const DataType scale, DataType *output_vector)</argsstring>
        <name>copy_scaled_vector</name>
        <param>
          <type>cublasHandle_t</type>
          <declname>cublas_handle</declname>
        </param>
        <param>
          <type>const DataType *</type>
          <declname>input_vector</declname>
        </param>
        <param>
          <type>const <ref refid="types_8h_1a4918759cb64dcead17269b3613b27d25" kindref="member">LongIndexType</ref></type>
          <declname>vector_size</declname>
        </param>
        <param>
          <type>const DataType</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>DataType *</type>
          <declname>output_vector</declname>
        </param>
        <briefdescription>
<para>Scales a vector and stores to a new vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cublas_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The cuBLAS object handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">input_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>A 1D array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">vector_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of vector array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Scale coefficient to the input vector. If this is equal to one, the function effectively becomes the same as <emphasis>copy_vector</emphasis>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>Output vector (written in place). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/github/imate/imate/_cu_basic_algebra/cu_vector_operations.h" line="48" column="21" bodyfile="/home/sia/work/github/imate/imate/_cu_basic_algebra/cu_vector_operations.cu" bodystart="73" bodyend="96"/>
        <references refid="namespacecublas__interface_1a7baec66eaf5a126362956ed808c8e9ce">cublas_interface::cublasXcopy</references>
        <references refid="namespacecublas__interface_1a373969305e12857bb6463ab630cb9b4c">cublas_interface::cublasXscal</references>
        <referencedby refid="cu__lanczos__tridiagonalization_8cu_1a30ec831ebcc2ce17eefefb770b13773d" compoundref="cu__lanczos__tridiagonalization_8cu" startline="119" endline="248">cu_lanczos_tridiagonalization</referencedby>
        <referencedby refid="classcuVectorOperations_1ace661476791a4a662aab05c9af19b94a" compoundref="cu__vector__operations_8cu" startline="273" endline="290">cuVectorOperations&lt; DataType &gt;::normalize_vector_and_copy</referencedby>
      </memberdef>
      <memberdef kind="function" id="classcuVectorOperations_1a516e90d70f99436cf48cd5b7deeb69c7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cuVectorOperations&lt; DataType &gt;::subtract_scaled_vector</definition>
        <argsstring>(cublasHandle_t cublas_handle, const DataType *input_vector, const LongIndexType vector_size, const DataType scale, DataType *output_vector)</argsstring>
        <name>subtract_scaled_vector</name>
        <param>
          <type>cublasHandle_t</type>
          <declname>cublas_handle</declname>
        </param>
        <param>
          <type>const DataType *</type>
          <declname>input_vector</declname>
        </param>
        <param>
          <type>const <ref refid="types_8h_1a4918759cb64dcead17269b3613b27d25" kindref="member">LongIndexType</ref></type>
          <declname>vector_size</declname>
        </param>
        <param>
          <type>const DataType</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>DataType *</type>
          <declname>output_vector</declname>
        </param>
        <briefdescription>
<para>Subtracts the scaled input vector from the output vector. </para>
        </briefdescription>
        <detaileddescription>
<para>Performs the following operation: <formula id="12">\[ \boldsymbol{b} = \boldsymbol{b} - c \boldsymbol{a}, \]</formula> where<itemizedlist>
<listitem><para><formula id="13">$ \boldsymbol{a} $</formula> is the input vector,</para>
</listitem><listitem><para><formula id="14">$ c $</formula> is a scalar scale to the input vector, and</para>
</listitem><listitem><para><formula id="6">$ \boldsymbol{b} $</formula> is the output vector that is written in-place.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cublas_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The cuBLAS object handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">input_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>A 1D array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">vector_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of vector array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Scale coefficient to the input vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">output_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>Output vector (written in place). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/github/imate/imate/_cu_basic_algebra/cu_vector_operations.h" line="56" column="21" bodyfile="/home/sia/work/github/imate/imate/_cu_basic_algebra/cu_vector_operations.cu" bodystart="126" bodyend="147"/>
        <references refid="namespacecublas__interface_1ae1a3b8bc292abb02f3146d71f1acc90d">cublas_interface::cublasXaxpy</references>
        <referencedby refid="classcuAffineMatrixFunction_1af0a51e03280f6700f6534a94874436c1" compoundref="cu__affine__matrix__function_8cu" startline="131" endline="144">cuAffineMatrixFunction&lt; DataType &gt;::_add_scaled_vector</referencedby>
        <referencedby refid="cu__golub__kahn__bidiagonalization_8cu_1aa755f765f48f41b63d9dab3528b5f0b2" compoundref="cu__golub__kahn__bidiagonalization_8cu" startline="113" endline="242">cu_golub_kahn_bidiagonalization</referencedby>
        <referencedby refid="cu__lanczos__tridiagonalization_8cu_1a30ec831ebcc2ce17eefefb770b13773d" compoundref="cu__lanczos__tridiagonalization_8cu" startline="119" endline="248">cu_lanczos_tridiagonalization</referencedby>
        <referencedby refid="classcuOrthogonalization_1a47d7334cf9d9b69bb2feb047d40e0a23" compoundref="cu__orthogonalization_8cu" startline="128" endline="228">cuOrthogonalization&lt; DataType &gt;::gram_schmidt_process</referencedby>
        <referencedby refid="classcuOrthogonalization_1aefd27369921be5760a998a60aca49b56" compoundref="cu__orthogonalization_8cu" startline="275" endline="400">cuOrthogonalization&lt; DataType &gt;::orthogonalize_vectors</referencedby>
      </memberdef>
      <memberdef kind="function" id="classcuVectorOperations_1a88c6373da3d2fef0dca236aef3ef1ec1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DataType</type>
        <definition>DataType cuVectorOperations&lt; DataType &gt;::inner_product</definition>
        <argsstring>(cublasHandle_t cublas_handle, const DataType *vector1, const DataType *vector2, const LongIndexType vector_size)</argsstring>
        <name>inner_product</name>
        <param>
          <type>cublasHandle_t</type>
          <declname>cublas_handle</declname>
        </param>
        <param>
          <type>const DataType *</type>
          <declname>vector1</declname>
        </param>
        <param>
          <type>const DataType *</type>
          <declname>vector2</declname>
        </param>
        <param>
          <type>const <ref refid="types_8h_1a4918759cb64dcead17269b3613b27d25" kindref="member">LongIndexType</ref></type>
          <declname>vector_size</declname>
        </param>
        <briefdescription>
<para>Computes Euclidean inner product of two vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cublas_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The cuBLAS object handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">vector1</parametername>
</parameternamelist>
<parameterdescription>
<para>1D array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">vector2</parametername>
</parameternamelist>
<parameterdescription>
<para>1D array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">vector_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Inner product of two vectors. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/github/imate/imate/_cu_basic_algebra/cu_vector_operations.h" line="64" column="25" bodyfile="/home/sia/work/github/imate/imate/_cu_basic_algebra/cu_vector_operations.cu" bodystart="166" bodyend="183"/>
        <references refid="namespacecublas__interface_1a143bcc56d4d99a7a05219b3ee8dd10fc">cublas_interface::cublasXdot</references>
        <referencedby refid="cu__lanczos__tridiagonalization_8cu_1a30ec831ebcc2ce17eefefb770b13773d" compoundref="cu__lanczos__tridiagonalization_8cu" startline="119" endline="248">cu_lanczos_tridiagonalization</referencedby>
        <referencedby refid="classcuOrthogonalization_1a47d7334cf9d9b69bb2feb047d40e0a23" compoundref="cu__orthogonalization_8cu" startline="128" endline="228">cuOrthogonalization&lt; DataType &gt;::gram_schmidt_process</referencedby>
        <referencedby refid="classcuOrthogonalization_1aefd27369921be5760a998a60aca49b56" compoundref="cu__orthogonalization_8cu" startline="275" endline="400">cuOrthogonalization&lt; DataType &gt;::orthogonalize_vectors</referencedby>
      </memberdef>
      <memberdef kind="function" id="classcuVectorOperations_1adc247988515923e3c79226e891c9f3e1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DataType</type>
        <definition>DataType cuVectorOperations&lt; DataType &gt;::euclidean_norm</definition>
        <argsstring>(cublasHandle_t cublas_handle, const DataType *vector, const LongIndexType vector_size)</argsstring>
        <name>euclidean_norm</name>
        <param>
          <type>cublasHandle_t</type>
          <declname>cublas_handle</declname>
        </param>
        <param>
          <type>const DataType *</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>const <ref refid="types_8h_1a4918759cb64dcead17269b3613b27d25" kindref="member">LongIndexType</ref></type>
          <declname>vector_size</declname>
        </param>
        <briefdescription>
<para>Computes the Euclidean 2-norm of a 1D array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cublas_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The cuBLAS object handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">vector</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to 1D array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">vector_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Euclidean norm </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/github/imate/imate/_cu_basic_algebra/cu_vector_operations.h" line="71" column="25" bodyfile="/home/sia/work/github/imate/imate/_cu_basic_algebra/cu_vector_operations.cu" bodystart="201" bodyend="215"/>
        <references refid="namespacecublas__interface_1a4cdb08fd9dbcb3df01c1988004a8ff63">cublas_interface::cublasXnrm2</references>
        <referencedby refid="cu__lanczos__tridiagonalization_8cu_1a30ec831ebcc2ce17eefefb770b13773d" compoundref="cu__lanczos__tridiagonalization_8cu" startline="119" endline="248">cu_lanczos_tridiagonalization</referencedby>
        <referencedby refid="classcuOrthogonalization_1a47d7334cf9d9b69bb2feb047d40e0a23" compoundref="cu__orthogonalization_8cu" startline="128" endline="228">cuOrthogonalization&lt; DataType &gt;::gram_schmidt_process</referencedby>
        <referencedby refid="classcuVectorOperations_1ace661476791a4a662aab05c9af19b94a" compoundref="cu__vector__operations_8cu" startline="273" endline="290">cuVectorOperations&lt; DataType &gt;::normalize_vector_and_copy</referencedby>
        <referencedby refid="classcuVectorOperations_1a624e0023a7be0d361c31be756229b68c" compoundref="cu__vector__operations_8cu" startline="234" endline="252">cuVectorOperations&lt; DataType &gt;::normalize_vector_in_place</referencedby>
        <referencedby refid="classcuOrthogonalization_1aefd27369921be5760a998a60aca49b56" compoundref="cu__orthogonalization_8cu" startline="275" endline="400">cuOrthogonalization&lt; DataType &gt;::orthogonalize_vectors</referencedby>
      </memberdef>
      <memberdef kind="function" id="classcuVectorOperations_1a624e0023a7be0d361c31be756229b68c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DataType</type>
        <definition>DataType cuVectorOperations&lt; DataType &gt;::normalize_vector_in_place</definition>
        <argsstring>(cublasHandle_t cublas_handle, DataType *vector, const LongIndexType vector_size)</argsstring>
        <name>normalize_vector_in_place</name>
        <param>
          <type>cublasHandle_t</type>
          <declname>cublas_handle</declname>
        </param>
        <param>
          <type>DataType *</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>const <ref refid="types_8h_1a4918759cb64dcead17269b3613b27d25" kindref="member">LongIndexType</ref></type>
          <declname>vector_size</declname>
        </param>
        <briefdescription>
<para>Normalizes a vector based on Euclidean 2-norm. The result is written in-place. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cublas_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The cuBLAS object handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">vector</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector to be normalized in-place. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">vector_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the input vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>2-Norm of the input vector (before normalization) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/github/imate/imate/_cu_basic_algebra/cu_vector_operations.h" line="77" column="25" bodyfile="/home/sia/work/github/imate/imate/_cu_basic_algebra/cu_vector_operations.cu" bodystart="234" bodyend="252"/>
        <references refid="namespacecublas__interface_1a373969305e12857bb6463ab630cb9b4c">cublas_interface::cublasXscal</references>
        <references refid="classcuVectorOperations_1adc247988515923e3c79226e891c9f3e1" compoundref="cu__vector__operations_8cu" startline="201" endline="215">cuVectorOperations&lt; DataType &gt;::euclidean_norm</references>
        <referencedby refid="cu__golub__kahn__bidiagonalization_8cu_1aa755f765f48f41b63d9dab3528b5f0b2" compoundref="cu__golub__kahn__bidiagonalization_8cu" startline="113" endline="242">cu_golub_kahn_bidiagonalization</referencedby>
      </memberdef>
      <memberdef kind="function" id="classcuVectorOperations_1ace661476791a4a662aab05c9af19b94a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DataType</type>
        <definition>DataType cuVectorOperations&lt; DataType &gt;::normalize_vector_and_copy</definition>
        <argsstring>(cublasHandle_t cublas_handle, const DataType *vector, const LongIndexType vector_size, DataType *output_vector)</argsstring>
        <name>normalize_vector_and_copy</name>
        <param>
          <type>cublasHandle_t</type>
          <declname>cublas_handle</declname>
        </param>
        <param>
          <type>const DataType *</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>const <ref refid="types_8h_1a4918759cb64dcead17269b3613b27d25" kindref="member">LongIndexType</ref></type>
          <declname>vector_size</declname>
        </param>
        <param>
          <type>DataType *</type>
          <declname>output_vector</declname>
        </param>
        <briefdescription>
<para>Normalizes a vector based on Euclidean 2-norm. The result is written into another vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cublas_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The cuBLAS object handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">vector</parametername>
</parameternamelist>
<parameterdescription>
<para>Input vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">vector_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the input vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>Output vector, which is the normalization of the input vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>2-norm of the input vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sia/work/github/imate/imate/_cu_basic_algebra/cu_vector_operations.h" line="83" column="25" bodyfile="/home/sia/work/github/imate/imate/_cu_basic_algebra/cu_vector_operations.cu" bodystart="273" bodyend="290"/>
        <references refid="classcuVectorOperations_1a18e8a8069b986b0b559f8ac97b72a495" compoundref="cu__vector__operations_8cu" startline="73" endline="96">cuVectorOperations&lt; DataType &gt;::copy_scaled_vector</references>
        <references refid="classcuVectorOperations_1adc247988515923e3c79226e891c9f3e1" compoundref="cu__vector__operations_8cu" startline="201" endline="215">cuVectorOperations&lt; DataType &gt;::euclidean_norm</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A static class for vector operations, similar to level-1 operations of the BLAS library. This class acts as a templated namespace, where all member methods are <emphasis>public</emphasis> and <emphasis>static</emphasis>. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="see"><para>MatrixOperations </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/home/sia/work/github/imate/imate/_cu_basic_algebra/cu_vector_operations.h" line="36" column="1" bodyfile="/home/sia/work/github/imate/imate/_cu_basic_algebra/cu_vector_operations.h" bodystart="37" bodyend="88"/>
    <listofallmembers>
      <member refid="classcuVectorOperations_1a18e8a8069b986b0b559f8ac97b72a495" prot="public" virt="non-virtual"><scope>cuVectorOperations</scope><name>copy_scaled_vector</name></member>
      <member refid="classcuVectorOperations_1a08467db301f35f715fb07e4ec4907406" prot="public" virt="non-virtual"><scope>cuVectorOperations</scope><name>copy_vector</name></member>
      <member refid="classcuVectorOperations_1adc247988515923e3c79226e891c9f3e1" prot="public" virt="non-virtual"><scope>cuVectorOperations</scope><name>euclidean_norm</name></member>
      <member refid="classcuVectorOperations_1a88c6373da3d2fef0dca236aef3ef1ec1" prot="public" virt="non-virtual"><scope>cuVectorOperations</scope><name>inner_product</name></member>
      <member refid="classcuVectorOperations_1ace661476791a4a662aab05c9af19b94a" prot="public" virt="non-virtual"><scope>cuVectorOperations</scope><name>normalize_vector_and_copy</name></member>
      <member refid="classcuVectorOperations_1a624e0023a7be0d361c31be756229b68c" prot="public" virt="non-virtual"><scope>cuVectorOperations</scope><name>normalize_vector_in_place</name></member>
      <member refid="classcuVectorOperations_1a516e90d70f99436cf48cd5b7deeb69c7" prot="public" virt="non-virtual"><scope>cuVectorOperations</scope><name>subtract_scaled_vector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
