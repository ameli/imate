<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="__rational__polynomial__functions__method_8py" kind="file" language="Python">
    <compoundname>_rational_polynomial_functions_method.py</compoundname>
    <innerclass refid="classimate_1_1interpolator_1_1__rational__polynomial__functions__method_1_1RationalPolynomialFunctionsMethod" prot="public">imate::interpolator::_rational_polynomial_functions_method::RationalPolynomialFunctionsMethod</innerclass>
    <innernamespace refid="namespaceimate_1_1interpolator_1_1__rational__polynomial__functions__method">imate::interpolator::_rational_polynomial_functions_method</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespaceimate_1_1interpolator_1_1__rational__polynomial__functions__method" refkind="compound"><highlight class="comment">#<sp/>SPDX-FileCopyrightText:<sp/>Copyright<sp/>2021,<sp/>Siavash<sp/>Ameli<sp/>&lt;sameli@berkeley.edu&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>SPDX-FileType:<sp/>SOURCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it<sp/>under</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>license<sp/>found<sp/>in<sp/>the<sp/>LICENSE.txt<sp/>file<sp/>in<sp/>the<sp/>root<sp/>directory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/>of<sp/>this<sp/>source<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#<sp/>=======</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Imports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/>=======</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>print_function</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>._interpolant_base<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>InterpolantBase</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">#<sp/>====================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Rational<sp/>Polynomial<sp/>Functions<sp/>Method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">#<sp/>====================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="classimate_1_1interpolator_1_1__rational__polynomial__functions__method_1_1RationalPolynomialFunctionsMethod" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classimate_1_1interpolator_1_1__rational__polynomial__functions__method_1_1RationalPolynomialFunctionsMethod" kindref="compound">RationalPolynomialFunctionsMethod</ref>(<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase" kindref="compound">InterpolantBase</ref>):</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Computes<sp/>the<sp/>trace<sp/>of<sp/>inverse<sp/>of<sp/>an<sp/>invertible<sp/>matrix<sp/>:math:`\\mathbf{A}<sp/>+</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>t<sp/>\\mathbf{B}`<sp/>using<sp/>an<sp/>interpolation<sp/>scheme<sp/>based<sp/>on<sp/>rational<sp/>polynomial</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>functions<sp/>(see<sp/>details<sp/>below).</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>**Class<sp/>Inheritance:**</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>inheritance-diagram::</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>imate.InterpolateTraceinv.RationalPolynomialFunctionsMethod</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:parts:<sp/>1</highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>A:<sp/>Invertible<sp/>matrix,<sp/>can<sp/>be<sp/>either<sp/>dense<sp/>or<sp/>sparse<sp/>matrix.</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:type<sp/>A:<sp/>numpy.ndarray</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>B:<sp/>Invertible<sp/>matrix,<sp/>can<sp/>be<sp/>either<sp/>dense<sp/>or<sp/>sparse<sp/>matrix.</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:type<sp/>B:<sp/>numpy.ndarray</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>options:<sp/>A<sp/>dictionary<sp/>of<sp/>input<sp/>arguments<sp/>for</highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:mod:`imate.traceinv.traceinv`<sp/>module.</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:type<sp/>options:<sp/>dict</highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>verbose:<sp/>If<sp/>``True``,<sp/>prints<sp/>some<sp/>information<sp/>on<sp/>the<sp/>computation</highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>process.<sp/>Default<sp/>is<sp/>``False``.</highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:type<sp/>verbose:<sp/>bool</highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>**Interpolation<sp/>Method**</highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Define<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="56"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\tau(t)<sp/>=<sp/>\\frac{\\mathrm{trace}\\left(<sp/>(\\mathbf{A}<sp/>+</highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>\\mathbf{B})^{-1}<sp/>\\right)}{\\mathrm{trace}(\\mathbf{B}^{-1})}</highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>and<sp/>:math:`\\tau_0<sp/>=<sp/>\\tau(0)`.<sp/>Then,<sp/>we<sp/>approximate<sp/>:math:`\\tau^{-1}(t)`</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>by</highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\tau(t)<sp/>\\approx<sp/>\\frac{t^q<sp/>+<sp/>a_{q-1}<sp/>t^{q-1}<sp/>+<sp/>\\cdots<sp/>+<sp/>a_1<sp/>t<sp/>+</highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a_0}{t^{q+1}<sp/>+<sp/>b_p<sp/>t^q<sp/>+<sp/>\\cdots<sp/>+<sp/>b_1<sp/>t<sp/>+<sp/>b_0}</highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="67"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>where<sp/>:math:`a_0<sp/>=<sp/>b_0<sp/>\\tau_0`.<sp/>The<sp/>rest<sp/>of<sp/>coefficients<sp/>are<sp/>found<sp/>by</highlight></codeline>
<codeline lineno="68"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>solving<sp/>a<sp/>linear<sp/>system<sp/>using<sp/>the<sp/>function<sp/>value<sp/>at<sp/>the<sp/>interpolant<sp/>points</highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:math:`\\tau_i<sp/>=<sp/>\\tau(t_i)`.</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>note::</highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>interpolant<sp/>points<sp/>:math:`q`<sp/>in<sp/>this<sp/>module<sp/>can<sp/>only<sp/>be</highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>either<sp/>:math:`q<sp/>=<sp/>2`<sp/>or<sp/>:math:`q<sp/>=<sp/>4`.</highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>**Example**</highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>class<sp/>can<sp/>be<sp/>invoked<sp/>from</highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:class:`imate.InterpolateTraceinv.InterpolateTraceinv`<sp/>module</highlight></codeline>
<codeline lineno="80"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>using<sp/>``method=&apos;RPF&apos;``<sp/>argument.</highlight></codeline>
<codeline lineno="81"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="82"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python</highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>imate<sp/>import<sp/>generate_matrix</highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>imate<sp/>import<sp/>InterpolateTraceinv</highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Create<sp/>a<sp/>symmetric<sp/>positive-definite<sp/>matrix,<sp/>size<sp/>(20**2,<sp/>20**2)</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>A<sp/>=<sp/>generate_matrix(size=20)</highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Create<sp/>an<sp/>object<sp/>that<sp/>interpolates<sp/>trace<sp/>of<sp/>inverse<sp/>of<sp/>A+tI</highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>where<sp/>I<sp/>is<sp/>identity<sp/>matrix.</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>TI<sp/>=<sp/>InterpolateTraceinv(A,<sp/>method=&apos;RPF&apos;)</highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Interpolate<sp/>A+tI<sp/>at<sp/>some<sp/>input<sp/>point<sp/>t</highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>t<sp/>=<sp/>4e-1</highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>trace<sp/>=<sp/>TI.interpolate(t)</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>====</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Init</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>====</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="classimate_1_1interpolator_1_1__rational__polynomial__functions__method_1_1RationalPolynomialFunctionsMethod_1a86746367147b18004f3674f8763b1167" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classimate_1_1interpolator_1_1__rational__polynomial__functions__method_1_1RationalPolynomialFunctionsMethod_1a86746367147b18004f3674f8763b1167" kindref="member">__init__</ref>(self,<sp/>A,<sp/>B=None,<sp/>p=0,<sp/>ti=[],<sp/>options={},<sp/>verbose=False):</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Initializes<sp/>the<sp/>base<sp/>class<sp/>and<sp/>attributes.</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ti<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ValueError(</highlight><highlight class="stringliteral">&apos;&quot;ti&quot;<sp/>should<sp/>be<sp/>a<sp/>list<sp/>or<sp/>array.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Base<sp/>class<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>super(RationalPolynomialFunctionsMethod,<sp/>self).<ref refid="classimate_1_1interpolator_1_1__rational__polynomial__functions__method_1_1RationalPolynomialFunctionsMethod_1a86746367147b18004f3674f8763b1167" kindref="member">__init__</ref>(</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A,<sp/>B=B,<sp/>p=p,<sp/>ti=ti,<sp/>options=options,<sp/>verbose=verbose)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Initialize<sp/>interpolator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="classimate_1_1interpolator_1_1__rational__polynomial__functions__method_1_1RationalPolynomialFunctionsMethod_1af4d999d178d7525dbcf84187f9b625c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1interpolator_1_1__rational__polynomial__functions__method_1_1RationalPolynomialFunctionsMethod_1af4d999d178d7525dbcf84187f9b625c1" kindref="member">numerator</ref>numerator<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="classimate_1_1interpolator_1_1__rational__polynomial__functions__method_1_1RationalPolynomialFunctionsMethod_1abc9072c6f62aff9d90f133521e7b8d4d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1interpolator_1_1__rational__polynomial__functions__method_1_1RationalPolynomialFunctionsMethod_1abc9072c6f62aff9d90f133521e7b8d4d" kindref="member">denominator</ref>denominator<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1interpolator_1_1__rational__polynomial__functions__method_1_1RationalPolynomialFunctionsMethod_1a68e6649a6a814fcd4c07621c38cc121a" kindref="member">initialize_interpolator</ref>initialize_interpolator()</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>=================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>fit<sp/>rational<sp/>poly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>=================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="classimate_1_1interpolator_1_1__rational__polynomial__functions__method_1_1RationalPolynomialFunctionsMethod_1a2de4b96b726e9e26dbaa9948696ada96" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classimate_1_1interpolator_1_1__rational__polynomial__functions__method_1_1RationalPolynomialFunctionsMethod_1a2de4b96b726e9e26dbaa9948696ada96" kindref="member">fit_rational_poly</ref>(self,<sp/>t_i,<sp/>tau_i,<sp/>tau0):</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Finds<sp/>the<sp/>coefficients<sp/>:math:`(a_1,<sp/>a_0,<sp/>b_2,<sp/>b_1,<sp/>b_0)`<sp/>of<sp/>a<sp/>Rational</highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polynomial<sp/>of<sp/>order<sp/>2<sp/>over<sp/>3,</highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\tau(t)<sp/>\\approx<sp/>\\frac{t^2<sp/>+<sp/>a_{1}<sp/>t<sp/>+<sp/>a_0}{t^3<sp/>+<sp/>b_2<sp/>t^2<sp/>+<sp/>b_1<sp/>t</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>b_0}</highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>used<sp/>when<sp/>the<sp/>number<sp/>of<sp/>interpolant<sp/>points<sp/>is<sp/>:math:`q<sp/>=<sp/>4`.</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>t_i:<sp/>Inquiry<sp/>point.</highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:type<sp/>t_i:<sp/>float</highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>tau_i:<sp/>The<sp/>function<sp/>value<sp/>at<sp/>the<sp/>inquiry<sp/>point<sp/>:math:`t`</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:type<sp/>tau_i:<sp/>float</highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>tau_0:<sp/>The<sp/>function<sp/>value<sp/>at<sp/>:math:`t_0<sp/>=<sp/>0`.</highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:type<sp/>tau_0:<sp/>float</highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Length<sp/>of<sp/>t_i<sp/>should<sp/>be<sp/>2q+1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>t_i.size<sp/>//<sp/>2</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>q<sp/>!=<sp/>t_i.size/2:</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(t_i.size)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(q)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ValueError(</highlight><highlight class="stringliteral">&apos;In<sp/>rational<sp/>polynomial<sp/>interpolation<sp/>method,<sp/>&apos;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;the<sp/>number<sp/>of<sp/>interpolation<sp/>points<sp/>should<sp/>be<sp/>&apos;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;even.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Matrix<sp/>of<sp/>coefficients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C<sp/>=<sp/>numpy.zeros((2*q,<sp/>2*q),<sp/>dtype=float)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>numpy.zeros((2*q,),<sp/>dtype=float)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(2*q):</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c[i]<sp/>=<sp/>tau_i[i]<sp/>*<sp/>t_i[i]**q<sp/>-<sp/>t_i[i]**(q+1)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C[i,<sp/>0]<sp/>=<sp/>1.0-tau_i[i]/tau0</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(1,<sp/>q+1):</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C[i,<sp/>j]<sp/>=<sp/>t_i[i]**j</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(1,<sp/>q):</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C[i,<sp/>q+j]<sp/>=<sp/>-tau_i[i]<sp/>*<sp/>t_i[i]**j</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Condition<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1af274c888accf15a25209c72a67a1b203" kindref="member">verbose</ref>verbose:</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&apos;Condition<sp/>number:<sp/>%0.2e&apos;</highlight><highlight class="normal"><sp/>%<sp/>(numpy.linalg.cond(C)))</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Solve<sp/>with<sp/>least<sp/>square.<sp/>NOTE:<sp/>don&apos;t<sp/>solve<sp/>with<sp/>numpy.linalg.solve.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>numpy.linalg.solve(C,<sp/>c)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>list(x)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>x[:q+1]</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>x[q+1:]</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a0<sp/>=<sp/>b[0]/tau0</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>[a0]<sp/>+<sp/>a</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numerator<sp/>=<sp/>[1]<sp/>+<sp/>b[::-1]</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denominator<sp/>=<sp/>[1]<sp/>+<sp/>a[::-1]</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>poles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Poles<sp/>=<sp/>numpy.roots(denominator)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>numpy.any(Poles<sp/>&gt;<sp/>0):</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&apos;denominator<sp/>poles:<sp/>&apos;</highlight><highlight class="normal">,<sp/>end=</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(Poles)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ValueError(</highlight><highlight class="stringliteral">&apos;rational_polynomial<sp/>has<sp/>positive<sp/>poles.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>numerator,<sp/>denominator</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>=============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>rational<sp/>poly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>=============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="classimate_1_1interpolator_1_1__rational__polynomial__functions__method_1_1RationalPolynomialFunctionsMethod_1a80718b75a3d6011f832d6183296728ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classimate_1_1interpolator_1_1__rational__polynomial__functions__method_1_1RationalPolynomialFunctionsMethod_1a80718b75a3d6011f832d6183296728ca" kindref="member">rational_poly</ref>(self,<sp/>t,<sp/>numerator,<sp/>denominator):</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="199"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Evaluates<sp/>rational<sp/>polynomial.</highlight></codeline>
<codeline lineno="200"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="201"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>t:<sp/>Inquiry<sp/>point.</highlight></codeline>
<codeline lineno="202"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:type<sp/>t:<sp/>float</highlight></codeline>
<codeline lineno="203"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="204"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>numerator:<sp/>A<sp/>list<sp/>of<sp/>coefficients<sp/>of<sp/>polynomial<sp/>in<sp/>the<sp/>numerator</highlight></codeline>
<codeline lineno="205"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>rational<sp/>polynomial<sp/>function.</highlight></codeline>
<codeline lineno="206"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:type<sp/>numerator:<sp/>list</highlight></codeline>
<codeline lineno="207"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="208"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>denominator:<sp/>A<sp/>list<sp/>of<sp/>coefficients<sp/>of<sp/>polynomial<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="209"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denominator<sp/>of<sp/>the<sp/>rational<sp/>polynomial<sp/>function.</highlight></codeline>
<codeline lineno="210"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:type<sp/>numerator:<sp/>list</highlight></codeline>
<codeline lineno="211"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>numpy.polyval(numerator,<sp/>t)<sp/>/<sp/>numpy.polyval(denominator,<sp/>t)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>=======================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>initialize<sp/>interpolator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>=======================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="classimate_1_1interpolator_1_1__rational__polynomial__functions__method_1_1RationalPolynomialFunctionsMethod_1a68e6649a6a814fcd4c07621c38cc121a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classimate_1_1interpolator_1_1__rational__polynomial__functions__method_1_1RationalPolynomialFunctionsMethod_1a68e6649a6a814fcd4c07621c38cc121a" kindref="member">initialize_interpolator</ref>(self):</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="221"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sets<sp/>``self.numerator``<sp/>and<sp/>``self.denominator``<sp/>which<sp/>are<sp/>list<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="222"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coefficients<sp/>of<sp/>the<sp/>numerator<sp/>and<sp/>denominator<sp/>of<sp/>the<sp/>rational</highlight></codeline>
<codeline lineno="223"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polynomial.</highlight></codeline>
<codeline lineno="224"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1af274c888accf15a25209c72a67a1b203" kindref="member">verbose</ref>verbose:</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&apos;Initialize<sp/>interpolator<sp/>...&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1interpolator_1_1__rational__polynomial__functions__method_1_1RationalPolynomialFunctionsMethod_1af4d999d178d7525dbcf84187f9b625c1" kindref="member">numerator</ref>numerator,<sp/>self.<ref refid="classimate_1_1interpolator_1_1__rational__polynomial__functions__method_1_1RationalPolynomialFunctionsMethod_1abc9072c6f62aff9d90f133521e7b8d4d" kindref="member">denominator</ref>denominator<sp/>=<sp/>self.<ref refid="classimate_1_1interpolator_1_1__rational__polynomial__functions__method_1_1RationalPolynomialFunctionsMethod_1a2de4b96b726e9e26dbaa9948696ada96" kindref="member">fit_rational_poly</ref>fit_rational_poly(</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1ae4a4039a4689e235dadae74f54858271" kindref="member">t_i</ref>t_i,<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a13fd1ead3c2fb291728d8134f6677487" kindref="member">tau_i</ref>tau_i,<sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a47d85671bdafd1b0d30002c6d50e48e9" kindref="member">tau0</ref>tau0)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1af274c888accf15a25209c72a67a1b203" kindref="member">verbose</ref>verbose:</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&apos;Done.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>interpolate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="classimate_1_1interpolator_1_1__rational__polynomial__functions__method_1_1RationalPolynomialFunctionsMethod_1ad6a48757676b49ad140b8278ed7b079a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classimate_1_1interpolator_1_1__rational__polynomial__functions__method_1_1RationalPolynomialFunctionsMethod_1ad6a48757676b49ad140b8278ed7b079a" kindref="member">interpolate</ref>(self,<sp/>t):</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="241"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Interpolates<sp/>:math:`\\mathrm{trace}<sp/>\\left(<sp/>(\\mathbf{A}<sp/>+</highlight></codeline>
<codeline lineno="242"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>\\mathbf{B})^{-1}<sp/>\\right)`<sp/>at<sp/>:math:`t`.</highlight></codeline>
<codeline lineno="243"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="244"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>the<sp/>main<sp/>interface<sp/>function<sp/>of<sp/>this<sp/>module<sp/>and<sp/>it<sp/>is<sp/>used<sp/>after</highlight></codeline>
<codeline lineno="245"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>interpolation<sp/>object<sp/>is<sp/>initialized.</highlight></codeline>
<codeline lineno="246"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="247"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>t:<sp/>The<sp/>inquiry<sp/>point(s).</highlight></codeline>
<codeline lineno="248"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:type<sp/>t:<sp/>float,<sp/>list,<sp/>or<sp/>numpy.array</highlight></codeline>
<codeline lineno="249"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="250"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:return:<sp/>The<sp/>interpolated<sp/>value<sp/>of<sp/>the<sp/>trace.</highlight></codeline>
<codeline lineno="251"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:rtype:<sp/>float<sp/>or<sp/>numpy.array</highlight></codeline>
<codeline lineno="252"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tau<sp/>=<sp/>self.<ref refid="classimate_1_1interpolator_1_1__rational__polynomial__functions__method_1_1RationalPolynomialFunctionsMethod_1a80718b75a3d6011f832d6183296728ca" kindref="member">rational_poly</ref>rational_poly(t,<sp/>self.<ref refid="classimate_1_1interpolator_1_1__rational__polynomial__functions__method_1_1RationalPolynomialFunctionsMethod_1af4d999d178d7525dbcf84187f9b625c1" kindref="member">numerator</ref>numerator,<sp/>self.<ref refid="classimate_1_1interpolator_1_1__rational__polynomial__functions__method_1_1RationalPolynomialFunctionsMethod_1abc9072c6f62aff9d90f133521e7b8d4d" kindref="member">denominator</ref>denominator)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>schatten<sp/>=<sp/>tau*self.<ref refid="classimate_1_1interpolator_1_1__interpolant__base_1_1InterpolantBase_1a270087e4ce38285c18c81e79a408d5a8" kindref="member">schatten_B</ref>schatten_B</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>schatten</highlight></codeline>
    </programlisting>
    <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/interpolator/_rational_polynomial_functions_method.py"/>
  </compounddef>
</doxygen>
