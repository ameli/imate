<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="affine__matrix__function_8py" kind="file" language="Python">
    <compoundname>affine_matrix_function.py</compoundname>
    <innerclass refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction" prot="public">imate::linear_operator::affine_matrix_function::AffineMatrixFunction</innerclass>
    <innernamespace refid="namespaceimate_1_1linear__operator_1_1affine__matrix__function">imate::linear_operator::affine_matrix_function</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespaceimate_1_1linear__operator_1_1affine__matrix__function" refkind="compound"><highlight class="comment">#<sp/>SPDX-FileCopyrightText:<sp/>Copyright<sp/>2021,<sp/>Siavash<sp/>Ameli<sp/>&lt;sameli@berkeley.edu&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>SPDX-FileType:<sp/>SOURCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>license<sp/>found<sp/>in<sp/>the<sp/>LICENSE.txt<sp/>file<sp/>in<sp/>the<sp/>root</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/>directory<sp/>of<sp/>this<sp/>source<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#<sp/>=======</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Imports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/>=======</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.linear_operator<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>LinearOperator</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>scipy.sparse<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>isspmatrix</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Affine<sp/>Matrix<sp/>Function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction" kindref="compound">AffineMatrixFunction</ref>(<ref refid="classimate_1_1linear__operator_1_1linear__operator_1_1LinearOperator" kindref="compound">LinearOperator</ref>):</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Create<sp/>a<sp/>one-parameter<sp/>affine<sp/>matrix<sp/>function<sp/>object<sp/>from<sp/>input<sp/>matrices.</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Given<sp/>two<sp/>matrices<sp/>:math:`\\mathbf{A}`<sp/>and<sp/>:math:`\\mathbf{B}`,<sp/>a</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>one-parameter<sp/>affine<sp/>operator<sp/>:math:`t<sp/>\\mapsto<sp/>\\mathbf{A}(t)`<sp/>is<sp/>created</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>by</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>math::</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\mathbf{A}(t)<sp/>=<sp/>\\mathbf{A}<sp/>+<sp/>t<sp/>\\mathbf{B}.</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>operator<sp/>accepts<sp/>various<sp/>matrix<sp/>types<sp/>with<sp/>a<sp/>unified<sp/>interface,</highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>establishes<sp/>a<sp/>fully<sp/>automatic<sp/>dynamic<sp/>buffer<sp/>to<sp/>allocate,<sp/>deallocate,<sp/>and</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>transfer<sp/>data<sp/>between<sp/>CPU<sp/>and<sp/>multiple<sp/>GPU<sp/>devices<sp/>on<sp/>demand,<sp/>as<sp/>well<sp/>as</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>performs<sp/>basic<sp/>matrix-vector<sp/>operations<sp/>for<sp/>multiple<sp/>requested<sp/>parameters</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>with<sp/>high<sp/>performance<sp/>on<sp/>both<sp/>CPU<sp/>or<sp/>GPU<sp/>devices.</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>An<sp/>instance<sp/>of<sp/>this<sp/>class<sp/>can<sp/>be<sp/>used<sp/>as<sp/>an<sp/>input<sp/>matrix<sp/>to<sp/>any<sp/>function<sp/>in</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:mod:`imate`<sp/>that<sp/>accepts<sp/>``slq``<sp/>method.</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>A<sp/>:<sp/>numpy.ndarray<sp/>or<sp/>scipy.sparse</highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>input<sp/>matrix<sp/>`A`<sp/>can<sp/>be<sp/>dense<sp/>or<sp/>sparse<sp/>(both<sp/>`CSR`<sp/>and<sp/>`CSC`</highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>formats<sp/>are<sp/>supported).<sp/>Also,<sp/>the<sp/>matrix<sp/>data<sp/>type<sp/>can<sp/>be<sp/>either</highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>`32-bit`,<sp/>`64-bit`,<sp/>or<sp/>`128-bit`.<sp/>The<sp/>input<sp/>matrix<sp/>can<sp/>be<sp/>stored</highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>either<sp/>in<sp/>row-ordering<sp/>(`C`<sp/>style)<sp/>or<sp/>column-ordering<sp/>(`Fortran`</highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>style).</highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>..<sp/>note::</highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>`128-bit`<sp/>data<sp/>type<sp/>is<sp/>not<sp/>supported<sp/>on<sp/>GPU.</highlight></codeline>
<codeline lineno="56"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>B<sp/>:<sp/>numpy.ndarray<sp/>or<sp/>scipy.sparse,<sp/>default=None</highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>input<sp/>matrix<sp/>`B`<sp/>should<sp/>have<sp/>the<sp/>same<sp/>size,<sp/>data<sp/>type,<sp/>matrix</highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format,<sp/>and<sp/>row-ordering<sp/>storage<sp/>as<sp/>the<sp/>matrix<sp/>`A`.<sp/>When<sp/>`B`<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>given<sp/>(`None`),<sp/>it<sp/>is<sp/>assumed<sp/>that<sp/>`B`<sp/>is<sp/>the<sp/>identity<sp/>matrix.</highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Attributes</highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>A<sp/>:<sp/>numpy.ndarray<sp/>or<sp/>scipy.sparse,<sp/>(n,<sp/>n)</highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Input<sp/>matrix<sp/>`A`<sp/>from<sp/>python<sp/>object.</highlight></codeline>
<codeline lineno="67"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="68"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>B<sp/>:<sp/>numpy.ndarray<sp/>or<sp/>scipy.sparse,<sp/>(n,<sp/>n)</highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Input<sp/>matrix<sp/>`B`<sp/>from<sp/>python<sp/>object.</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>cpu_Aop<sp/>:<sp/>object</highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix<sp/>object<sp/>`A`<sp/>on<sp/>CPU.</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>gpu_Aop<sp/>:<sp/>object</highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix<sp/>object<sp/>`A`<sp/>on<sp/>GPU.</highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>gpu<sp/>:<sp/>bool,<sp/>default=False</highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>`True`,<sp/>the<sp/>matrix<sp/>object<sp/>is<sp/>created<sp/>for<sp/>GPU<sp/>devices.</highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="80"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>num_gpu_devices<sp/>:<sp/>int,<sp/>default=0</highlight></codeline>
<codeline lineno="81"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Number<sp/>of<sp/>GPU<sp/>devices<sp/>to<sp/>be<sp/>used.<sp/>If<sp/>`0`,<sp/>it<sp/>uses<sp/>the<sp/>maximum<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="82"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GPU<sp/>devices<sp/>that<sp/>are<sp/>available.</highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>initialized_on_cpu<sp/>:<sp/>bool,<sp/>default=False</highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Indicates<sp/>whether<sp/>the<sp/>matrix<sp/>data<sp/>is<sp/>allocated<sp/>in<sp/>CPU.</highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>initialized_on_gpu<sp/>:<sp/>bool,<sp/>default=False</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Indicates<sp/>whether<sp/>the<sp/>matrix<sp/>data<sp/>is<sp/>allocated<sp/>in<sp/>GPU.</highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>data_type_name<sp/>:<sp/>str,<sp/>default=None</highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>type<sp/>of<sp/>matrix<sp/>data,<sp/>and<sp/>can<sp/>be<sp/>`float32`,<sp/>`float64`,<sp/>or</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>`float128`.</highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>num_parameters<sp/>:<sp/>int,<sp/>default=1</highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>number<sp/>of<sp/>parameters<sp/>of<sp/>the<sp/>linear<sp/>operator.<sp/>For</highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:class:`AffineMatrixFunction`<sp/>class,</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>parameter<sp/>is<sp/>always<sp/>`1`<sp/>corresponding<sp/>to<sp/>the<sp/>parameter<sp/>`t`.</highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Methods</highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>initialize</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>get_num_rows</highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>get_num_columns</highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>is_sparse</highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>get_nnz</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>get_density</highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>get_data_type_name</highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>get_num_parameters</highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>get_linear_operator</highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>See<sp/>Also</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>--------</highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>imate.Matrix</highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Notes</highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-----</highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>**Where<sp/>to<sp/>use<sp/>this<sp/>class:**</highlight></codeline>
<codeline lineno="120"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>instances<sp/>of<sp/>this<sp/>class<sp/>can<sp/>be<sp/>used<sp/>just<sp/>as<sp/>a<sp/>normal<sp/>matrix<sp/>in<sp/>any</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>function<sp/>in<sp/>:mod:`imate`<sp/>that<sp/>accepts<sp/>``slq``<sp/>method.<sp/>For<sp/>instance,<sp/>when</highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>calling<sp/>:func:`imate.logdet`<sp/>function<sp/>using<sp/>``method=slq``<sp/>argument,<sp/>the</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>input<sp/>matrix<sp/>`A`<sp/>can<sp/>be<sp/>an<sp/>instance<sp/>of<sp/>this<sp/>class.</highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>**Why<sp/>using<sp/>this<sp/>class:**</highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>class<sp/>represents<sp/>an<sp/>affine<sp/>matrix<sp/>function</highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:math:`\\mathbf{A}(t)<sp/>=<sp/>\\mathbf{A}<sp/>+<sp/><sp/>t\\mathbf{B}`<sp/>where<sp/>:math:`t`<sp/>is<sp/>a</highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>parameter.<sp/>An<sp/>instance<sp/>of<sp/>this<sp/>class<sp/>is<sp/>suitable<sp/>to<sp/>be<sp/>used<sp/>in<sp/>applications</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>where<sp/>a<sp/>matrix<sp/>function<sp/>of<sp/>:math:`\\mathbf{A}(t_i)`<sp/>(such<sp/>as<sp/>its</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>log-determinant,<sp/>the<sp/>trace<sp/>of<sp/>its<sp/>inverse,<sp/>etc)<sp/>should<sp/>be<sp/>computed<sp/>for<sp/>a</highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>wide<sp/>range<sp/>of<sp/>parameter<sp/>inputs<sp/>:math:`t_i`,<sp/>:math:`i<sp/>=<sp/>1,<sp/>\\dots,q`<sp/>all<sp/>at</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>once.</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>parameter<sp/>:math:`t`<sp/>is<sp/>not<sp/>set<sp/>at<sp/>the<sp/>instantiation<sp/>of<sp/>this<sp/>class.</highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Rather,<sp/>a<sp/>caller<sp/>function<sp/>can<sp/>request<sp/>a<sp/>range<sp/>of<sp/>matrices</highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:math:`\\mathbf{A}(t_i)`<sp/>for<sp/>multiple<sp/>values<sp/>:math:`t_i`,</highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:math:`i=1,<sp/>\\dots,<sp/>q`.<sp/>This<sp/>class<sp/>can<sp/>provide<sp/>these<sp/>matrices<sp/>one<sp/>by<sp/>one<sp/>or</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>all<sp/>at<sp/>once<sp/>efficiently<sp/>depending<sp/>on<sp/>the<sp/>case.</highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>**Features:**</highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>class<sp/>internally<sp/>creates<sp/>instances<sp/>of<sp/>:class:`imate.Matrix`<sp/>class<sp/>for</highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>each<sp/>of<sp/>the<sp/>matrices<sp/>:math:`\\mathbf{A}`<sp/>and<sp/>:math:`\\mathbf{B}`<sp/>(if<sp/>`B`</highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>is<sp/>not<sp/>`None`).<sp/>This<sp/>object<sp/>has<sp/>the<sp/>following<sp/>features.</highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="148"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>1.<sp/>It<sp/>acts<sp/>as<sp/>a<sp/>data<sp/>container<sp/>that<sp/>can<sp/>handle<sp/>a<sp/>variety<sp/>of<sp/>matrices<sp/>and</highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>types<sp/>with<sp/>a<sp/>unified<sp/>interface.</highlight></codeline>
<codeline lineno="150"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>2.<sp/>It<sp/>also<sp/>creates<sp/>a<sp/>dynamic<sp/>buffer<sp/>for<sp/>the<sp/>data<sp/>of<sp/>matrices<sp/>on<sp/>either<sp/>CPU</highlight></codeline>
<codeline lineno="151"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>multi-GPU<sp/>devices<sp/>with<sp/>fully<sp/>automatic<sp/>allocation,<sp/>deallocation,<sp/>and</highlight></codeline>
<codeline lineno="152"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>transfer<sp/>between<sp/>CPU<sp/>and<sp/>GPU<sp/>devices.</highlight></codeline>
<codeline lineno="153"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>3.<sp/>It<sp/>performs<sp/>basic<sp/>linear<sp/>algebraic<sp/>operations<sp/>on<sp/>the<sp/>matrix<sp/>data<sp/>with</highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>high<sp/>performance<sp/>on<sp/>CPU<sp/>or<sp/>GPU<sp/>devices.</highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Further<sp/>details<sp/>of<sp/>each<sp/>of<sp/>the<sp/>points<sp/>are<sp/>described<sp/>below.</highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="158"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>**1.<sp/>Unified<sp/>interface<sp/>for<sp/>matrix<sp/>types:**</highlight></codeline>
<codeline lineno="159"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="160"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>linear<sp/>operator<sp/>encompasses<sp/>the<sp/>following<sp/>matrix<sp/>types<sp/>all<sp/>in<sp/>one</highlight></codeline>
<codeline lineno="161"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>interface:</highlight></codeline>
<codeline lineno="162"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="163"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>*Dense*<sp/>or<sp/>*sparse*<sp/>matrices<sp/>with<sp/>`CSR`<sp/>or<sp/>`CSC`<sp/>sparse<sp/>formats.</highlight></codeline>
<codeline lineno="164"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>`32-bit`,<sp/>`64-bit`,<sp/>and<sp/>`128-bit`<sp/>data<sp/>types.</highlight></codeline>
<codeline lineno="165"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Row-ordering<sp/>(`C`<sp/>style)<sp/>and<sp/>column-ordering<sp/>(`Fortran`<sp/>style)<sp/>storage.</highlight></codeline>
<codeline lineno="166"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="167"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>**2.<sp/>Unified<sp/>interface<sp/>for<sp/>memory<sp/>buffer<sp/>between<sp/>CPU<sp/>and<sp/>GPU:**</highlight></codeline>
<codeline lineno="168"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>class<sp/>creates<sp/>a<sp/>dynamic<sp/>buffer<sp/>to<sp/>automatically<sp/>allocate,<sp/>deallocate,</highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>and<sp/>transfer<sp/>matrix<sp/>data<sp/>based<sp/>on<sp/>demand<sp/>between<sp/>CPU<sp/>and<sp/>multiple<sp/>GPU</highlight></codeline>
<codeline lineno="171"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>devices.<sp/>These<sp/>operations<sp/>are<sp/>performed<sp/>**in<sp/>parallel<sp/>for<sp/>each<sp/>GPU</highlight></codeline>
<codeline lineno="172"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>device**.<sp/>Also,<sp/>deallocation<sp/>is<sp/>performed<sp/>by<sp/>a<sp/>**smart<sp/>garbage<sp/>collector**,</highlight></codeline>
<codeline lineno="173"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>so<sp/>the<sp/>user<sp/>should<sp/>not<sp/>be<sp/>concerned<sp/>about<sp/>cleaning<sp/>the<sp/>data<sp/>on<sp/>the<sp/>device</highlight></codeline>
<codeline lineno="174"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>and<sp/>the<sp/>issue<sp/>of<sp/>memory<sp/>leak.<sp/>An<sp/>instance<sp/>of<sp/>this<sp/>class<sp/>can<sp/>be<sp/>efficiently</highlight></codeline>
<codeline lineno="175"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>reused<sp/>between<sp/>multiple<sp/>function<sp/>calls.<sp/>This<sp/>class<sp/>uses<sp/>a<sp/>**lazy<sp/>evaluation</highlight></codeline>
<codeline lineno="176"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>strategy**,<sp/>meaning<sp/>that<sp/>data<sp/>allocation<sp/>and<sp/>transfer<sp/>are<sp/>not<sp/>performed</highlight></codeline>
<codeline lineno="177"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>until<sp/>a<sp/>caller<sp/>function<sp/>requests<sp/>matrix<sp/>data<sp/>from<sp/>this<sp/>class.</highlight></codeline>
<codeline lineno="178"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="179"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>**3.<sp/>Unified<sp/>interface<sp/>for<sp/>basic<sp/>algebraic<sp/>operations:**</highlight></codeline>
<codeline lineno="180"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="181"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>class<sp/>handles<sp/>the<sp/>following<sp/>internal<sp/>operations:</highlight></codeline>
<codeline lineno="182"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="183"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>1.<sp/>Matrix<sp/>vector<sp/>product</highlight></codeline>
<codeline lineno="184"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`\\boldsymbol{y}(t)<sp/>=<sp/>\\mathbf{A}(t)<sp/>\\boldsymbol{x}`.</highlight></codeline>
<codeline lineno="185"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="186"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>2.<sp/>Transposed<sp/>matrix<sp/>vector<sp/>product</highlight></codeline>
<codeline lineno="187"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`\\boldsymbol{y}(t)<sp/>=</highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\mathbf{A}^{\\intercal}(t)<sp/>\\boldsymbol{x}`.</highlight></codeline>
<codeline lineno="189"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="190"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>3.<sp/>Additive<sp/>matrix<sp/>vector<sp/>product</highlight></codeline>
<codeline lineno="191"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`\\boldsymbol{y}(t)<sp/>=<sp/>\\boldsymbol{y}_0<sp/>+</highlight></codeline>
<codeline lineno="192"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\mathbf{A}(t)<sp/>\\boldsymbol{x}`.</highlight></codeline>
<codeline lineno="193"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="194"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>4.<sp/>Additive<sp/>transposed<sp/>matrix<sp/>vector<sp/>product</highlight></codeline>
<codeline lineno="195"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:math:`\\boldsymbol{y}(t)<sp/>=<sp/>\\boldsymbol{y}_0<sp/>+</highlight></codeline>
<codeline lineno="196"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\\mathbf{A}^{\\intercal}(t)<sp/>\\boldsymbol{x}`.</highlight></codeline>
<codeline lineno="197"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="198"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>All<sp/>the<sp/>above<sp/>operations<sp/>are<sp/>handled<sp/>internally<sp/>when<sp/>an<sp/>instance<sp/>of<sp/>this</highlight></codeline>
<codeline lineno="199"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>class<sp/>is<sp/>called<sp/>by<sp/>other<sp/>functions.</highlight></codeline>
<codeline lineno="200"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="201"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Each<sp/>of<sp/>the<sp/>above<sp/>operations<sp/>has<sp/>various<sp/>internal<sp/>implementations<sp/>depending</highlight></codeline>
<codeline lineno="202"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>on<sp/>whether<sp/>the<sp/>matrix<sp/>format<sp/>is<sp/>dense,<sp/>sparse<sp/>CSR,<sp/>or<sp/>sparse<sp/>CSC,</highlight></codeline>
<codeline lineno="203"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>whether<sp/>the<sp/>memory<sp/>storage<sp/>is<sp/>C<sp/>style<sp/>or<sp/>Fortran<sp/>style,<sp/>whether<sp/>the<sp/>data</highlight></codeline>
<codeline lineno="204"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>type<sp/>of<sp/>32-bit,<sp/>64-bit,<sp/>or<sp/>128-bit,<sp/>whether<sp/>the<sp/>operation<sp/>is<sp/>performed<sp/>on</highlight></codeline>
<codeline lineno="205"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>CPU<sp/>or<sp/>multi-GPU<sp/>devices,<sp/>and<sp/>whether<sp/>`B`<sp/>is<sp/>identity<sp/>matrix<sp/>or<sp/>generic</highlight></codeline>
<codeline lineno="206"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>matrix<sp/>(to<sp/>use<sp/>efficient<sp/>matrix<sp/>operations<sp/>on<sp/>identity<sp/>matrix).<sp/>This<sp/>class</highlight></codeline>
<codeline lineno="207"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>unifies<sp/>all<sp/>these<sp/>implementations<sp/>in<sp/>one<sp/>interface.</highlight></codeline>
<codeline lineno="208"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="209"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Examples</highlight></codeline>
<codeline lineno="210"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>--------</highlight></codeline>
<codeline lineno="211"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="212"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>**Create<sp/>an<sp/>affine<sp/>matrix<sp/>function<sp/>object:**</highlight></codeline>
<codeline lineno="213"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="214"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Create<sp/>a<sp/>very<sp/>large<sp/>sparse<sp/>matrix<sp/>with<sp/>64-bit<sp/>data<sp/>type:</highlight></codeline>
<codeline lineno="215"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="216"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python</highlight></codeline>
<codeline lineno="217"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="218"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Create<sp/>a<sp/>random<sp/>sparse<sp/>matrix<sp/>with<sp/>the<sp/>size<sp/>of<sp/>ten<sp/>million</highlight></codeline>
<codeline lineno="219"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>imate<sp/>import<sp/>toeplitz</highlight></codeline>
<codeline lineno="220"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>n<sp/>=<sp/>10000000</highlight></codeline>
<codeline lineno="221"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>A<sp/>=<sp/>toeplitz(2,<sp/>1,<sp/>n,<sp/>gram=True,<sp/>format=&apos;csr&apos;,<sp/>dtype=&apos;float64&apos;)</highlight></codeline>
<codeline lineno="222"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>print(A.dtype)</highlight></codeline>
<codeline lineno="223"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dtype(&apos;float64&apos;)</highlight></codeline>
<codeline lineno="224"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="225"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>print(type(A))</highlight></codeline>
<codeline lineno="226"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scipy.sparse.csr.csr_matrix</highlight></codeline>
<codeline lineno="227"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="228"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Create<sp/>the<sp/>linear<sp/>operator</highlight></codeline>
<codeline lineno="229"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:math:`\\mathbf{A}(t)<sp/>=<sp/>\\mathbf{A}<sp/>+<sp/>t<sp/>\\mathbf{I}`<sp/>from<sp/>the<sp/>matrix<sp/>`A`</highlight></codeline>
<codeline lineno="230"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>where<sp/>:math:`\\mathbf{I}`<sp/>is<sp/>the<sp/>identity<sp/>matrix:</highlight></codeline>
<codeline lineno="231"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="232"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python</highlight></codeline>
<codeline lineno="233"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:emphasize-lines:<sp/>5</highlight></codeline>
<codeline lineno="234"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="235"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Import<sp/>affine<sp/>matrix<sp/>function<sp/>class</highlight></codeline>
<codeline lineno="236"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>imate<sp/>import<sp/>AffineMatrixFunction</highlight></codeline>
<codeline lineno="237"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="238"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Create<sp/>a<sp/>matrix<sp/>operator<sp/>object<sp/>from<sp/>matrix<sp/>A</highlight></codeline>
<codeline lineno="239"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>Aop<sp/>=<sp/>AffineMatrixFunction(A)</highlight></codeline>
<codeline lineno="240"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="241"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>**Operation<sp/>on<sp/>CPU:**</highlight></codeline>
<codeline lineno="242"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="243"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Pass<sp/>the<sp/>above<sp/>linear<sp/>operator<sp/>as<sp/>input<sp/>to<sp/>any<sp/>of<sp/>the<sp/>matrix<sp/>functions<sp/>in</highlight></codeline>
<codeline lineno="244"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:mod:`imate`<sp/>that<sp/>accepts<sp/>``slq``<sp/>method,<sp/>such<sp/>as</highlight></codeline>
<codeline lineno="245"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:func:`imate.logdet`.<sp/>Compute<sp/>log-determinant<sp/>of<sp/>:math:`\\mathbf{A}(t)`<sp/>for</highlight></codeline>
<codeline lineno="246"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>an<sp/>array<sp/>of<sp/>:math:`t<sp/>=<sp/>[-1,<sp/>0,<sp/>+1]`<sp/>all<sp/>at<sp/>once:</highlight></codeline>
<codeline lineno="247"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="248"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python</highlight></codeline>
<codeline lineno="249"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="250"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Import<sp/>affine<sp/>matrix<sp/>function</highlight></codeline>
<codeline lineno="251"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>imate<sp/>import<sp/>logdet</highlight></codeline>
<codeline lineno="252"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="253"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>A<sp/>list<sp/>of<sp/>parameters<sp/>t<sp/>to<sp/>pass<sp/>to<sp/>Aop</highlight></codeline>
<codeline lineno="254"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>t<sp/>=<sp/>[-1.0,<sp/>0.0,<sp/>1.0]</highlight></codeline>
<codeline lineno="255"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="256"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Compute<sp/>log-determinant<sp/>of<sp/>Aop<sp/>for<sp/>all<sp/>parameters<sp/>t</highlight></codeline>
<codeline lineno="257"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>logdet(Aop,<sp/>method=&apos;slq&apos;,<sp/>parameters=t)</highlight></codeline>
<codeline lineno="258"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array([<sp/>68.71411681,<sp/>135.88356906,<sp/>163.44156683])</highlight></codeline>
<codeline lineno="259"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="260"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>**Operation<sp/>on<sp/>GPU:**</highlight></codeline>
<codeline lineno="261"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="262"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Reuse<sp/>the<sp/>same<sp/>object<sp/>`Aop`<sp/>as<sp/>created<sp/>in<sp/>the<sp/>previous<sp/>example.<sp/>However,</highlight></codeline>
<codeline lineno="263"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>this<sp/>time<sp/>by<sp/>calling<sp/>:func:`imate.logdet`<sp/>function<sp/>with<sp/>``gpu=True``</highlight></codeline>
<codeline lineno="264"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>argument,<sp/>the<sp/>data<sp/>is<sp/>automatically<sp/>transferred<sp/>from<sp/>CPU<sp/>to<sp/>each<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="265"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>multi-GPU<sp/>devices<sp/>(then,<sp/>it<sp/>will<sp/>be<sp/>available<sp/>on<sp/>both<sp/>CPU<sp/>and<sp/>GPU<sp/>devices).</highlight></codeline>
<codeline lineno="266"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="267"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>..<sp/>code-block::<sp/>python</highlight></codeline>
<codeline lineno="268"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="269"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>#<sp/>Compute<sp/>log-determinant<sp/>of<sp/>Aop<sp/>on<sp/>GPU</highlight></codeline>
<codeline lineno="270"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>logdet(Aop,<sp/>method=&apos;slq&apos;,<sp/>gpu=True)</highlight></codeline>
<codeline lineno="271"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array([<sp/>68.71411681,<sp/>135.88356906,<sp/>163.44156683])</highlight></codeline>
<codeline lineno="272"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>====</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>init</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>====</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278" refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a6489cd9cf80b5ec8e65dfd89ff5abda2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a6489cd9cf80b5ec8e65dfd89ff5abda2" kindref="member">__init__</ref>(self,<sp/>A,<sp/>B=None):</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="280"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Calling<sp/>base<sp/>class<sp/>to<sp/>initialize<sp/>member<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>super(AffineMatrixFunction,<sp/>self).<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a6489cd9cf80b5ec8e65dfd89ff5abda2" kindref="member">__init__</ref>()</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>A<sp/>reference<sp/>to<sp/>numpy<sp/>or<sp/>scipt<sp/>sparse<sp/>matrices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1adee1352dcd1822c2ffa56b84c521c042" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1adee1352dcd1822c2ffa56b84c521c042" kindref="member">A</ref>A<sp/>=<sp/>A</highlight></codeline>
<codeline lineno="287" refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1adda9526c43798cce0ccc469a9d58e0c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1adda9526c43798cce0ccc469a9d58e0c0" kindref="member">B</ref>B<sp/>=<sp/>B</highlight></codeline>
<codeline lineno="288" refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1ac61bb93f86db4aa49ccfc6460f3f0dc7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1ac61bb93f86db4aa49ccfc6460f3f0dc7" kindref="member">num_parameters</ref><ref refid="classimate_1_1linear__operator_1_1linear__operator_1_1LinearOperator_1ae57ebd1685d521375106265a27550792" kindref="member">num_parameters</ref>num_parameters<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1linear__operator_1_1linear__operator_1_1LinearOperator_1a64979163ddd663c64d1f426e21ef9e43" kindref="member">set_data_type_name</ref>set_data_type_name(self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1adee1352dcd1822c2ffa56b84c521c042" kindref="member">A</ref>A)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>==========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>initialize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>==========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a490463d164d8876c510c842a61af95f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a490463d164d8876c510c842a61af95f9" kindref="member">initialize</ref>(self,<sp/>gpu,<sp/>num_gpu_devices):</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="297"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Initializes<sp/>the<sp/>object.</highlight></codeline>
<codeline lineno="298"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="299"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parameters</highlight></codeline>
<codeline lineno="300"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>----------</highlight></codeline>
<codeline lineno="301"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="302"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpu<sp/>:<sp/>bool</highlight></codeline>
<codeline lineno="303"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>`True`,<sp/>the<sp/>matrix<sp/>array<sp/>is<sp/>initialized<sp/>on<sp/>GPU<sp/>device.</highlight></codeline>
<codeline lineno="304"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="305"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_gpu_devices<sp/>:<sp/>int</highlight></codeline>
<codeline lineno="306"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Number<sp/>of<sp/>GPU<sp/>devices<sp/>to<sp/>use.</highlight></codeline>
<codeline lineno="307"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>gpu:</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a9419f250b1cd609d1172b3d09d251a2b" kindref="member">initialized_on_gpu</ref><ref refid="classimate_1_1linear__operator_1_1linear__operator_1_1LinearOperator_1aabae3ed2584e6d9736b414530da4c12d" kindref="member">initialized_on_gpu</ref>initialized_on_gpu:</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Create<sp/>a<sp/>linear<sp/>operator<sp/>on<sp/>GPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.._cu_linear_operator<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>pycuAffineMatrixFunction</highlight></codeline>
<codeline lineno="315" refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a3295bf13f7b151a5766ae1aded578233" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a3295bf13f7b151a5766ae1aded578233" kindref="member">gpu_Aop</ref><ref refid="classimate_1_1linear__operator_1_1linear__operator_1_1LinearOperator_1ac0599d2b7f1a666a3b56e2449b2218bb" kindref="member">gpu_Aop</ref>gpu_Aop<sp/>=<sp/>pycuAffineMatrixFunction(self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1adee1352dcd1822c2ffa56b84c521c042" kindref="member">A</ref>A,<sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1adda9526c43798cce0ccc469a9d58e0c0" kindref="member">B</ref>B,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_gpu_devices)</highlight></codeline>
<codeline lineno="317" refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a9419f250b1cd609d1172b3d09d251a2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a9419f250b1cd609d1172b3d09d251a2b" kindref="member">initialized_on_gpu</ref><ref refid="classimate_1_1linear__operator_1_1linear__operator_1_1LinearOperator_1aabae3ed2584e6d9736b414530da4c12d" kindref="member">initialized_on_gpu</ref>initialized_on_gpu<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>num_gpu_devices<sp/>!=<sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1ae619121cd5738b33b0ed89e09737dc6d" kindref="member">num_gpu_devices</ref><ref refid="classimate_1_1linear__operator_1_1linear__operator_1_1LinearOperator_1a63c4fd51ae6ae5eda386b3c2b7a5822a" kindref="member">num_gpu_devices</ref>num_gpu_devices:</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Get<sp/>the<sp/>actual<sp/>(all)<sp/>number<sp/>of<sp/>gpu<sp/>devices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device_properties_dict<sp/>=<sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a3295bf13f7b151a5766ae1aded578233" kindref="member">gpu_Aop</ref><ref refid="classimate_1_1linear__operator_1_1linear__operator_1_1LinearOperator_1ac0599d2b7f1a666a3b56e2449b2218bb" kindref="member">gpu_Aop</ref>gpu_Aop.get_device_properties()</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_all_gpu_devices<sp/>=<sp/>device_properties_dict[</highlight><highlight class="stringliteral">&apos;num_devices&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>number<sp/>of<sp/>gpu<sp/>devices<sp/>is<sp/>zero,<sp/>it<sp/>means<sp/>all<sp/>gpu<sp/>devices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>were<sp/>used.<sp/>Exclude<sp/>cases<sp/>when<sp/>one<sp/>of<sp/>num_gpu_devices<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>self.num_gpu_devices<sp/>is<sp/>zero<sp/>and<sp/>the<sp/>other<sp/>is<sp/>equal<sp/>to<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>gpu<sp/>devices<sp/>to<sp/>avoid<sp/>unnecessary<sp/>reallocation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reallocate<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_gpu_devices<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="331" refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1ae619121cd5738b33b0ed89e09737dc6d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1ae619121cd5738b33b0ed89e09737dc6d" kindref="member">num_gpu_devices</ref><ref refid="classimate_1_1linear__operator_1_1linear__operator_1_1LinearOperator_1a63c4fd51ae6ae5eda386b3c2b7a5822a" kindref="member">num_gpu_devices</ref>num_gpu_devices<sp/>==<sp/>num_all_gpu_devices):</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reallocate<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>(num_gpu_devices<sp/>==<sp/>num_all_gpu_devices)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1ae619121cd5738b33b0ed89e09737dc6d" kindref="member">num_gpu_devices</ref><ref refid="classimate_1_1linear__operator_1_1linear__operator_1_1LinearOperator_1a63c4fd51ae6ae5eda386b3c2b7a5822a" kindref="member">num_gpu_devices</ref>num_gpu_devices<sp/>==<sp/>0):</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reallocate<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>reallocate:</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Create<sp/>a<sp/>linear<sp/>operator<sp/>on<sp/>GPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.._cu_linear_operator<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>pycuAffineMatrixFunction</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>allocated<sp/>before,<sp/>deallocate.<sp/>This<sp/>occurs<sp/>then<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>number<sp/>of<sp/>gpu<sp/>devices<sp/>changes<sp/>and<sp/>gpu_Aop<sp/>needs<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>reallocated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a3295bf13f7b151a5766ae1aded578233" kindref="member">gpu_Aop</ref><ref refid="classimate_1_1linear__operator_1_1linear__operator_1_1LinearOperator_1ac0599d2b7f1a666a3b56e2449b2218bb" kindref="member">gpu_Aop</ref>gpu_Aop<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>del<sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a3295bf13f7b151a5766ae1aded578233" kindref="member">gpu_Aop</ref><ref refid="classimate_1_1linear__operator_1_1linear__operator_1_1LinearOperator_1ac0599d2b7f1a666a3b56e2449b2218bb" kindref="member">gpu_Aop</ref>gpu_Aop</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a3295bf13f7b151a5766ae1aded578233" kindref="member">gpu_Aop</ref><ref refid="classimate_1_1linear__operator_1_1linear__operator_1_1LinearOperator_1ac0599d2b7f1a666a3b56e2449b2218bb" kindref="member">gpu_Aop</ref>gpu_Aop<sp/>=<sp/>pycuAffineMatrixFunction(self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1adee1352dcd1822c2ffa56b84c521c042" kindref="member">A</ref>A,<sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1adda9526c43798cce0ccc469a9d58e0c0" kindref="member">B</ref>B,</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_gpu_devices)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a9419f250b1cd609d1172b3d09d251a2b" kindref="member">initialized_on_gpu</ref><ref refid="classimate_1_1linear__operator_1_1linear__operator_1_1LinearOperator_1aabae3ed2584e6d9736b414530da4c12d" kindref="member">initialized_on_gpu</ref>initialized_on_gpu<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a84df80ff91d2a23ea274d20038e457a5" kindref="member">initialized_on_cpu</ref><ref refid="classimate_1_1linear__operator_1_1linear__operator_1_1LinearOperator_1aea66aad101d23cf6b20842e336484e87" kindref="member">initialized_on_cpu</ref>initialized_on_cpu:</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Create<sp/>a<sp/>linear<sp/>operator<sp/>on<sp/>CPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.._c_linear_operator<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>pycAffineMatrixFunction</highlight></codeline>
<codeline lineno="358" refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a53002fb90de837c9e33b94ff9e6c61e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a53002fb90de837c9e33b94ff9e6c61e3" kindref="member">cpu_Aop</ref><ref refid="classimate_1_1linear__operator_1_1linear__operator_1_1LinearOperator_1aeeada89ec785ec15bb78f4174e4b3e3d" kindref="member">cpu_Aop</ref>cpu_Aop<sp/>=<sp/>pycAffineMatrixFunction(self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1adee1352dcd1822c2ffa56b84c521c042" kindref="member">A</ref>A,<sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1adda9526c43798cce0ccc469a9d58e0c0" kindref="member">B</ref>B)</highlight></codeline>
<codeline lineno="359" refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a84df80ff91d2a23ea274d20038e457a5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a84df80ff91d2a23ea274d20038e457a5" kindref="member">initialized_on_cpu</ref><ref refid="classimate_1_1linear__operator_1_1linear__operator_1_1LinearOperator_1aea66aad101d23cf6b20842e336484e87" kindref="member">initialized_on_cpu</ref>initialized_on_cpu<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361" refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a746544137924805f07028334f11cb2e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a746544137924805f07028334f11cb2e9" kindref="member">gpu</ref><ref refid="classimate_1_1linear__operator_1_1linear__operator_1_1LinearOperator_1aa258b1a36aa9aa5fa238ff13e077d378" kindref="member">gpu</ref>gpu<sp/>=<sp/>gpu</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1ae619121cd5738b33b0ed89e09737dc6d" kindref="member">num_gpu_devices</ref><ref refid="classimate_1_1linear__operator_1_1linear__operator_1_1LinearOperator_1a63c4fd51ae6ae5eda386b3c2b7a5822a" kindref="member">num_gpu_devices</ref>num_gpu_devices<sp/>=<sp/>num_gpu_devices</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>get<sp/>num<sp/>rows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368" refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1aedca2144eb8d12cd5a3a3ee6b99ce145" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1aedca2144eb8d12cd5a3a3ee6b99ce145" kindref="member">get_num_rows</ref>(self):</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="370"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>rows<sp/>of<sp/>the<sp/>matrix.</highlight></codeline>
<codeline lineno="371"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="372"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="373"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="374"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="375"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_rows<sp/>:<sp/>int</highlight></codeline>
<codeline lineno="376"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Number<sp/>of<sp/>rows<sp/>of<sp/>the<sp/>matrix.</highlight></codeline>
<codeline lineno="377"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1adee1352dcd1822c2ffa56b84c521c042" kindref="member">A</ref>A.shape[0]</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>get<sp/>num<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385" refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a27809a99fadd06e770f721cbf458a10c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a27809a99fadd06e770f721cbf458a10c" kindref="member">get_num_columns</ref>(self):</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="387"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>columns<sp/>of<sp/>the<sp/>matrix.</highlight></codeline>
<codeline lineno="388"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="389"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="390"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="391"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="392"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_columns<sp/>:<sp/>int</highlight></codeline>
<codeline lineno="393"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Number<sp/>of<sp/>columns<sp/>of<sp/>the<sp/>matrix.</highlight></codeline>
<codeline lineno="394"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1adee1352dcd1822c2ffa56b84c521c042" kindref="member">A</ref>A.shape[1]</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>=========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>is<sp/>sparse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>=========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402" refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a38aceabf70fe4c6fc59e7a1f5d1d3e0d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a38aceabf70fe4c6fc59e7a1f5d1d3e0d" kindref="member">is_sparse</ref>(self):</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="404"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Determines<sp/>whether<sp/>the<sp/>matrix<sp/>is<sp/>dense<sp/>or<sp/>sparse.</highlight></codeline>
<codeline lineno="405"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="406"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="407"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="408"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="409"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sparse<sp/>:<sp/>bool</highlight></codeline>
<codeline lineno="410"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>`True`,<sp/>the<sp/>matrix<sp/>is<sp/>sparse.<sp/>Otherwise,<sp/>the<sp/>matrix<sp/>is<sp/>dense.</highlight></codeline>
<codeline lineno="411"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isspmatrix(self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1adee1352dcd1822c2ffa56b84c521c042" kindref="member">A</ref>A)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>=======</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>get<sp/>nnz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>=======</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419" refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a4ff7c835fefcd8c165079054d761accc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a4ff7c835fefcd8c165079054d761accc" kindref="member">get_nnz</ref>(self):</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="421"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>non-zero<sp/>elements<sp/>of<sp/>the<sp/>matrix.</highlight></codeline>
<codeline lineno="422"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="423"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="424"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="425"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="426"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nnz<sp/>:<sp/>int</highlight></codeline>
<codeline lineno="427"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Number<sp/>of<sp/>nonzero<sp/>elements<sp/>of<sp/>the<sp/>matrix.</highlight></codeline>
<codeline lineno="428"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a38aceabf70fe4c6fc59e7a1f5d1d3e0d" kindref="member">is_sparse</ref><ref refid="classimate_1_1linear__operator_1_1linear__operator_1_1LinearOperator_1a4fcac45257ee5b20b2f77b04ccbea681" kindref="member">is_sparse</ref>is_sparse():</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1adee1352dcd1822c2ffa56b84c521c042" kindref="member">A</ref>A.nnz</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1aedca2144eb8d12cd5a3a3ee6b99ce145" kindref="member">get_num_rows</ref><ref refid="classimate_1_1linear__operator_1_1linear__operator_1_1LinearOperator_1a388cf364763090fef6bfb00d6f4baeb1" kindref="member">get_num_rows</ref>get_num_rows()<sp/>*<sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a27809a99fadd06e770f721cbf458a10c" kindref="member">get_num_columns</ref><ref refid="classimate_1_1linear__operator_1_1linear__operator_1_1LinearOperator_1a7daf35fa232c7599edda6fb420f384db" kindref="member">get_num_columns</ref>get_num_columns()</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>get<sp/>density</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>===========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439" refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a2afc59a97d73e88bf617d4733f81983b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a2afc59a97d73e88bf617d4733f81983b" kindref="member">get_density</ref>(self):</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="441"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns<sp/>the<sp/>density<sp/>of<sp/>non-zero<sp/>elements<sp/>of<sp/>the<sp/>matrix.</highlight></codeline>
<codeline lineno="442"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="443"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns</highlight></codeline>
<codeline lineno="444"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------</highlight></codeline>
<codeline lineno="445"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="446"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>density<sp/>:<sp/>float</highlight></codeline>
<codeline lineno="447"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>density<sp/>of<sp/>the<sp/>nonzero<sp/>elements<sp/>of<sp/>the<sp/>sparse<sp/>matrix.<sp/>If<sp/>the</highlight></codeline>
<codeline lineno="448"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matrix<sp/>is<sp/>dense,<sp/>the<sp/>density<sp/>is<sp/>`1`.</highlight></codeline>
<codeline lineno="449"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a38aceabf70fe4c6fc59e7a1f5d1d3e0d" kindref="member">is_sparse</ref><ref refid="classimate_1_1linear__operator_1_1linear__operator_1_1LinearOperator_1a4fcac45257ee5b20b2f77b04ccbea681" kindref="member">is_sparse</ref>is_sparse():</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a4ff7c835fefcd8c165079054d761accc" kindref="member">get_nnz</ref><ref refid="classimate_1_1linear__operator_1_1linear__operator_1_1LinearOperator_1a7ce016ae30a0c3d5f2cdf333ddde2743" kindref="member">get_nnz</ref>get_nnz()<sp/>/<sp/>\</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1aedca2144eb8d12cd5a3a3ee6b99ce145" kindref="member">get_num_rows</ref><ref refid="classimate_1_1linear__operator_1_1linear__operator_1_1LinearOperator_1a388cf364763090fef6bfb00d6f4baeb1" kindref="member">get_num_rows</ref>get_num_rows()<sp/>*<sp/>self.<ref refid="classimate_1_1linear__operator_1_1affine__matrix__function_1_1AffineMatrixFunction_1a27809a99fadd06e770f721cbf458a10c" kindref="member">get_num_columns</ref><ref refid="classimate_1_1linear__operator_1_1linear__operator_1_1LinearOperator_1a7daf35fa232c7599edda6fb420f384db" kindref="member">get_num_columns</ref>get_num_columns())</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1.0</highlight></codeline>
    </programlisting>
    <location file="/home/sia/work/ADCP/Noise-Estimation/code/imate/imate/linear_operator/affine_matrix_function.py"/>
  </compounddef>
</doxygen>
