# SPDX-FileCopyrightText: Copyright 2021, Siavash Ameli <sameli@berkeley.edu>
# SPDX-License-Identifier: BSD-3-Clause
# SPDX-FileType: SOURCE
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the license found in the LICENSE.txt file in the root
# directory of this source tree.


# ======================
# pypi macosx arm64 cibw
# ======================

pypi_macosx_arm64_cibw: &PYPI_MACOSX_ARM64_CIBW
  install_cibuildwheel_script:
    - python -m pip install cibuildwheel
  cibuildwheel_script:
    - cibuildwheel
  pypi_macosx_arm64_wheels_artifacts:
    path: "wheelhouse/*.whl"


# ==============================
# pypi build wheels macosx arm64
# ==============================

pypi_build_wheels_macosx_arm64_task:
  use_compute_credits: $CIRRUS_USER_COLLABORATOR == 'true'
  macos_instance:
    image: ghcr.io/cirruslabs/macos-sonoma-xcode:latest
    cpu: 1
    memory: 8G
  matrix:
    - env:
        CIBW_BUILD: "cp39-macosx_arm64"
    - env:
        CIBW_BUILD: "cp310-macosx_arm64"
    - env:
        CIBW_BUILD: "cp311-macosx_arm64"
    - env:
        CIBW_BUILD: "cp312-macosx_arm64"
  env:
    PATH: /opt/homebrew/opt/python@3.10/bin:/usr/local/lib:/usr/local/include:$PATH
    # Specifying CIBW_ENVIRONMENT_MACOS overrides pyproject.toml, so include
    # all the settings from there, otherwise they're lost.
    # SDKROOT needs to be set for repackaged conda-forge gfortran compilers
    # supplied by isuruf.
    # Find out SDKROOT via `xcrun --sdk macosx --show-sdk-path`
    CIBW_ENVIRONMENT_MACOS: >
      SDKROOT=/Applications/Xcode-15.1.0.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX14.2.sdk
      LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
      CFLAGS="-I/opt/homebrew/opt/libomp/include $CFLAGS"
      CXXFLAGS="-I/opt/homebrew/opt/libomp/include $CXXFLAGS"
      LDFLAGS="-L/opt/homebrew/opt/libomp/lib $LDFLAGS"
      LIBRARY_PATH="/opt/homebrew/opt/libomp/lib:$LIBRARY_PATH"
      USE_LONG_INT=0
      USE_UNSIGNED_LONG_INT=0
      USE_CBLAS=0
      USE_CUDA=0
    CIBW_ARCHS: "arm64"
    # CIBW_BUILD: "*-macosx_arm64"
    CIBW_SKIP: "pp37-* cp36-* cp37-* cp38-*"
    CIBW_BUILD_VERBOSITY: "3"
    CIBW_BEFORE_BUILD: "pip install delocate; brew install libomp"
    CIBW_TEST_SKIP: "*_universal2:arm64"

  build_script:
    - uname -m
    - brew install python@3.11
    - sudo ln -s /opt/homebrew/opt/python@3.11/bin/python3.11 /usr/local/bin/python
    - which python
    - python -c "import platform;print(platform.python_version());print(platform.system());print(platform.machine())"
    - clang --version
  <<: *PYPI_MACOSX_ARM64_CIBW


# ===============================
# pypi upload wheels macosx arm64
# ===============================

pypi_upload_wheels_macosx_arm64_task:
  use_compute_credits: $CIRRUS_USER_COLLABORATOR == 'true'
  # Artifacts don't seem to be persistent from task to task.
  # Rather than upload wheels at the end of each cibuildwheel run we do a
  # final upload here. This is because a run may be on different OS for
  # which bash, etc, may not be present.
  depends_on:
    - pypi_build_wheels_macosx_arm64
  compute_engine_instance:
    image_project: cirrus-images
    image: family/docker-builder
    platform: linux
    cpu: 1
    memory: 4G

  env:
    PYPI_PASSWORD: ENCRYPTED[!ca9efd011d76de6bb300528c40d7f8d2772b9a0e9054626d097a55e4b69e7e1e4897fe8d9cee30d12292afd48d69ec58!]

  upload_script: |
    apt-get update
    apt-get install -y curl wget

    # The name of the zip file is derived from the `wheels_artifact` line.
    # If you change the artifact line to `myfile_artifact` then it would be
    # called myfile.zip
    curl https://api.cirrus-ci.com/v1/artifact/build/$CIRRUS_BUILD_ID/pypi_macosx_arm64_wheels.zip --output wheels.zip
    mkdir -p dist
    unzip -j wheels.zip -d dist

    source ./tools/wheels/upload_wheels.sh
    install_anaconda "linux_x86_64"
    upload_wheels_pypi


# ======================
# pypi test macosx arm64
# ======================

pypi_test_macosx_arm64_task:
  use_compute_credits: $CIRRUS_USER_COLLABORATOR == 'true'
  macos_instance:
    image: ghcr.io/cirruslabs/macos-sonoma-base:latest
    cpu: 1
    memory: 4G
  depends_on:
    - pypi_upload_wheels_macosx_arm64
  matrix:
    # - env:
    #     PY_VER: "3.9"
    - env:
        PY_VER: "3.10"
    - env:
        PY_VER: "3.11"
    # - env:
    #     PY_VER: "3.12"

  test_script:
    - brew install pyenv
    - PY_VER_NAME=`pyenv install -l | grep " ${PY_VER}.*" -m 1`
    - pyenv install ${PY_VER_NAME}
    - pyenv local ${PY_VER_NAME}
    - eval "$(command pyenv init -)"
    - eval "$(command pyenv init --path)"
    - set -x
    - which python
    - uname -m
    - python -c "import platform;print(platform.python_version());print(platform.system());print(platform.machine())"
    - mv imate imate_do_not_import
    - rm tests/test_cu_linear_operator.py  # this raises ImportError
    - python -m pip install --upgrade pip
    - python -m pip install --prefer-binary --upgrade imate
    - python -m pip install numpy
    - python -m pip install -r tests/requirements.txt
    - python -m pytest
