/* Generated by Cython 0.29.24 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "NPY_NO_DEPRECATED_API",
                "NPY_1_7_API_VERSION"
            ]
        ],
        "include_dirs": [
            "./imate/traceinv",
            "i",
            "m",
            "a",
            "t",
            "e",
            "/",
            "f",
            "u",
            "n",
            "c",
            "t",
            "i",
            "o",
            "n",
            "s",
            "i",
            "m",
            "a",
            "t",
            "e",
            "/",
            "_",
            "c",
            "_",
            "b",
            "a",
            "s",
            "i",
            "c",
            "_",
            "a",
            "l",
            "g",
            "e",
            "b",
            "r",
            "a"
        ],
        "language": "c++",
        "name": "imate.traceinv._hutchinson_method_utilities",
        "sources": [
            "./imate/traceinv/_hutchinson_method_utilities.pyx",
            "imate/functions/functions.cpp",
            "imate/_c_basic_algebra/cblas_interface.cpp",
            "imate/_c_basic_algebra/c_vector_operations.cpp",
            "imate/_c_basic_algebra/c_matrix_operations.cpp"
        ]
    },
    "module_name": "imate.traceinv._hutchinson_method_utilities"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_24"
#define CYTHON_HEX_VERSION 0x001D18F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__imate__traceinv___hutchinson_method_utilities
#define __PYX_HAVE_API__imate__traceinv___hutchinson_method_utilities
/* Early includes */
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "imate/traceinv/_hutchinson_method_utilities.pyx",
};

/*--- Type declarations ---*/

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* Profile.proto */
#ifndef CYTHON_PROFILE
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
  #define CYTHON_PROFILE 0
#else
  #define CYTHON_PROFILE 1
#endif
#endif
#ifndef CYTHON_TRACE_NOGIL
  #define CYTHON_TRACE_NOGIL 0
#else
  #if CYTHON_TRACE_NOGIL && !defined(CYTHON_TRACE)
    #define CYTHON_TRACE 1
  #endif
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL(frame)
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL(frame) Py_CLEAR(frame)
  #endif
  #define __Pyx_TraceDeclarations\
      static PyCodeObject *__pyx_frame_code = NULL;\
      CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;\
      int __Pyx_use_tracing = 0;
  #define __Pyx_TraceFrameInit(codeobj)\
      if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
#if PY_VERSION_HEX >= 0x030a00b1
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->cframe->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_SetTracing(tstate, enable)\
      (tstate)->cframe->use_tracing = (enable)
#else
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_SetTracing(tstate, enable)\
      (tstate)->use_tracing = (enable)
#endif
  #ifdef WITH_THREAD
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  if (nogil) {\
      if (CYTHON_TRACE_NOGIL) {\
          PyThreadState *tstate;\
          PyGILState_STATE state = PyGILState_Ensure();\
          tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 1, 1)) {\
              __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          }\
          PyGILState_Release(state);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  } else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (__Pyx_IsTracing(tstate, 1, 1)) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #else
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  {   PyThreadState* tstate = PyThreadState_GET();\
      if (__Pyx_IsTracing(tstate, 1, 1)) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #endif
  #define __Pyx_TraceException()\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 1)) {\
          tstate->tracing++;\
          __Pyx_SetTracing(tstate, 0);\
          PyObject *exc_info = __Pyx_GetExceptionTuple(tstate);\
          if (exc_info) {\
              if (CYTHON_TRACE && tstate->c_tracefunc)\
                  tstate->c_tracefunc(\
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              tstate->c_profilefunc(\
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              Py_DECREF(exc_info);\
          }\
          __Pyx_SetTracing(tstate, 1);\
          tstate->tracing--;\
      }\
  }
  static void __Pyx_call_return_trace_func(PyThreadState *tstate, PyFrameObject *frame, PyObject *result) {
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      tstate->tracing++;
      __Pyx_SetTracing(tstate, 0);
      if (CYTHON_TRACE && tstate->c_tracefunc)
          tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_RETURN, result);
      if (tstate->c_profilefunc)
          tstate->c_profilefunc(tstate->c_profileobj, frame, PyTrace_RETURN, result);
      CYTHON_FRAME_DEL(frame);
      __Pyx_SetTracing(tstate, 1);
      tstate->tracing--;
      __Pyx_ErrRestoreInState(tstate, type, value, traceback);
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (__Pyx_IsTracing(tstate, 0, 0)) {\
                  __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
              }\
              PyGILState_Release(state);\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 0, 0)) {\
              __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
          }\
      }\
  }
  #else
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 0)) {\
          __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
      }\
  }
  #endif
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, PyThreadState* tstate, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceFrameInit(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)   if ((1)); else goto_error;
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result, nogil)
#endif
#if CYTHON_TRACE
  static int __Pyx_call_line_trace_func(PyThreadState *tstate, PyFrameObject *frame, int lineno) {
      int ret;
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_PyFrame_SetLineNumber(frame, lineno);
      tstate->tracing++;
      __Pyx_SetTracing(tstate, 0);
      ret = tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_LINE, NULL);
      __Pyx_SetTracing(tstate, 1);
      tstate->tracing--;
      if (likely(!ret)) {
          __Pyx_ErrRestoreInState(tstate, type, value, traceback);
      } else {
          Py_XDECREF(type);
          Py_XDECREF(value);
          Py_XDECREF(traceback);
      }
      return ret;
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              int ret = 0;\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
                  ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              }\
              PyGILState_Release(state);\
              if (unlikely(ret)) goto_error;\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
              int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              if (unlikely(ret)) goto_error;\
          }\
      }\
  }
  #else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
          int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
          if (unlikely(ret)) goto_error;\
      }\
  }
  #endif
#else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)   if ((1)); else goto_error;
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_SubtractCObj(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_SubtractCObj(op1, op2, floatval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyObjectFormatAndDecref.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f);
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f);

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'imate.traceinv._hutchinson_method_utilities' */
#define __Pyx_MODULE_NAME "imate.traceinv._hutchinson_method_utilities"
extern int __pyx_module_is_main_imate__traceinv___hutchinson_method_utilities;
int __pyx_module_is_main_imate__traceinv___hutchinson_method_utilities = 0;

/* Implementation of 'imate.traceinv._hutchinson_method_utilities' */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_A[] = "A";
static const char __pyx_k_B[] = "B";
static const char __pyx_k_C[] = "C";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_2d[] = "2d";
static const char __pyx_k_3d[] = "%-3d  ";
static const char __pyx_k_4d[] = "4d";
static const char __pyx_k_9e[] = "%9e  ";
static const char __pyx_k_9f[] = "%9f  ";
static const char __pyx_k_10e[] = "%10e   ";
static const char __pyx_k_11s[] = "%11s";
static const char __pyx_k__65[] = "==============================================================================";
static const char __pyx_k__68[] = "--------------------              ---------------------   ---------           ";
static const char __pyx_k__71[] = "";
static const char __pyx_k__72[] = "  ";
static const char __pyx_k__76[] = "-------------------------------------    -------------------------------------";
static const char __pyx_k__78[] = "    ";
static const char __pyx_k__80[] = "                                     ";
static const char __pyx_k__85[] = ", ";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_gen[] = "gen";
static const char __pyx_k_pos[] = "pos";
static const char __pyx_k_sym[] = "sym";
static const char __pyx_k_7_3e[] = "%+7.3e   ";
static const char __pyx_k_8_3f[] = "%8.3f%%  ";
static const char __pyx_k_gram[] = "gram";
static const char __pyx_k_info[] = "info";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_plot[] = "plot";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_10e_2[] = "%10e  ";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_isinf[] = "isinf";
static const char __pyx_k_isnan[] = "isnan";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_trace[] = "trace";
static const char __pyx_k_utf_8[] = "utf-8";
static const char __pyx_k_32_bit[] = "32-bit";
static const char __pyx_k_64_bit[] = "64-bit";
static const char __pyx_k_7_3e_2[] = "%7.3e  ";
static const char __pyx_k_config[] = "                                    config                                    ";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_device[] = "device";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_matrix[] = "matrix";
static const char __pyx_k_solver[] = "solver";
static const char __pyx_k_8s_none[] = " %8s  none  ";
static const char __pyx_k_float32[] = "float32";
static const char __pyx_k_float64[] = "float64";
static const char __pyx_k_generic[] = "generic";
static const char __pyx_k_gram_5s[] = "gram:                           %5s";
static const char __pyx_k_integer[] = "integer";
static const char __pyx_k_ndarray[] = "ndarray";
static const char __pyx_k_process[] = "                                   process                                    ";
static const char __pyx_k_results[] = "                                    results                                   ";
static const char __pyx_k_sym_pos[] = "sym_pos";
static const char __pyx_k_verbose[] = "verbose";
static const char __pyx_k_exponent[] = "exponent";
static const char __pyx_k_isscalar[] = "isscalar";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_converged[] = "converged";
static const char __pyx_k_data_type[] = "data_type";
static const char __pyx_k_symmetric[] = "symmetric";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_error_atol[] = "error_atol";
static const char __pyx_k_error_rtol[] = "error_rtol";
static const char __pyx_k_isspmatrix[] = "isspmatrix";
static const char __pyx_k_matplotlib[] = "matplotlib";
static const char __pyx_k_solver_tol[] = "solver_tol";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_convergence[] = "convergence";
static const char __pyx_k_data_type_2[] = "data_type_";
static const char __pyx_k_exponent_3d[] = "exponent:                         %3d";
static const char __pyx_k_num_threads[] = "num_threads";
static const char __pyx_k_time_device[] = "                 time                                   device                  ";
static const char __pyx_k_data_type_8s[] = "data type:                   %8s";
static const char __pyx_k_num_outliers[] = "num_outliers";
static const char __pyx_k_samples_mean[] = "samples_mean";
static const char __pyx_k_scipy_sparse[] = "scipy.sparse";
static const char __pyx_k_alg_wall_time[] = "alg_wall_time";
static const char __pyx_k_assume_matrix[] = "assume_matrix";
static const char __pyx_k_cpu_proc_time[] = "cpu_proc_time";
static const char __pyx_k_exponent_6_2f[] = "exponent:                      %6.2f";
static const char __pyx_k_num_inquiries[] = "num_inquiries";
static const char __pyx_k_orthogonalize[] = "orthogonalize";
static const char __pyx_k_print_summary[] = "print_summary";
static const char __pyx_k_tot_wall_time[] = "tot_wall_time";
static const char __pyx_k_absolute_error[] = "absolute_error";
static const char __pyx_k_assumption_18s[] = "assumption:        %18s";
static const char __pyx_k_relative_error[] = "relative_error";
static const char __pyx_k_check_arguments[] = "check_arguments";
static const char __pyx_k_max_num_samples[] = "max_num_samples";
static const char __pyx_k_min_num_samples[] = "min_num_samples";
static const char __pyx_k_num_cpu_threads[] = "num_cpu_threads";
static const char __pyx_k_num_gpu_devices[] = "num_gpu_devices";
static const char __pyx_k_solver_tol_8_3e[] = "solver tol:                 %8.3e";
static const char __pyx_k_confidence_level[] = "confidence_level";
static const char __pyx_k_num_samples_used[] = "num_samples_used";
static const char __pyx_k_convergence_error[] = "             convergence                                 error     ";
static const char __pyx_k_method_hutchinson[] = "method:                    hutchinson";
static const char __pyx_k_abs_error_tol_8_3e[] = "abs error tol:              %8.3e";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_load_plot_settings[] = "load_plot_settings";
static const char __pyx_k_max_num_samples_5d[] = "max num samples:                %5d";
static const char __pyx_k_min_num_samples_5d[] = "min num samples:                %5d";
static const char __pyx_k_num_cpu_threads_3d[] = "num cpu threads:                  %3d";
static const char __pyx_k_rel_error_tol_4_2f[] = "rel error tol:                  %4.2f%%";
static const char __pyx_k_symmetric_positive[] = "symmetric-positive";
static const char __pyx_k_gram_cannot_be_None[] = "\"gram\" cannot be None.";
static const char __pyx_k_plot_cannot_be_None[] = "\"plot\" cannot be None.";
static const char __pyx_k_orthogonalization_4s[] = "orthogonalization:               %4s";
static const char __pyx_k_confidence_level_4_2f[] = "confidence level:              %4.2f%%";
static const char __pyx_k_alg_wall_time_sec_8_3e[] = "alg wall time (sec):        %8.3e";
static const char __pyx_k_cpu_proc_time_sec_8_3e[] = "cpu proc time (sec):        %8.3e";
static const char __pyx_k_gram_should_be_boolean[] = "\"gram\" should be boolean.";
static const char __pyx_k_plot_should_be_boolean[] = "\"plot\" should be boolean.";
static const char __pyx_k_tot_wall_time_sec_8_3e[] = "tot wall time (sec):        %8.3e";
static const char __pyx_k_verbose_cannot_be_None[] = "\"verbose\" cannot be None.";
static const char __pyx_k_exponent_cannot_be_None[] = "\"exponent\" cannot be None.";
static const char __pyx_k_inquiries_error_samples[] = "     inquiries                            error            samples            ";
static const char __pyx_k_num_gpu_multiprocessors[] = "num_gpu_multiprocessors";
static const char __pyx_k_assume_matrix_is_invalid[] = "\"assume_matrix\" is invalid.";
static const char __pyx_k_utilities_plot_utilities[] = "_utilities.plot_utilities";
static const char __pyx_k_num_gpu_devices_multiproc[] = "num gpu devices, multiproc:    ";
static const char __pyx_k_verbose_should_be_boolean[] = "\"verbose\" should be boolean.";
static const char __pyx_k_num_threads_cannot_be_None[] = "\"num_threads\" cannot be None.";
static const char __pyx_k_outlier_significance_level[] = "outlier_significance_level";
static const char __pyx_k_matrix_stochastic_estimator[] = "                matrix                            stochastic estimator        ";
static const char __pyx_k_assume_matrix_cannot_be_None[] = "\"assume_matrix\" cannot be None.";
static const char __pyx_k_orthogonalize_cannot_be_None[] = "\"orthogonalize\" cannot be None.";
static const char __pyx_k_error_atol_cannot_be_negative[] = "\"error_atol\" cannot be negative.";
static const char __pyx_k_error_rtol_cannot_be_negative[] = "\"error_rtol\" cannot be negative.";
static const char __pyx_k_exponent_cannot_be_an_integer[] = "\"exponent\" cannot be an integer.";
static const char __pyx_k_gram_should_be_a_scalar_value[] = "\"gram\" should be a scalar value.";
static const char __pyx_k_plot_should_be_a_scalar_value[] = "\"plot\" should be a scalar value.";
static const char __pyx_k_assume_matrix_must_be_a_string[] = "\"assume_matrix\" must be a string.";
static const char __pyx_k_assume_matrix_should_be_either[] = "\"assume_matrix\" should be either \"gen\", \"pos\", \"sym, or \"sym_pos\".";
static const char __pyx_k_data_type_should_be_float32_or[] = "\"data_type\" should be \"float32\" or \"float64\".";
static const char __pyx_k_lancozs_tol_cannot_be_negative[] = "\"lancozs_tol\" cannot be negative.";
static const char __pyx_k_max_num_samples_cannot_be_None[] = "\"max_num_samples\" cannot be None.";
static const char __pyx_k_min_num_samples_cannot_be_None[] = "\"min_num_samples\" cannot be None.";
static const char __pyx_k_num_threads_should_be_a_scalar[] = "\"num_threads\" should be a scalar value.";
static const char __pyx_k_Input_matrix_should_be_a_square[] = "Input matrix should be a square matrix.";
static const char __pyx_k_Input_matrix_should_be_either_a[] = "Input matrix should be either a \"numpy.ndarray\" or a \"scipy.sparse\" matrix.";
static const char __pyx_k_The_sum_of_confidence_level_and[] = "The sum of \"confidence_level\" and \"outlier_significance_level\" should be less than 1.";
static const char __pyx_k_confidence_level_cannot_be_None[] = "\"confidence_level\" cannot be None.";
static const char __pyx_k_confidence_level_should_be_a_fl[] = "\"confidence_level\" should be a float number.";
static const char __pyx_k_confidence_level_should_be_a_sc[] = "\"confidence_level\" should be a scalar.";
static const char __pyx_k_confidence_level_should_be_betw[] = "\"confidence_level\" should be between 0 and 1.";
static const char __pyx_k_error_atol_should_be_a_float_nu[] = "\"error_atol\" should be a float number.";
static const char __pyx_k_error_atol_should_be_a_scalar_v[] = "\"error_atol\" should be a scalar value.";
static const char __pyx_k_error_rtol_should_be_a_float_nu[] = "\"error_rtol\" should be a float number.";
static const char __pyx_k_error_rtol_should_be_a_scalar_v[] = "\"error_rtol\" should be a scalar value.";
static const char __pyx_k_exponent_should_be_a_scalar_val[] = "\"exponent\" should be a scalar value.";
static const char __pyx_k_max_num_samples_should_be_a_sca[] = "\"max_num_samples\" should be a scalar value.";
static const char __pyx_k_max_num_samples_should_be_an_in[] = "\"max_num_samples\" should be an integer.";
static const char __pyx_k_max_num_samples_should_be_at_le[] = "\"max_num_samples\" should be at least one.";
static const char __pyx_k_min_num_samples_cannot_be_great[] = "\"min_num_samples\" cannot be greater than \"max_num_samples\".";
static const char __pyx_k_min_num_samples_should_be_a_sca[] = "\"min_num_samples\" should be a scalar value.";
static const char __pyx_k_min_num_samples_should_be_an_in[] = "\"min_num_samples\" should be an integer.";
static const char __pyx_k_min_num_samples_should_be_at_le[] = "\"min_num_samples\" should be at least one.";
static const char __pyx_k_num_threads_should_be_a_non_neg[] = "\"num_threads\" should be a non-negative integer.";
static const char __pyx_k_num_threads_should_be_an_intege[] = "\"num_threads\" should be an integer.";
static const char __pyx_k_orthogonalize_should_be_a_scala[] = "\"orthogonalize\" should be a scalar value.";
static const char __pyx_k_orthogonalize_should_be_boolean[] = "\"orthogonalize\" should be boolean.";
static const char __pyx_k_outlier_significance_level_4_2f[] = "outlier significance level:     %4.2f%%";
static const char __pyx_k_outlier_significance_level_cann[] = "\"outlier_significance_level\" cannot be None.";
static const char __pyx_k_outlier_significance_level_must[] = "\"outlier_significance_level\" must be a float number.";
static const char __pyx_k_outlier_significance_level_shou[] = "\"outlier_significance_level\" should be a scalar.";
static const char __pyx_k_solver_tol_should_be_a_float_nu[] = "\"solver_tol\" should be a float number.";
static const char __pyx_k_solver_tol_should_be_a_scalar_v[] = "\"solver_tol\" should be a scalar value.";
static const char __pyx_k_verbose_should_be_a_scalar_valu[] = "\"verbose\" should be a scalar value.";
static const char __pyx_k_Cannot_import_modules_for_plotti[] = "Cannot import modules for plotting. Either install \"matplotlib\" and \"seaborn\" packages, or set \"plot=False\".";
static const char __pyx_k_Matrix_B_should_have_the_same_si[] = "Matrix \"B\" should have the same size as matrix \"A\".";
static const char __pyx_k_Matrix_C_should_have_the_same_si[] = "Matrix \"C\" should have the same size as matrix \"A\".";
static const char __pyx_k_When_C_is_given_B_should_also_be[] = "When \"C\" is given, \"B\" should also be given.";
static const char __pyx_k_When_the_input_matrix_A_is_of_ty[] = "When the input matrix \"A\" is of type \"numpy.ndarray\", matrix \"B\" should also be of the same type.";
static const char __pyx_k_i_parameters_trace_absolute_rela[] = "i         parameters       trace    absolute   relative   num   out  converged";
static const char __pyx_k_imate_traceinv__hutchinson_metho[] = "imate/traceinv/_hutchinson_method_utilities.pyx";
static const char __pyx_k_num_gpu_threads_per_multiproc_4d[] = "num gpu threads per multiproc:   %4d";
static const char __pyx_k_num_gpu_threads_per_multiprocess[] = "num_gpu_threads_per_multiprocessor";
static const char __pyx_k_outlier_significance_level_must_2[] = "\"outlier_significance_level\" must be in [0, 1] interval.";
static const char __pyx_k_When_the_input_matrix_A_is_of_ty_2[] = "When the input matrix \"A\" is of type \"scipy.sparse\", matrix \"B\" should also be of the same type.";
static const char __pyx_k_When_the_input_matrix_A_is_of_ty_3[] = "When the input matrix \"A\" is of type \"numpy.ndarray\", matrix \"C\" should also be of the same type.";
static const char __pyx_k_When_the_input_matrix_A_is_of_ty_4[] = "When the input matrix \"A\" is of type \"scipy.sparse\", matrix \"C\" should also be of the same type.";
static const char __pyx_k_imate_traceinv__hutchinson_metho_2[] = "imate.traceinv._hutchinson_method_utilities";
static PyObject *__pyx_kp_u_10e;
static PyObject *__pyx_kp_u_10e_2;
static PyObject *__pyx_kp_u_11s;
static PyObject *__pyx_kp_u_2d;
static PyObject *__pyx_kp_u_32_bit;
static PyObject *__pyx_kp_u_3d;
static PyObject *__pyx_kp_u_4d;
static PyObject *__pyx_kp_u_64_bit;
static PyObject *__pyx_kp_u_7_3e;
static PyObject *__pyx_kp_u_7_3e_2;
static PyObject *__pyx_kp_u_8_3f;
static PyObject *__pyx_kp_u_8s_none;
static PyObject *__pyx_kp_u_9e;
static PyObject *__pyx_kp_u_9f;
static PyObject *__pyx_n_s_A;
static PyObject *__pyx_n_s_B;
static PyObject *__pyx_n_s_C;
static PyObject *__pyx_kp_u_Cannot_import_modules_for_plotti;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_u_Input_matrix_should_be_a_square;
static PyObject *__pyx_kp_u_Input_matrix_should_be_either_a;
static PyObject *__pyx_kp_u_Matrix_B_should_have_the_same_si;
static PyObject *__pyx_kp_u_Matrix_C_should_have_the_same_si;
static PyObject *__pyx_kp_u_The_sum_of_confidence_level_and;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_u_When_C_is_given_B_should_also_be;
static PyObject *__pyx_kp_u_When_the_input_matrix_A_is_of_ty;
static PyObject *__pyx_kp_u_When_the_input_matrix_A_is_of_ty_2;
static PyObject *__pyx_kp_u_When_the_input_matrix_A_is_of_ty_3;
static PyObject *__pyx_kp_u_When_the_input_matrix_A_is_of_ty_4;
static PyObject *__pyx_kp_u__65;
static PyObject *__pyx_kp_u__68;
static PyObject *__pyx_kp_u__71;
static PyObject *__pyx_kp_u__72;
static PyObject *__pyx_kp_u__76;
static PyObject *__pyx_kp_u__78;
static PyObject *__pyx_kp_u__80;
static PyObject *__pyx_kp_u__85;
static PyObject *__pyx_kp_u_abs_error_tol_8_3e;
static PyObject *__pyx_n_s_absolute_error;
static PyObject *__pyx_n_u_absolute_error;
static PyObject *__pyx_n_s_alg_wall_time;
static PyObject *__pyx_n_u_alg_wall_time;
static PyObject *__pyx_kp_u_alg_wall_time_sec_8_3e;
static PyObject *__pyx_n_s_assume_matrix;
static PyObject *__pyx_n_u_assume_matrix;
static PyObject *__pyx_kp_u_assume_matrix_cannot_be_None;
static PyObject *__pyx_kp_u_assume_matrix_is_invalid;
static PyObject *__pyx_kp_u_assume_matrix_must_be_a_string;
static PyObject *__pyx_kp_u_assume_matrix_should_be_either;
static PyObject *__pyx_kp_u_assumption_18s;
static PyObject *__pyx_n_s_check_arguments;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_confidence_level;
static PyObject *__pyx_n_u_confidence_level;
static PyObject *__pyx_kp_u_confidence_level_4_2f;
static PyObject *__pyx_kp_u_confidence_level_cannot_be_None;
static PyObject *__pyx_kp_u_confidence_level_should_be_a_fl;
static PyObject *__pyx_kp_u_confidence_level_should_be_a_sc;
static PyObject *__pyx_kp_u_confidence_level_should_be_betw;
static PyObject *__pyx_kp_u_config;
static PyObject *__pyx_n_s_converged;
static PyObject *__pyx_n_u_converged;
static PyObject *__pyx_n_u_convergence;
static PyObject *__pyx_kp_u_convergence_error;
static PyObject *__pyx_n_s_cpu_proc_time;
static PyObject *__pyx_n_u_cpu_proc_time;
static PyObject *__pyx_kp_u_cpu_proc_time_sec_8_3e;
static PyObject *__pyx_n_s_data_type;
static PyObject *__pyx_n_u_data_type;
static PyObject *__pyx_n_s_data_type_2;
static PyObject *__pyx_kp_u_data_type_8s;
static PyObject *__pyx_kp_u_data_type_should_be_float32_or;
static PyObject *__pyx_n_s_decode;
static PyObject *__pyx_n_u_device;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_u_error;
static PyObject *__pyx_n_s_error_atol;
static PyObject *__pyx_n_u_error_atol;
static PyObject *__pyx_kp_u_error_atol_cannot_be_negative;
static PyObject *__pyx_kp_u_error_atol_should_be_a_float_nu;
static PyObject *__pyx_kp_u_error_atol_should_be_a_scalar_v;
static PyObject *__pyx_n_s_error_rtol;
static PyObject *__pyx_n_u_error_rtol;
static PyObject *__pyx_kp_u_error_rtol_cannot_be_negative;
static PyObject *__pyx_kp_u_error_rtol_should_be_a_float_nu;
static PyObject *__pyx_kp_u_error_rtol_should_be_a_scalar_v;
static PyObject *__pyx_n_s_exponent;
static PyObject *__pyx_n_u_exponent;
static PyObject *__pyx_kp_u_exponent_3d;
static PyObject *__pyx_kp_u_exponent_6_2f;
static PyObject *__pyx_kp_u_exponent_cannot_be_None;
static PyObject *__pyx_kp_u_exponent_cannot_be_an_integer;
static PyObject *__pyx_kp_u_exponent_should_be_a_scalar_val;
static PyObject *__pyx_n_u_float32;
static PyObject *__pyx_n_u_float64;
static PyObject *__pyx_n_u_gen;
static PyObject *__pyx_n_u_generic;
static PyObject *__pyx_n_s_gram;
static PyObject *__pyx_n_u_gram;
static PyObject *__pyx_kp_u_gram_5s;
static PyObject *__pyx_kp_u_gram_cannot_be_None;
static PyObject *__pyx_kp_u_gram_should_be_a_scalar_value;
static PyObject *__pyx_kp_u_gram_should_be_boolean;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_kp_u_i_parameters_trace_absolute_rela;
static PyObject *__pyx_kp_s_imate_traceinv__hutchinson_metho;
static PyObject *__pyx_n_s_imate_traceinv__hutchinson_metho_2;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_info;
static PyObject *__pyx_kp_u_inquiries_error_samples;
static PyObject *__pyx_n_s_integer;
static PyObject *__pyx_n_s_isinf;
static PyObject *__pyx_n_s_isnan;
static PyObject *__pyx_n_s_isscalar;
static PyObject *__pyx_n_s_isspmatrix;
static PyObject *__pyx_kp_u_lancozs_tol_cannot_be_negative;
static PyObject *__pyx_n_s_load_plot_settings;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_matplotlib;
static PyObject *__pyx_n_u_matrix;
static PyObject *__pyx_kp_u_matrix_stochastic_estimator;
static PyObject *__pyx_n_s_max_num_samples;
static PyObject *__pyx_n_u_max_num_samples;
static PyObject *__pyx_kp_u_max_num_samples_5d;
static PyObject *__pyx_kp_u_max_num_samples_cannot_be_None;
static PyObject *__pyx_kp_u_max_num_samples_should_be_a_sca;
static PyObject *__pyx_kp_u_max_num_samples_should_be_an_in;
static PyObject *__pyx_kp_u_max_num_samples_should_be_at_le;
static PyObject *__pyx_kp_u_method_hutchinson;
static PyObject *__pyx_n_s_min_num_samples;
static PyObject *__pyx_n_u_min_num_samples;
static PyObject *__pyx_kp_u_min_num_samples_5d;
static PyObject *__pyx_kp_u_min_num_samples_cannot_be_None;
static PyObject *__pyx_kp_u_min_num_samples_cannot_be_great;
static PyObject *__pyx_kp_u_min_num_samples_should_be_a_sca;
static PyObject *__pyx_kp_u_min_num_samples_should_be_an_in;
static PyObject *__pyx_kp_u_min_num_samples_should_be_at_le;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_ndarray;
static PyObject *__pyx_n_s_num_cpu_threads;
static PyObject *__pyx_n_u_num_cpu_threads;
static PyObject *__pyx_kp_u_num_cpu_threads_3d;
static PyObject *__pyx_n_s_num_gpu_devices;
static PyObject *__pyx_n_u_num_gpu_devices;
static PyObject *__pyx_kp_u_num_gpu_devices_multiproc;
static PyObject *__pyx_n_s_num_gpu_multiprocessors;
static PyObject *__pyx_n_u_num_gpu_multiprocessors;
static PyObject *__pyx_kp_u_num_gpu_threads_per_multiproc_4d;
static PyObject *__pyx_n_s_num_gpu_threads_per_multiprocess;
static PyObject *__pyx_n_u_num_gpu_threads_per_multiprocess;
static PyObject *__pyx_n_s_num_inquiries;
static PyObject *__pyx_n_u_num_inquiries;
static PyObject *__pyx_n_s_num_outliers;
static PyObject *__pyx_n_u_num_outliers;
static PyObject *__pyx_n_s_num_samples_used;
static PyObject *__pyx_n_u_num_samples_used;
static PyObject *__pyx_n_s_num_threads;
static PyObject *__pyx_kp_u_num_threads_cannot_be_None;
static PyObject *__pyx_kp_u_num_threads_should_be_a_non_neg;
static PyObject *__pyx_kp_u_num_threads_should_be_a_scalar;
static PyObject *__pyx_kp_u_num_threads_should_be_an_intege;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_u_orthogonalization_4s;
static PyObject *__pyx_n_s_orthogonalize;
static PyObject *__pyx_n_u_orthogonalize;
static PyObject *__pyx_kp_u_orthogonalize_cannot_be_None;
static PyObject *__pyx_kp_u_orthogonalize_should_be_a_scala;
static PyObject *__pyx_kp_u_orthogonalize_should_be_boolean;
static PyObject *__pyx_n_s_outlier_significance_level;
static PyObject *__pyx_n_u_outlier_significance_level;
static PyObject *__pyx_kp_u_outlier_significance_level_4_2f;
static PyObject *__pyx_kp_u_outlier_significance_level_cann;
static PyObject *__pyx_kp_u_outlier_significance_level_must;
static PyObject *__pyx_kp_u_outlier_significance_level_must_2;
static PyObject *__pyx_kp_u_outlier_significance_level_shou;
static PyObject *__pyx_n_s_plot;
static PyObject *__pyx_kp_u_plot_cannot_be_None;
static PyObject *__pyx_kp_u_plot_should_be_a_scalar_value;
static PyObject *__pyx_kp_u_plot_should_be_boolean;
static PyObject *__pyx_n_u_pos;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_print_summary;
static PyObject *__pyx_kp_u_process;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_kp_u_rel_error_tol_4_2f;
static PyObject *__pyx_n_s_relative_error;
static PyObject *__pyx_n_u_relative_error;
static PyObject *__pyx_kp_u_results;
static PyObject *__pyx_n_u_samples_mean;
static PyObject *__pyx_n_s_scipy_sparse;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_u_solver;
static PyObject *__pyx_n_s_solver_tol;
static PyObject *__pyx_n_u_solver_tol;
static PyObject *__pyx_kp_u_solver_tol_8_3e;
static PyObject *__pyx_kp_u_solver_tol_should_be_a_float_nu;
static PyObject *__pyx_kp_u_solver_tol_should_be_a_scalar_v;
static PyObject *__pyx_n_u_sym;
static PyObject *__pyx_n_u_sym_pos;
static PyObject *__pyx_n_u_symmetric;
static PyObject *__pyx_kp_u_symmetric_positive;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_u_time;
static PyObject *__pyx_kp_u_time_device;
static PyObject *__pyx_n_s_tot_wall_time;
static PyObject *__pyx_n_u_tot_wall_time;
static PyObject *__pyx_kp_u_tot_wall_time_sec_8_3e;
static PyObject *__pyx_n_s_trace;
static PyObject *__pyx_kp_u_utf_8;
static PyObject *__pyx_n_s_utilities_plot_utilities;
static PyObject *__pyx_n_s_verbose;
static PyObject *__pyx_kp_u_verbose_cannot_be_None;
static PyObject *__pyx_kp_u_verbose_should_be_a_scalar_valu;
static PyObject *__pyx_kp_u_verbose_should_be_boolean;
static PyObject *__pyx_pf_5imate_8traceinv_28_hutchinson_method_utilities_check_arguments(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_A, PyObject *__pyx_v_B, PyObject *__pyx_v_C, PyObject *__pyx_v_gram, PyObject *__pyx_v_exponent, PyObject *__pyx_v_assume_matrix, PyObject *__pyx_v_min_num_samples, PyObject *__pyx_v_max_num_samples, PyObject *__pyx_v_error_atol, PyObject *__pyx_v_error_rtol, PyObject *__pyx_v_confidence_level, PyObject *__pyx_v_outlier_significance_level, PyObject *__pyx_v_solver_tol, PyObject *__pyx_v_orthogonalize, PyObject *__pyx_v_num_threads, PyObject *__pyx_v_verbose, PyObject *__pyx_v_plot); /* proto */
static PyObject *__pyx_pf_5imate_8traceinv_28_hutchinson_method_utilities_2print_summary(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_info); /* proto */
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_float_100_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_codeobj_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_codeobj__61;
/* Late includes */

/* "imate/traceinv/_hutchinson_method_utilities.pyx":22
 * # ===============
 * 
 * def check_arguments(             # <<<<<<<<<<<<<<
 *         A,
 *         B,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imate_8traceinv_28_hutchinson_method_utilities_1check_arguments(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5imate_8traceinv_28_hutchinson_method_utilities_check_arguments[] = "check_arguments(A, B, C, gram, exponent, assume_matrix, min_num_samples, max_num_samples, error_atol, error_rtol, confidence_level, outlier_significance_level, solver_tol, orthogonalize, num_threads, verbose, plot)\n\n    Checks the type and value of the parameters.\n    ";
static PyMethodDef __pyx_mdef_5imate_8traceinv_28_hutchinson_method_utilities_1check_arguments = {"check_arguments", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5imate_8traceinv_28_hutchinson_method_utilities_1check_arguments, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5imate_8traceinv_28_hutchinson_method_utilities_check_arguments};
static PyObject *__pyx_pw_5imate_8traceinv_28_hutchinson_method_utilities_1check_arguments(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_A = 0;
  PyObject *__pyx_v_B = 0;
  PyObject *__pyx_v_C = 0;
  PyObject *__pyx_v_gram = 0;
  PyObject *__pyx_v_exponent = 0;
  PyObject *__pyx_v_assume_matrix = 0;
  PyObject *__pyx_v_min_num_samples = 0;
  PyObject *__pyx_v_max_num_samples = 0;
  PyObject *__pyx_v_error_atol = 0;
  PyObject *__pyx_v_error_rtol = 0;
  PyObject *__pyx_v_confidence_level = 0;
  PyObject *__pyx_v_outlier_significance_level = 0;
  PyObject *__pyx_v_solver_tol = 0;
  PyObject *__pyx_v_orthogonalize = 0;
  PyObject *__pyx_v_num_threads = 0;
  PyObject *__pyx_v_verbose = 0;
  PyObject *__pyx_v_plot = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_arguments (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_A,&__pyx_n_s_B,&__pyx_n_s_C,&__pyx_n_s_gram,&__pyx_n_s_exponent,&__pyx_n_s_assume_matrix,&__pyx_n_s_min_num_samples,&__pyx_n_s_max_num_samples,&__pyx_n_s_error_atol,&__pyx_n_s_error_rtol,&__pyx_n_s_confidence_level,&__pyx_n_s_outlier_significance_level,&__pyx_n_s_solver_tol,&__pyx_n_s_orthogonalize,&__pyx_n_s_num_threads,&__pyx_n_s_verbose,&__pyx_n_s_plot,0};
    PyObject* values[17] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_B)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("check_arguments", 1, 17, 17, 1); __PYX_ERR(0, 22, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_C)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("check_arguments", 1, 17, 17, 2); __PYX_ERR(0, 22, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gram)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("check_arguments", 1, 17, 17, 3); __PYX_ERR(0, 22, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exponent)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("check_arguments", 1, 17, 17, 4); __PYX_ERR(0, 22, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_assume_matrix)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("check_arguments", 1, 17, 17, 5); __PYX_ERR(0, 22, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_num_samples)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("check_arguments", 1, 17, 17, 6); __PYX_ERR(0, 22, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_num_samples)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("check_arguments", 1, 17, 17, 7); __PYX_ERR(0, 22, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_error_atol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("check_arguments", 1, 17, 17, 8); __PYX_ERR(0, 22, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_error_rtol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("check_arguments", 1, 17, 17, 9); __PYX_ERR(0, 22, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_confidence_level)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("check_arguments", 1, 17, 17, 10); __PYX_ERR(0, 22, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_outlier_significance_level)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("check_arguments", 1, 17, 17, 11); __PYX_ERR(0, 22, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_solver_tol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("check_arguments", 1, 17, 17, 12); __PYX_ERR(0, 22, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_orthogonalize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("check_arguments", 1, 17, 17, 13); __PYX_ERR(0, 22, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_threads)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("check_arguments", 1, 17, 17, 14); __PYX_ERR(0, 22, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (likely((values[15] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_verbose)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("check_arguments", 1, 17, 17, 15); __PYX_ERR(0, 22, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 16:
        if (likely((values[16] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_plot)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("check_arguments", 1, 17, 17, 16); __PYX_ERR(0, 22, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "check_arguments") < 0)) __PYX_ERR(0, 22, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 17) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
    }
    __pyx_v_A = values[0];
    __pyx_v_B = values[1];
    __pyx_v_C = values[2];
    __pyx_v_gram = values[3];
    __pyx_v_exponent = values[4];
    __pyx_v_assume_matrix = values[5];
    __pyx_v_min_num_samples = values[6];
    __pyx_v_max_num_samples = values[7];
    __pyx_v_error_atol = values[8];
    __pyx_v_error_rtol = values[9];
    __pyx_v_confidence_level = values[10];
    __pyx_v_outlier_significance_level = values[11];
    __pyx_v_solver_tol = values[12];
    __pyx_v_orthogonalize = values[13];
    __pyx_v_num_threads = values[14];
    __pyx_v_verbose = values[15];
    __pyx_v_plot = values[16];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("check_arguments", 1, 17, 17, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 22, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("imate.traceinv._hutchinson_method_utilities.check_arguments", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5imate_8traceinv_28_hutchinson_method_utilities_check_arguments(__pyx_self, __pyx_v_A, __pyx_v_B, __pyx_v_C, __pyx_v_gram, __pyx_v_exponent, __pyx_v_assume_matrix, __pyx_v_min_num_samples, __pyx_v_max_num_samples, __pyx_v_error_atol, __pyx_v_error_rtol, __pyx_v_confidence_level, __pyx_v_outlier_significance_level, __pyx_v_solver_tol, __pyx_v_orthogonalize, __pyx_v_num_threads, __pyx_v_verbose, __pyx_v_plot);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imate_8traceinv_28_hutchinson_method_utilities_check_arguments(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_A, PyObject *__pyx_v_B, PyObject *__pyx_v_C, PyObject *__pyx_v_gram, PyObject *__pyx_v_exponent, PyObject *__pyx_v_assume_matrix, PyObject *__pyx_v_min_num_samples, PyObject *__pyx_v_max_num_samples, PyObject *__pyx_v_error_atol, PyObject *__pyx_v_error_rtol, PyObject *__pyx_v_confidence_level, PyObject *__pyx_v_outlier_significance_level, PyObject *__pyx_v_solver_tol, PyObject *__pyx_v_orthogonalize, PyObject *__pyx_v_num_threads, PyObject *__pyx_v_verbose, PyObject *__pyx_v_plot) {
  CYTHON_UNUSED PyObject *__pyx_v_matplotlib = NULL;
  PyObject *__pyx_v_load_plot_settings = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj_)
  __Pyx_RefNannySetupContext("check_arguments", 0);
  __Pyx_TraceCall("check_arguments", __pyx_f[0], 22, 0, __PYX_ERR(0, 22, __pyx_L1_error));
  __Pyx_INCREF(__pyx_v_error_atol);
  __Pyx_INCREF(__pyx_v_error_rtol);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":45
 * 
 *     # Check A
 *     if (not isinstance(A, numpy.ndarray)) and (not isspmatrix(A)):             # <<<<<<<<<<<<<<
 *         raise TypeError('Input matrix should be either a "numpy.ndarray" or ' +
 *                         'a "scipy.sparse" matrix.')
 */
  __Pyx_TraceLine(45,0,__PYX_ERR(0, 45, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ndarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_A, __pyx_t_3); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_isspmatrix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_6, __pyx_v_A) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_A);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = ((!__pyx_t_5) != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":46
 *     # Check A
 *     if (not isinstance(A, numpy.ndarray)) and (not isspmatrix(A)):
 *         raise TypeError('Input matrix should be either a "numpy.ndarray" or ' +             # <<<<<<<<<<<<<<
 *                         'a "scipy.sparse" matrix.')
 *     elif A.shape[0] != A.shape[1]:
 */
    __Pyx_TraceLine(46,0,__PYX_ERR(0, 46, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 46, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 46, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":45
 * 
 *     # Check A
 *     if (not isinstance(A, numpy.ndarray)) and (not isspmatrix(A)):             # <<<<<<<<<<<<<<
 *         raise TypeError('Input matrix should be either a "numpy.ndarray" or ' +
 *                         'a "scipy.sparse" matrix.')
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":48
 *         raise TypeError('Input matrix should be either a "numpy.ndarray" or ' +
 *                         'a "scipy.sparse" matrix.')
 *     elif A.shape[0] != A.shape[1]:             # <<<<<<<<<<<<<<
 *         raise ValueError('Input matrix should be a square matrix.')
 * 
 */
  __Pyx_TraceLine(48,0,__PYX_ERR(0, 48, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_1)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":49
 *                         'a "scipy.sparse" matrix.')
 *     elif A.shape[0] != A.shape[1]:
 *         raise ValueError('Input matrix should be a square matrix.')             # <<<<<<<<<<<<<<
 * 
 *     # Check B
 */
    __Pyx_TraceLine(49,0,__PYX_ERR(0, 49, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 49, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":48
 *         raise TypeError('Input matrix should be either a "numpy.ndarray" or ' +
 *                         'a "scipy.sparse" matrix.')
 *     elif A.shape[0] != A.shape[1]:             # <<<<<<<<<<<<<<
 *         raise ValueError('Input matrix should be a square matrix.')
 * 
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":52
 * 
 *     # Check B
 *     if B is not None:             # <<<<<<<<<<<<<<
 *         if (isinstance(A, numpy.ndarray)) and \
 *                 (not isinstance(B, numpy.ndarray)):
 */
  __Pyx_TraceLine(52,0,__PYX_ERR(0, 52, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_B != Py_None);
  __pyx_t_4 = (__pyx_t_1 != 0);
  if (__pyx_t_4) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":53
 *     # Check B
 *     if B is not None:
 *         if (isinstance(A, numpy.ndarray)) and \             # <<<<<<<<<<<<<<
 *                 (not isinstance(B, numpy.ndarray)):
 *             raise TypeError('When the input matrix "A" is of type ' +
 */
    __Pyx_TraceLine(53,0,__PYX_ERR(0, 53, __pyx_L1_error))
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_ndarray); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_A, __pyx_t_6); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 53, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_5 = (__pyx_t_1 != 0);
    if (__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L8_bool_binop_done;
    }

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":54
 *     if B is not None:
 *         if (isinstance(A, numpy.ndarray)) and \
 *                 (not isinstance(B, numpy.ndarray)):             # <<<<<<<<<<<<<<
 *             raise TypeError('When the input matrix "A" is of type ' +
 *                             '"numpy.ndarray", matrix "B" should also be of ' +
 */
    __Pyx_TraceLine(54,0,__PYX_ERR(0, 54, __pyx_L1_error))
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_ndarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_5 = PyObject_IsInstance(__pyx_v_B, __pyx_t_3); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 54, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = ((!(__pyx_t_5 != 0)) != 0);
    __pyx_t_4 = __pyx_t_1;
    __pyx_L8_bool_binop_done:;

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":53
 *     # Check B
 *     if B is not None:
 *         if (isinstance(A, numpy.ndarray)) and \             # <<<<<<<<<<<<<<
 *                 (not isinstance(B, numpy.ndarray)):
 *             raise TypeError('When the input matrix "A" is of type ' +
 */
    __Pyx_TraceLine(53,0,__PYX_ERR(0, 53, __pyx_L1_error))
    if (unlikely(__pyx_t_4)) {

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":55
 *         if (isinstance(A, numpy.ndarray)) and \
 *                 (not isinstance(B, numpy.ndarray)):
 *             raise TypeError('When the input matrix "A" is of type ' +             # <<<<<<<<<<<<<<
 *                             '"numpy.ndarray", matrix "B" should also be of ' +
 *                             'the same type.')
 */
      __Pyx_TraceLine(55,0,__PYX_ERR(0, 55, __pyx_L1_error))
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 55, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 55, __pyx_L1_error)

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":53
 *     # Check B
 *     if B is not None:
 *         if (isinstance(A, numpy.ndarray)) and \             # <<<<<<<<<<<<<<
 *                 (not isinstance(B, numpy.ndarray)):
 *             raise TypeError('When the input matrix "A" is of type ' +
 */
    }

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":58
 *                             '"numpy.ndarray", matrix "B" should also be of ' +
 *                             'the same type.')
 *         if isspmatrix(A) and not isspmatrix(B):             # <<<<<<<<<<<<<<
 *             raise TypeError('When the input matrix "A" is of type ' +
 *                             '"scipy.sparse", matrix "B" should also be of ' +
 */
    __Pyx_TraceLine(58,0,__PYX_ERR(0, 58, __pyx_L1_error))
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_isspmatrix); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_2, __pyx_v_A) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_A);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 58, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {
    } else {
      __pyx_t_4 = __pyx_t_1;
      goto __pyx_L11_bool_binop_done;
    }
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_isspmatrix); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_2, __pyx_v_B) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_B);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 58, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = ((!__pyx_t_1) != 0);
    __pyx_t_4 = __pyx_t_5;
    __pyx_L11_bool_binop_done:;
    if (unlikely(__pyx_t_4)) {

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":59
 *                             'the same type.')
 *         if isspmatrix(A) and not isspmatrix(B):
 *             raise TypeError('When the input matrix "A" is of type ' +             # <<<<<<<<<<<<<<
 *                             '"scipy.sparse", matrix "B" should also be of ' +
 *                             'the same type.')
 */
      __Pyx_TraceLine(59,0,__PYX_ERR(0, 59, __pyx_L1_error))
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 59, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 59, __pyx_L1_error)

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":58
 *                             '"numpy.ndarray", matrix "B" should also be of ' +
 *                             'the same type.')
 *         if isspmatrix(A) and not isspmatrix(B):             # <<<<<<<<<<<<<<
 *             raise TypeError('When the input matrix "A" is of type ' +
 *                             '"scipy.sparse", matrix "B" should also be of ' +
 */
    }

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":62
 *                             '"scipy.sparse", matrix "B" should also be of ' +
 *                             'the same type.')
 *         elif A.shape != B.shape:             # <<<<<<<<<<<<<<
 *             raise ValueError('Matrix "B" should have the same size as ' +
 *                              'matrix "A".')
 */
    __Pyx_TraceLine(62,0,__PYX_ERR(0, 62, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_B, __pyx_n_s_shape); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 62, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 62, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(__pyx_t_4)) {

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":63
 *                             'the same type.')
 *         elif A.shape != B.shape:
 *             raise ValueError('Matrix "B" should have the same size as ' +             # <<<<<<<<<<<<<<
 *                              'matrix "A".')
 * 
 */
      __Pyx_TraceLine(63,0,__PYX_ERR(0, 63, __pyx_L1_error))
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 63, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 63, __pyx_L1_error)

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":62
 *                             '"scipy.sparse", matrix "B" should also be of ' +
 *                             'the same type.')
 *         elif A.shape != B.shape:             # <<<<<<<<<<<<<<
 *             raise ValueError('Matrix "B" should have the same size as ' +
 *                              'matrix "A".')
 */
    }

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":52
 * 
 *     # Check B
 *     if B is not None:             # <<<<<<<<<<<<<<
 *         if (isinstance(A, numpy.ndarray)) and \
 *                 (not isinstance(B, numpy.ndarray)):
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":67
 * 
 *     # Check C
 *     if C is not None:             # <<<<<<<<<<<<<<
 *         if B is None:
 *             raise ValueError('When "C" is given, "B" should also be given.')
 */
  __Pyx_TraceLine(67,0,__PYX_ERR(0, 67, __pyx_L1_error))
  __pyx_t_4 = (__pyx_v_C != Py_None);
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":68
 *     # Check C
 *     if C is not None:
 *         if B is None:             # <<<<<<<<<<<<<<
 *             raise ValueError('When "C" is given, "B" should also be given.')
 *         if (isinstance(A, numpy.ndarray)) and \
 */
    __Pyx_TraceLine(68,0,__PYX_ERR(0, 68, __pyx_L1_error))
    __pyx_t_5 = (__pyx_v_B == Py_None);
    __pyx_t_4 = (__pyx_t_5 != 0);
    if (unlikely(__pyx_t_4)) {

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":69
 *     if C is not None:
 *         if B is None:
 *             raise ValueError('When "C" is given, "B" should also be given.')             # <<<<<<<<<<<<<<
 *         if (isinstance(A, numpy.ndarray)) and \
 *                 (not isinstance(C, numpy.ndarray)):
 */
      __Pyx_TraceLine(69,0,__PYX_ERR(0, 69, __pyx_L1_error))
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 69, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 69, __pyx_L1_error)

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":68
 *     # Check C
 *     if C is not None:
 *         if B is None:             # <<<<<<<<<<<<<<
 *             raise ValueError('When "C" is given, "B" should also be given.')
 *         if (isinstance(A, numpy.ndarray)) and \
 */
    }

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":70
 *         if B is None:
 *             raise ValueError('When "C" is given, "B" should also be given.')
 *         if (isinstance(A, numpy.ndarray)) and \             # <<<<<<<<<<<<<<
 *                 (not isinstance(C, numpy.ndarray)):
 *             raise TypeError('When the input matrix "A" is of type ' +
 */
    __Pyx_TraceLine(70,0,__PYX_ERR(0, 70, __pyx_L1_error))
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ndarray); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = PyObject_IsInstance(__pyx_v_A, __pyx_t_6); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_1 = (__pyx_t_5 != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_4 = __pyx_t_1;
      goto __pyx_L16_bool_binop_done;
    }

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":71
 *             raise ValueError('When "C" is given, "B" should also be given.')
 *         if (isinstance(A, numpy.ndarray)) and \
 *                 (not isinstance(C, numpy.ndarray)):             # <<<<<<<<<<<<<<
 *             raise TypeError('When the input matrix "A" is of type ' +
 *                             '"numpy.ndarray", matrix "C" should also be of ' +
 */
    __Pyx_TraceLine(71,0,__PYX_ERR(0, 71, __pyx_L1_error))
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_ndarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_C, __pyx_t_2); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 71, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = ((!(__pyx_t_1 != 0)) != 0);
    __pyx_t_4 = __pyx_t_5;
    __pyx_L16_bool_binop_done:;

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":70
 *         if B is None:
 *             raise ValueError('When "C" is given, "B" should also be given.')
 *         if (isinstance(A, numpy.ndarray)) and \             # <<<<<<<<<<<<<<
 *                 (not isinstance(C, numpy.ndarray)):
 *             raise TypeError('When the input matrix "A" is of type ' +
 */
    __Pyx_TraceLine(70,0,__PYX_ERR(0, 70, __pyx_L1_error))
    if (unlikely(__pyx_t_4)) {

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":72
 *         if (isinstance(A, numpy.ndarray)) and \
 *                 (not isinstance(C, numpy.ndarray)):
 *             raise TypeError('When the input matrix "A" is of type ' +             # <<<<<<<<<<<<<<
 *                             '"numpy.ndarray", matrix "C" should also be of ' +
 *                             'the same type.')
 */
      __Pyx_TraceLine(72,0,__PYX_ERR(0, 72, __pyx_L1_error))
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 72, __pyx_L1_error)

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":70
 *         if B is None:
 *             raise ValueError('When "C" is given, "B" should also be given.')
 *         if (isinstance(A, numpy.ndarray)) and \             # <<<<<<<<<<<<<<
 *                 (not isinstance(C, numpy.ndarray)):
 *             raise TypeError('When the input matrix "A" is of type ' +
 */
    }

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":75
 *                             '"numpy.ndarray", matrix "C" should also be of ' +
 *                             'the same type.')
 *         if isspmatrix(A) and not isspmatrix(C):             # <<<<<<<<<<<<<<
 *             raise TypeError('When the input matrix "A" is of type ' +
 *                             '"scipy.sparse", matrix "C" should also be of ' +
 */
    __Pyx_TraceLine(75,0,__PYX_ERR(0, 75, __pyx_L1_error))
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_isspmatrix); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_3, __pyx_v_A) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_A);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L19_bool_binop_done;
    }
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_isspmatrix); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_3, __pyx_v_C) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_C);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = ((!__pyx_t_5) != 0);
    __pyx_t_4 = __pyx_t_1;
    __pyx_L19_bool_binop_done:;
    if (unlikely(__pyx_t_4)) {

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":76
 *                             'the same type.')
 *         if isspmatrix(A) and not isspmatrix(C):
 *             raise TypeError('When the input matrix "A" is of type ' +             # <<<<<<<<<<<<<<
 *                             '"scipy.sparse", matrix "C" should also be of ' +
 *                             'the same type.')
 */
      __Pyx_TraceLine(76,0,__PYX_ERR(0, 76, __pyx_L1_error))
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 76, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 76, __pyx_L1_error)

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":75
 *                             '"numpy.ndarray", matrix "C" should also be of ' +
 *                             'the same type.')
 *         if isspmatrix(A) and not isspmatrix(C):             # <<<<<<<<<<<<<<
 *             raise TypeError('When the input matrix "A" is of type ' +
 *                             '"scipy.sparse", matrix "C" should also be of ' +
 */
    }

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":79
 *                             '"scipy.sparse", matrix "C" should also be of ' +
 *                             'the same type.')
 *         elif A.shape != C.shape:             # <<<<<<<<<<<<<<
 *             raise ValueError('Matrix "C" should have the same size as ' +
 *                              'matrix "A".')
 */
    __Pyx_TraceLine(79,0,__PYX_ERR(0, 79, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_A, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_C, __pyx_n_s_shape); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__pyx_t_4)) {

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":80
 *                             'the same type.')
 *         elif A.shape != C.shape:
 *             raise ValueError('Matrix "C" should have the same size as ' +             # <<<<<<<<<<<<<<
 *                              'matrix "A".')
 * 
 */
      __Pyx_TraceLine(80,0,__PYX_ERR(0, 80, __pyx_L1_error))
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 80, __pyx_L1_error)

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":79
 *                             '"scipy.sparse", matrix "C" should also be of ' +
 *                             'the same type.')
 *         elif A.shape != C.shape:             # <<<<<<<<<<<<<<
 *             raise ValueError('Matrix "C" should have the same size as ' +
 *                              'matrix "A".')
 */
    }

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":67
 * 
 *     # Check C
 *     if C is not None:             # <<<<<<<<<<<<<<
 *         if B is None:
 *             raise ValueError('When "C" is given, "B" should also be given.')
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":84
 * 
 *     # Check gram
 *     if gram is None:             # <<<<<<<<<<<<<<
 *         raise TypeError('"gram" cannot be None.')
 *     elif not numpy.isscalar(gram):
 */
  __Pyx_TraceLine(84,0,__PYX_ERR(0, 84, __pyx_L1_error))
  __pyx_t_4 = (__pyx_v_gram == Py_None);
  __pyx_t_1 = (__pyx_t_4 != 0);
  if (unlikely(__pyx_t_1)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":85
 *     # Check gram
 *     if gram is None:
 *         raise TypeError('"gram" cannot be None.')             # <<<<<<<<<<<<<<
 *     elif not numpy.isscalar(gram):
 *         raise TypeError('"gram" should be a scalar value.')
 */
    __Pyx_TraceLine(85,0,__PYX_ERR(0, 85, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 85, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":84
 * 
 *     # Check gram
 *     if gram is None:             # <<<<<<<<<<<<<<
 *         raise TypeError('"gram" cannot be None.')
 *     elif not numpy.isscalar(gram):
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":86
 *     if gram is None:
 *         raise TypeError('"gram" cannot be None.')
 *     elif not numpy.isscalar(gram):             # <<<<<<<<<<<<<<
 *         raise TypeError('"gram" should be a scalar value.')
 *     elif not isinstance(gram, bool):
 */
  __Pyx_TraceLine(86,0,__PYX_ERR(0, 86, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_isscalar); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_6, __pyx_v_gram) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_gram);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = ((!__pyx_t_1) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":87
 *         raise TypeError('"gram" cannot be None.')
 *     elif not numpy.isscalar(gram):
 *         raise TypeError('"gram" should be a scalar value.')             # <<<<<<<<<<<<<<
 *     elif not isinstance(gram, bool):
 *         raise TypeError('"gram" should be boolean.')
 */
    __Pyx_TraceLine(87,0,__PYX_ERR(0, 87, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 87, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":86
 *     if gram is None:
 *         raise TypeError('"gram" cannot be None.')
 *     elif not numpy.isscalar(gram):             # <<<<<<<<<<<<<<
 *         raise TypeError('"gram" should be a scalar value.')
 *     elif not isinstance(gram, bool):
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":88
 *     elif not numpy.isscalar(gram):
 *         raise TypeError('"gram" should be a scalar value.')
 *     elif not isinstance(gram, bool):             # <<<<<<<<<<<<<<
 *         raise TypeError('"gram" should be boolean.')
 * 
 */
  __Pyx_TraceLine(88,0,__PYX_ERR(0, 88, __pyx_L1_error))
  __pyx_t_3 = ((PyObject*)&PyBool_Type);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_gram, __pyx_t_3); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = ((!(__pyx_t_4 != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":89
 *         raise TypeError('"gram" should be a scalar value.')
 *     elif not isinstance(gram, bool):
 *         raise TypeError('"gram" should be boolean.')             # <<<<<<<<<<<<<<
 * 
 *     # Check exponent
 */
    __Pyx_TraceLine(89,0,__PYX_ERR(0, 89, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 89, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":88
 *     elif not numpy.isscalar(gram):
 *         raise TypeError('"gram" should be a scalar value.')
 *     elif not isinstance(gram, bool):             # <<<<<<<<<<<<<<
 *         raise TypeError('"gram" should be boolean.')
 * 
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":92
 * 
 *     # Check exponent
 *     if exponent is None:             # <<<<<<<<<<<<<<
 *         raise TypeError('"exponent" cannot be None.')
 *     elif not numpy.isscalar(exponent):
 */
  __Pyx_TraceLine(92,0,__PYX_ERR(0, 92, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_exponent == Py_None);
  __pyx_t_4 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_4)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":93
 *     # Check exponent
 *     if exponent is None:
 *         raise TypeError('"exponent" cannot be None.')             # <<<<<<<<<<<<<<
 *     elif not numpy.isscalar(exponent):
 *         raise TypeError('"exponent" should be a scalar value.')
 */
    __Pyx_TraceLine(93,0,__PYX_ERR(0, 93, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 93, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":92
 * 
 *     # Check exponent
 *     if exponent is None:             # <<<<<<<<<<<<<<
 *         raise TypeError('"exponent" cannot be None.')
 *     elif not numpy.isscalar(exponent):
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":94
 *     if exponent is None:
 *         raise TypeError('"exponent" cannot be None.')
 *     elif not numpy.isscalar(exponent):             # <<<<<<<<<<<<<<
 *         raise TypeError('"exponent" should be a scalar value.')
 *     elif not isinstance(exponent, (int, numpy.integer)):
 */
  __Pyx_TraceLine(94,0,__PYX_ERR(0, 94, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_isscalar); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_2, __pyx_v_exponent) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_exponent);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = ((!__pyx_t_4) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":95
 *         raise TypeError('"exponent" cannot be None.')
 *     elif not numpy.isscalar(exponent):
 *         raise TypeError('"exponent" should be a scalar value.')             # <<<<<<<<<<<<<<
 *     elif not isinstance(exponent, (int, numpy.integer)):
 *         TypeError('"exponent" cannot be an integer.')
 */
    __Pyx_TraceLine(95,0,__PYX_ERR(0, 95, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 95, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":94
 *     if exponent is None:
 *         raise TypeError('"exponent" cannot be None.')
 *     elif not numpy.isscalar(exponent):             # <<<<<<<<<<<<<<
 *         raise TypeError('"exponent" should be a scalar value.')
 *     elif not isinstance(exponent, (int, numpy.integer)):
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":96
 *     elif not numpy.isscalar(exponent):
 *         raise TypeError('"exponent" should be a scalar value.')
 *     elif not isinstance(exponent, (int, numpy.integer)):             # <<<<<<<<<<<<<<
 *         TypeError('"exponent" cannot be an integer.')
 * 
 */
  __Pyx_TraceLine(96,0,__PYX_ERR(0, 96, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_integer); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = PyInt_Check(__pyx_v_exponent); 
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L23_bool_binop_done;
  }
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_exponent, __pyx_t_6); 
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L23_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_4 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_4) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":97
 *         raise TypeError('"exponent" should be a scalar value.')
 *     elif not isinstance(exponent, (int, numpy.integer)):
 *         TypeError('"exponent" cannot be an integer.')             # <<<<<<<<<<<<<<
 * 
 *     # Check assume_matrix
 */
    __Pyx_TraceLine(97,0,__PYX_ERR(0, 97, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":96
 *     elif not numpy.isscalar(exponent):
 *         raise TypeError('"exponent" should be a scalar value.')
 *     elif not isinstance(exponent, (int, numpy.integer)):             # <<<<<<<<<<<<<<
 *         TypeError('"exponent" cannot be an integer.')
 * 
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":100
 * 
 *     # Check assume_matrix
 *     if assume_matrix is None:             # <<<<<<<<<<<<<<
 *         raise ValueError('"assume_matrix" cannot be None.')
 *     elif not isinstance(assume_matrix, str):
 */
  __Pyx_TraceLine(100,0,__PYX_ERR(0, 100, __pyx_L1_error))
  __pyx_t_4 = (__pyx_v_assume_matrix == Py_None);
  __pyx_t_1 = (__pyx_t_4 != 0);
  if (unlikely(__pyx_t_1)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":101
 *     # Check assume_matrix
 *     if assume_matrix is None:
 *         raise ValueError('"assume_matrix" cannot be None.')             # <<<<<<<<<<<<<<
 *     elif not isinstance(assume_matrix, str):
 *         raise TypeError('"assume_matrix" must be a string.')
 */
    __Pyx_TraceLine(101,0,__PYX_ERR(0, 101, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 101, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":100
 * 
 *     # Check assume_matrix
 *     if assume_matrix is None:             # <<<<<<<<<<<<<<
 *         raise ValueError('"assume_matrix" cannot be None.')
 *     elif not isinstance(assume_matrix, str):
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":102
 *     if assume_matrix is None:
 *         raise ValueError('"assume_matrix" cannot be None.')
 *     elif not isinstance(assume_matrix, str):             # <<<<<<<<<<<<<<
 *         raise TypeError('"assume_matrix" must be a string.')
 *     elif assume_matrix != 'gen' and assume_matrix != "pos" and \
 */
  __Pyx_TraceLine(102,0,__PYX_ERR(0, 102, __pyx_L1_error))
  __pyx_t_1 = PyUnicode_Check(__pyx_v_assume_matrix); 
  __pyx_t_4 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":103
 *         raise ValueError('"assume_matrix" cannot be None.')
 *     elif not isinstance(assume_matrix, str):
 *         raise TypeError('"assume_matrix" must be a string.')             # <<<<<<<<<<<<<<
 *     elif assume_matrix != 'gen' and assume_matrix != "pos" and \
 *             assume_matrix != "sym" and assume_matrix != "sym_pos":
 */
    __Pyx_TraceLine(103,0,__PYX_ERR(0, 103, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 103, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":102
 *     if assume_matrix is None:
 *         raise ValueError('"assume_matrix" cannot be None.')
 *     elif not isinstance(assume_matrix, str):             # <<<<<<<<<<<<<<
 *         raise TypeError('"assume_matrix" must be a string.')
 *     elif assume_matrix != 'gen' and assume_matrix != "pos" and \
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":104
 *     elif not isinstance(assume_matrix, str):
 *         raise TypeError('"assume_matrix" must be a string.')
 *     elif assume_matrix != 'gen' and assume_matrix != "pos" and \             # <<<<<<<<<<<<<<
 *             assume_matrix != "sym" and assume_matrix != "sym_pos":
 *         raise ValueError('"assume_matrix" should be either "gen", "pos", ' +
 */
  __Pyx_TraceLine(104,0,__PYX_ERR(0, 104, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_assume_matrix, __pyx_n_u_gen, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 104, __pyx_L1_error)
  if (__pyx_t_1) {
  } else {
    __pyx_t_4 = __pyx_t_1;
    goto __pyx_L26_bool_binop_done;
  }
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_assume_matrix, __pyx_n_u_pos, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 104, __pyx_L1_error)
  if (__pyx_t_1) {
  } else {
    __pyx_t_4 = __pyx_t_1;
    goto __pyx_L26_bool_binop_done;
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":105
 *         raise TypeError('"assume_matrix" must be a string.')
 *     elif assume_matrix != 'gen' and assume_matrix != "pos" and \
 *             assume_matrix != "sym" and assume_matrix != "sym_pos":             # <<<<<<<<<<<<<<
 *         raise ValueError('"assume_matrix" should be either "gen", "pos", ' +
 *                          '"sym, or "sym_pos".')
 */
  __Pyx_TraceLine(105,0,__PYX_ERR(0, 105, __pyx_L1_error))
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_assume_matrix, __pyx_n_u_sym, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 105, __pyx_L1_error)
  if (__pyx_t_1) {
  } else {
    __pyx_t_4 = __pyx_t_1;
    goto __pyx_L26_bool_binop_done;
  }
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_assume_matrix, __pyx_n_u_sym_pos, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 105, __pyx_L1_error)
  __pyx_t_4 = __pyx_t_1;
  __pyx_L26_bool_binop_done:;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":104
 *     elif not isinstance(assume_matrix, str):
 *         raise TypeError('"assume_matrix" must be a string.')
 *     elif assume_matrix != 'gen' and assume_matrix != "pos" and \             # <<<<<<<<<<<<<<
 *             assume_matrix != "sym" and assume_matrix != "sym_pos":
 *         raise ValueError('"assume_matrix" should be either "gen", "pos", ' +
 */
  __Pyx_TraceLine(104,0,__PYX_ERR(0, 104, __pyx_L1_error))
  if (unlikely(__pyx_t_4)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":106
 *     elif assume_matrix != 'gen' and assume_matrix != "pos" and \
 *             assume_matrix != "sym" and assume_matrix != "sym_pos":
 *         raise ValueError('"assume_matrix" should be either "gen", "pos", ' +             # <<<<<<<<<<<<<<
 *                          '"sym, or "sym_pos".')
 * 
 */
    __Pyx_TraceLine(106,0,__PYX_ERR(0, 106, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 106, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":104
 *     elif not isinstance(assume_matrix, str):
 *         raise TypeError('"assume_matrix" must be a string.')
 *     elif assume_matrix != 'gen' and assume_matrix != "pos" and \             # <<<<<<<<<<<<<<
 *             assume_matrix != "sym" and assume_matrix != "sym_pos":
 *         raise ValueError('"assume_matrix" should be either "gen", "pos", ' +
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":110
 * 
 *     # Check min_num_samples
 *     if min_num_samples is None:             # <<<<<<<<<<<<<<
 *         raise ValueError('"min_num_samples" cannot be None.')
 *     elif not numpy.isscalar(min_num_samples):
 */
  __Pyx_TraceLine(110,0,__PYX_ERR(0, 110, __pyx_L1_error))
  __pyx_t_4 = (__pyx_v_min_num_samples == Py_None);
  __pyx_t_1 = (__pyx_t_4 != 0);
  if (unlikely(__pyx_t_1)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":111
 *     # Check min_num_samples
 *     if min_num_samples is None:
 *         raise ValueError('"min_num_samples" cannot be None.')             # <<<<<<<<<<<<<<
 *     elif not numpy.isscalar(min_num_samples):
 *         raise TypeError('"min_num_samples" should be a scalar value.')
 */
    __Pyx_TraceLine(111,0,__PYX_ERR(0, 111, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 111, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":110
 * 
 *     # Check min_num_samples
 *     if min_num_samples is None:             # <<<<<<<<<<<<<<
 *         raise ValueError('"min_num_samples" cannot be None.')
 *     elif not numpy.isscalar(min_num_samples):
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":112
 *     if min_num_samples is None:
 *         raise ValueError('"min_num_samples" cannot be None.')
 *     elif not numpy.isscalar(min_num_samples):             # <<<<<<<<<<<<<<
 *         raise TypeError('"min_num_samples" should be a scalar value.')
 *     elif not isinstance(min_num_samples, (int, numpy.integer)):
 */
  __Pyx_TraceLine(112,0,__PYX_ERR(0, 112, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_isscalar); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_6 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_min_num_samples) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_min_num_samples);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_4 = ((!__pyx_t_1) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":113
 *         raise ValueError('"min_num_samples" cannot be None.')
 *     elif not numpy.isscalar(min_num_samples):
 *         raise TypeError('"min_num_samples" should be a scalar value.')             # <<<<<<<<<<<<<<
 *     elif not isinstance(min_num_samples, (int, numpy.integer)):
 *         raise TypeError('"min_num_samples" should be an integer.')
 */
    __Pyx_TraceLine(113,0,__PYX_ERR(0, 113, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 113, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":112
 *     if min_num_samples is None:
 *         raise ValueError('"min_num_samples" cannot be None.')
 *     elif not numpy.isscalar(min_num_samples):             # <<<<<<<<<<<<<<
 *         raise TypeError('"min_num_samples" should be a scalar value.')
 *     elif not isinstance(min_num_samples, (int, numpy.integer)):
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":114
 *     elif not numpy.isscalar(min_num_samples):
 *         raise TypeError('"min_num_samples" should be a scalar value.')
 *     elif not isinstance(min_num_samples, (int, numpy.integer)):             # <<<<<<<<<<<<<<
 *         raise TypeError('"min_num_samples" should be an integer.')
 *     elif min_num_samples < 1:
 */
  __Pyx_TraceLine(114,0,__PYX_ERR(0, 114, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_integer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_1 = PyInt_Check(__pyx_v_min_num_samples); 
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L31_bool_binop_done;
  }
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_min_num_samples, __pyx_t_2); 
  __pyx_t_1 = (__pyx_t_5 != 0);
  __pyx_t_4 = __pyx_t_1;
  __pyx_L31_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = ((!(__pyx_t_4 != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":115
 *         raise TypeError('"min_num_samples" should be a scalar value.')
 *     elif not isinstance(min_num_samples, (int, numpy.integer)):
 *         raise TypeError('"min_num_samples" should be an integer.')             # <<<<<<<<<<<<<<
 *     elif min_num_samples < 1:
 *         raise ValueError('"min_num_samples" should be at least one.')
 */
    __Pyx_TraceLine(115,0,__PYX_ERR(0, 115, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 115, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":114
 *     elif not numpy.isscalar(min_num_samples):
 *         raise TypeError('"min_num_samples" should be a scalar value.')
 *     elif not isinstance(min_num_samples, (int, numpy.integer)):             # <<<<<<<<<<<<<<
 *         raise TypeError('"min_num_samples" should be an integer.')
 *     elif min_num_samples < 1:
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":116
 *     elif not isinstance(min_num_samples, (int, numpy.integer)):
 *         raise TypeError('"min_num_samples" should be an integer.')
 *     elif min_num_samples < 1:             # <<<<<<<<<<<<<<
 *         raise ValueError('"min_num_samples" should be at least one.')
 * 
 */
  __Pyx_TraceLine(116,0,__PYX_ERR(0, 116, __pyx_L1_error))
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_min_num_samples, __pyx_int_1, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 116, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_1)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":117
 *         raise TypeError('"min_num_samples" should be an integer.')
 *     elif min_num_samples < 1:
 *         raise ValueError('"min_num_samples" should be at least one.')             # <<<<<<<<<<<<<<
 * 
 *     # Check max_num_samples
 */
    __Pyx_TraceLine(117,0,__PYX_ERR(0, 117, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 117, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":116
 *     elif not isinstance(min_num_samples, (int, numpy.integer)):
 *         raise TypeError('"min_num_samples" should be an integer.')
 *     elif min_num_samples < 1:             # <<<<<<<<<<<<<<
 *         raise ValueError('"min_num_samples" should be at least one.')
 * 
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":120
 * 
 *     # Check max_num_samples
 *     if max_num_samples is None:             # <<<<<<<<<<<<<<
 *         raise ValueError('"max_num_samples" cannot be None.')
 *     elif not numpy.isscalar(max_num_samples):
 */
  __Pyx_TraceLine(120,0,__PYX_ERR(0, 120, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_max_num_samples == Py_None);
  __pyx_t_4 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_4)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":121
 *     # Check max_num_samples
 *     if max_num_samples is None:
 *         raise ValueError('"max_num_samples" cannot be None.')             # <<<<<<<<<<<<<<
 *     elif not numpy.isscalar(max_num_samples):
 *         raise TypeError('"max_num_samples" should be a scalar value.')
 */
    __Pyx_TraceLine(121,0,__PYX_ERR(0, 121, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 121, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":120
 * 
 *     # Check max_num_samples
 *     if max_num_samples is None:             # <<<<<<<<<<<<<<
 *         raise ValueError('"max_num_samples" cannot be None.')
 *     elif not numpy.isscalar(max_num_samples):
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":122
 *     if max_num_samples is None:
 *         raise ValueError('"max_num_samples" cannot be None.')
 *     elif not numpy.isscalar(max_num_samples):             # <<<<<<<<<<<<<<
 *         raise TypeError('"max_num_samples" should be a scalar value.')
 *     elif not isinstance(max_num_samples, (int, numpy.integer)):
 */
  __Pyx_TraceLine(122,0,__PYX_ERR(0, 122, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_isscalar); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_6, __pyx_v_max_num_samples) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_max_num_samples);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = ((!__pyx_t_4) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":123
 *         raise ValueError('"max_num_samples" cannot be None.')
 *     elif not numpy.isscalar(max_num_samples):
 *         raise TypeError('"max_num_samples" should be a scalar value.')             # <<<<<<<<<<<<<<
 *     elif not isinstance(max_num_samples, (int, numpy.integer)):
 *         raise TypeError('"max_num_samples" should be an integer.')
 */
    __Pyx_TraceLine(123,0,__PYX_ERR(0, 123, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 123, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":122
 *     if max_num_samples is None:
 *         raise ValueError('"max_num_samples" cannot be None.')
 *     elif not numpy.isscalar(max_num_samples):             # <<<<<<<<<<<<<<
 *         raise TypeError('"max_num_samples" should be a scalar value.')
 *     elif not isinstance(max_num_samples, (int, numpy.integer)):
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":124
 *     elif not numpy.isscalar(max_num_samples):
 *         raise TypeError('"max_num_samples" should be a scalar value.')
 *     elif not isinstance(max_num_samples, (int, numpy.integer)):             # <<<<<<<<<<<<<<
 *         raise TypeError('"max_num_samples" should be an integer.')
 *     elif max_num_samples < 1:
 */
  __Pyx_TraceLine(124,0,__PYX_ERR(0, 124, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_integer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = PyInt_Check(__pyx_v_max_num_samples); 
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L34_bool_binop_done;
  }
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_max_num_samples, __pyx_t_3); 
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L34_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":125
 *         raise TypeError('"max_num_samples" should be a scalar value.')
 *     elif not isinstance(max_num_samples, (int, numpy.integer)):
 *         raise TypeError('"max_num_samples" should be an integer.')             # <<<<<<<<<<<<<<
 *     elif max_num_samples < 1:
 *         raise ValueError('"max_num_samples" should be at least one.')
 */
    __Pyx_TraceLine(125,0,__PYX_ERR(0, 125, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 125, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":124
 *     elif not numpy.isscalar(max_num_samples):
 *         raise TypeError('"max_num_samples" should be a scalar value.')
 *     elif not isinstance(max_num_samples, (int, numpy.integer)):             # <<<<<<<<<<<<<<
 *         raise TypeError('"max_num_samples" should be an integer.')
 *     elif max_num_samples < 1:
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":126
 *     elif not isinstance(max_num_samples, (int, numpy.integer)):
 *         raise TypeError('"max_num_samples" should be an integer.')
 *     elif max_num_samples < 1:             # <<<<<<<<<<<<<<
 *         raise ValueError('"max_num_samples" should be at least one.')
 * 
 */
  __Pyx_TraceLine(126,0,__PYX_ERR(0, 126, __pyx_L1_error))
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_max_num_samples, __pyx_int_1, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 126, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":127
 *         raise TypeError('"max_num_samples" should be an integer.')
 *     elif max_num_samples < 1:
 *         raise ValueError('"max_num_samples" should be at least one.')             # <<<<<<<<<<<<<<
 * 
 *     # Check min and max num samples
 */
    __Pyx_TraceLine(127,0,__PYX_ERR(0, 127, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 127, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":126
 *     elif not isinstance(max_num_samples, (int, numpy.integer)):
 *         raise TypeError('"max_num_samples" should be an integer.')
 *     elif max_num_samples < 1:             # <<<<<<<<<<<<<<
 *         raise ValueError('"max_num_samples" should be at least one.')
 * 
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":130
 * 
 *     # Check min and max num samples
 *     if min_num_samples > max_num_samples:             # <<<<<<<<<<<<<<
 *         raise ValueError('"min_num_samples" cannot be greater than ' +
 *                          '"max_num_samples".')
 */
  __Pyx_TraceLine(130,0,__PYX_ERR(0, 130, __pyx_L1_error))
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_min_num_samples, __pyx_v_max_num_samples, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 130, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_4)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":131
 *     # Check min and max num samples
 *     if min_num_samples > max_num_samples:
 *         raise ValueError('"min_num_samples" cannot be greater than ' +             # <<<<<<<<<<<<<<
 *                          '"max_num_samples".')
 * 
 */
    __Pyx_TraceLine(131,0,__PYX_ERR(0, 131, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 131, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":130
 * 
 *     # Check min and max num samples
 *     if min_num_samples > max_num_samples:             # <<<<<<<<<<<<<<
 *         raise ValueError('"min_num_samples" cannot be greater than ' +
 *                          '"max_num_samples".')
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":135
 * 
 *     # Check convergence absolute tolerance
 *     if error_atol is None:             # <<<<<<<<<<<<<<
 *         error_atol = 0.0
 *     elif not numpy.isscalar(error_atol):
 */
  __Pyx_TraceLine(135,0,__PYX_ERR(0, 135, __pyx_L1_error))
  __pyx_t_4 = (__pyx_v_error_atol == Py_None);
  __pyx_t_1 = (__pyx_t_4 != 0);
  if (__pyx_t_1) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":136
 *     # Check convergence absolute tolerance
 *     if error_atol is None:
 *         error_atol = 0.0             # <<<<<<<<<<<<<<
 *     elif not numpy.isscalar(error_atol):
 *         raise TypeError('"error_atol" should be a scalar value.')
 */
    __Pyx_TraceLine(136,0,__PYX_ERR(0, 136, __pyx_L1_error))
    __Pyx_INCREF(__pyx_float_0_0);
    __Pyx_DECREF_SET(__pyx_v_error_atol, __pyx_float_0_0);

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":135
 * 
 *     # Check convergence absolute tolerance
 *     if error_atol is None:             # <<<<<<<<<<<<<<
 *         error_atol = 0.0
 *     elif not numpy.isscalar(error_atol):
 */
    goto __pyx_L37;
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":137
 *     if error_atol is None:
 *         error_atol = 0.0
 *     elif not numpy.isscalar(error_atol):             # <<<<<<<<<<<<<<
 *         raise TypeError('"error_atol" should be a scalar value.')
 *     elif not isinstance(error_atol, (int, numpy.integer, float)):
 */
  __Pyx_TraceLine(137,0,__PYX_ERR(0, 137, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_isscalar); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_2, __pyx_v_error_atol) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_error_atol);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = ((!__pyx_t_1) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":138
 *         error_atol = 0.0
 *     elif not numpy.isscalar(error_atol):
 *         raise TypeError('"error_atol" should be a scalar value.')             # <<<<<<<<<<<<<<
 *     elif not isinstance(error_atol, (int, numpy.integer, float)):
 *         raise TypeError('"error_atol" should be a float number.')
 */
    __Pyx_TraceLine(138,0,__PYX_ERR(0, 138, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 138, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":137
 *     if error_atol is None:
 *         error_atol = 0.0
 *     elif not numpy.isscalar(error_atol):             # <<<<<<<<<<<<<<
 *         raise TypeError('"error_atol" should be a scalar value.')
 *     elif not isinstance(error_atol, (int, numpy.integer, float)):
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":139
 *     elif not numpy.isscalar(error_atol):
 *         raise TypeError('"error_atol" should be a scalar value.')
 *     elif not isinstance(error_atol, (int, numpy.integer, float)):             # <<<<<<<<<<<<<<
 *         raise TypeError('"error_atol" should be a float number.')
 *     elif error_atol < 0.0:
 */
  __Pyx_TraceLine(139,0,__PYX_ERR(0, 139, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_integer); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = PyInt_Check(__pyx_v_error_atol); 
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L38_bool_binop_done;
  }
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_error_atol, __pyx_t_6); 
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (!__pyx_t_1) {
  } else {
    __pyx_t_4 = __pyx_t_1;
    goto __pyx_L38_bool_binop_done;
  }
  __pyx_t_1 = PyFloat_Check(__pyx_v_error_atol); 
  __pyx_t_5 = (__pyx_t_1 != 0);
  __pyx_t_4 = __pyx_t_5;
  __pyx_L38_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":140
 *         raise TypeError('"error_atol" should be a scalar value.')
 *     elif not isinstance(error_atol, (int, numpy.integer, float)):
 *         raise TypeError('"error_atol" should be a float number.')             # <<<<<<<<<<<<<<
 *     elif error_atol < 0.0:
 *         raise ValueError('"error_atol" cannot be negative.')
 */
    __Pyx_TraceLine(140,0,__PYX_ERR(0, 140, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 140, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":139
 *     elif not numpy.isscalar(error_atol):
 *         raise TypeError('"error_atol" should be a scalar value.')
 *     elif not isinstance(error_atol, (int, numpy.integer, float)):             # <<<<<<<<<<<<<<
 *         raise TypeError('"error_atol" should be a float number.')
 *     elif error_atol < 0.0:
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":141
 *     elif not isinstance(error_atol, (int, numpy.integer, float)):
 *         raise TypeError('"error_atol" should be a float number.')
 *     elif error_atol < 0.0:             # <<<<<<<<<<<<<<
 *         raise ValueError('"error_atol" cannot be negative.')
 * 
 */
  __Pyx_TraceLine(141,0,__PYX_ERR(0, 141, __pyx_L1_error))
  __pyx_t_6 = PyObject_RichCompare(__pyx_v_error_atol, __pyx_float_0_0, Py_LT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 141, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(__pyx_t_5)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":142
 *         raise TypeError('"error_atol" should be a float number.')
 *     elif error_atol < 0.0:
 *         raise ValueError('"error_atol" cannot be negative.')             # <<<<<<<<<<<<<<
 * 
 *     # Check error relative tolerance
 */
    __Pyx_TraceLine(142,0,__PYX_ERR(0, 142, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 142, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":141
 *     elif not isinstance(error_atol, (int, numpy.integer, float)):
 *         raise TypeError('"error_atol" should be a float number.')
 *     elif error_atol < 0.0:             # <<<<<<<<<<<<<<
 *         raise ValueError('"error_atol" cannot be negative.')
 * 
 */
  }
  __pyx_L37:;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":145
 * 
 *     # Check error relative tolerance
 *     if error_rtol is None:             # <<<<<<<<<<<<<<
 *         error_rtol = 0.0
 *     elif not numpy.isscalar(error_rtol):
 */
  __Pyx_TraceLine(145,0,__PYX_ERR(0, 145, __pyx_L1_error))
  __pyx_t_5 = (__pyx_v_error_rtol == Py_None);
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":146
 *     # Check error relative tolerance
 *     if error_rtol is None:
 *         error_rtol = 0.0             # <<<<<<<<<<<<<<
 *     elif not numpy.isscalar(error_rtol):
 *         raise TypeError('"error_rtol" should be a scalar value.')
 */
    __Pyx_TraceLine(146,0,__PYX_ERR(0, 146, __pyx_L1_error))
    __Pyx_INCREF(__pyx_float_0_0);
    __Pyx_DECREF_SET(__pyx_v_error_rtol, __pyx_float_0_0);

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":145
 * 
 *     # Check error relative tolerance
 *     if error_rtol is None:             # <<<<<<<<<<<<<<
 *         error_rtol = 0.0
 *     elif not numpy.isscalar(error_rtol):
 */
    goto __pyx_L41;
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":147
 *     if error_rtol is None:
 *         error_rtol = 0.0
 *     elif not numpy.isscalar(error_rtol):             # <<<<<<<<<<<<<<
 *         raise TypeError('"error_rtol" should be a scalar value.')
 *     elif not isinstance(error_rtol, (int, numpy.integer, float)):
 */
  __Pyx_TraceLine(147,0,__PYX_ERR(0, 147, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_isscalar); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_6 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_error_rtol) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_error_rtol);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_5 = ((!__pyx_t_4) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":148
 *         error_rtol = 0.0
 *     elif not numpy.isscalar(error_rtol):
 *         raise TypeError('"error_rtol" should be a scalar value.')             # <<<<<<<<<<<<<<
 *     elif not isinstance(error_rtol, (int, numpy.integer, float)):
 *         raise TypeError('"error_rtol" should be a float number.')
 */
    __Pyx_TraceLine(148,0,__PYX_ERR(0, 148, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 148, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":147
 *     if error_rtol is None:
 *         error_rtol = 0.0
 *     elif not numpy.isscalar(error_rtol):             # <<<<<<<<<<<<<<
 *         raise TypeError('"error_rtol" should be a scalar value.')
 *     elif not isinstance(error_rtol, (int, numpy.integer, float)):
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":149
 *     elif not numpy.isscalar(error_rtol):
 *         raise TypeError('"error_rtol" should be a scalar value.')
 *     elif not isinstance(error_rtol, (int, numpy.integer, float)):             # <<<<<<<<<<<<<<
 *         raise TypeError('"error_rtol" should be a float number.')
 *     elif error_rtol < 0.0:
 */
  __Pyx_TraceLine(149,0,__PYX_ERR(0, 149, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_integer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_4 = PyInt_Check(__pyx_v_error_rtol); 
  __pyx_t_1 = (__pyx_t_4 != 0);
  if (!__pyx_t_1) {
  } else {
    __pyx_t_5 = __pyx_t_1;
    goto __pyx_L42_bool_binop_done;
  }
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_error_rtol, __pyx_t_2); 
  __pyx_t_4 = (__pyx_t_1 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_5 = __pyx_t_4;
    goto __pyx_L42_bool_binop_done;
  }
  __pyx_t_4 = PyFloat_Check(__pyx_v_error_rtol); 
  __pyx_t_1 = (__pyx_t_4 != 0);
  __pyx_t_5 = __pyx_t_1;
  __pyx_L42_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = ((!(__pyx_t_5 != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":150
 *         raise TypeError('"error_rtol" should be a scalar value.')
 *     elif not isinstance(error_rtol, (int, numpy.integer, float)):
 *         raise TypeError('"error_rtol" should be a float number.')             # <<<<<<<<<<<<<<
 *     elif error_rtol < 0.0:
 *         raise ValueError('"error_rtol" cannot be negative.')
 */
    __Pyx_TraceLine(150,0,__PYX_ERR(0, 150, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 150, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":149
 *     elif not numpy.isscalar(error_rtol):
 *         raise TypeError('"error_rtol" should be a scalar value.')
 *     elif not isinstance(error_rtol, (int, numpy.integer, float)):             # <<<<<<<<<<<<<<
 *         raise TypeError('"error_rtol" should be a float number.')
 *     elif error_rtol < 0.0:
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":151
 *     elif not isinstance(error_rtol, (int, numpy.integer, float)):
 *         raise TypeError('"error_rtol" should be a float number.')
 *     elif error_rtol < 0.0:             # <<<<<<<<<<<<<<
 *         raise ValueError('"error_rtol" cannot be negative.')
 * 
 */
  __Pyx_TraceLine(151,0,__PYX_ERR(0, 151, __pyx_L1_error))
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_error_rtol, __pyx_float_0_0, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 151, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_1)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":152
 *         raise TypeError('"error_rtol" should be a float number.')
 *     elif error_rtol < 0.0:
 *         raise ValueError('"error_rtol" cannot be negative.')             # <<<<<<<<<<<<<<
 * 
 *     # Check confidence level
 */
    __Pyx_TraceLine(152,0,__PYX_ERR(0, 152, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 152, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":151
 *     elif not isinstance(error_rtol, (int, numpy.integer, float)):
 *         raise TypeError('"error_rtol" should be a float number.')
 *     elif error_rtol < 0.0:             # <<<<<<<<<<<<<<
 *         raise ValueError('"error_rtol" cannot be negative.')
 * 
 */
  }
  __pyx_L41:;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":155
 * 
 *     # Check confidence level
 *     if confidence_level is None:             # <<<<<<<<<<<<<<
 *         raise TypeError('"confidence_level" cannot be None.')
 *     elif not numpy.isscalar(confidence_level):
 */
  __Pyx_TraceLine(155,0,__PYX_ERR(0, 155, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_confidence_level == Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_5)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":156
 *     # Check confidence level
 *     if confidence_level is None:
 *         raise TypeError('"confidence_level" cannot be None.')             # <<<<<<<<<<<<<<
 *     elif not numpy.isscalar(confidence_level):
 *         raise TypeError('"confidence_level" should be a scalar.')
 */
    __Pyx_TraceLine(156,0,__PYX_ERR(0, 156, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 156, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":155
 * 
 *     # Check confidence level
 *     if confidence_level is None:             # <<<<<<<<<<<<<<
 *         raise TypeError('"confidence_level" cannot be None.')
 *     elif not numpy.isscalar(confidence_level):
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":157
 *     if confidence_level is None:
 *         raise TypeError('"confidence_level" cannot be None.')
 *     elif not numpy.isscalar(confidence_level):             # <<<<<<<<<<<<<<
 *         raise TypeError('"confidence_level" should be a scalar.')
 *     elif not isinstance(confidence_level, (int, numpy.integer, float)):
 */
  __Pyx_TraceLine(157,0,__PYX_ERR(0, 157, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_isscalar); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_6, __pyx_v_confidence_level) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_confidence_level);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = ((!__pyx_t_5) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":158
 *         raise TypeError('"confidence_level" cannot be None.')
 *     elif not numpy.isscalar(confidence_level):
 *         raise TypeError('"confidence_level" should be a scalar.')             # <<<<<<<<<<<<<<
 *     elif not isinstance(confidence_level, (int, numpy.integer, float)):
 *         raise TypeError('"confidence_level" should be a float number.')
 */
    __Pyx_TraceLine(158,0,__PYX_ERR(0, 158, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 158, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":157
 *     if confidence_level is None:
 *         raise TypeError('"confidence_level" cannot be None.')
 *     elif not numpy.isscalar(confidence_level):             # <<<<<<<<<<<<<<
 *         raise TypeError('"confidence_level" should be a scalar.')
 *     elif not isinstance(confidence_level, (int, numpy.integer, float)):
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":159
 *     elif not numpy.isscalar(confidence_level):
 *         raise TypeError('"confidence_level" should be a scalar.')
 *     elif not isinstance(confidence_level, (int, numpy.integer, float)):             # <<<<<<<<<<<<<<
 *         raise TypeError('"confidence_level" should be a float number.')
 *     elif confidence_level < 0.0 or confidence_level > 1.0:
 */
  __Pyx_TraceLine(159,0,__PYX_ERR(0, 159, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_integer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = PyInt_Check(__pyx_v_confidence_level); 
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L46_bool_binop_done;
  }
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_confidence_level, __pyx_t_3); 
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L46_bool_binop_done;
  }
  __pyx_t_5 = PyFloat_Check(__pyx_v_confidence_level); 
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L46_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":160
 *         raise TypeError('"confidence_level" should be a scalar.')
 *     elif not isinstance(confidence_level, (int, numpy.integer, float)):
 *         raise TypeError('"confidence_level" should be a float number.')             # <<<<<<<<<<<<<<
 *     elif confidence_level < 0.0 or confidence_level > 1.0:
 *         raise ValueError('"confidence_level" should be between 0 and 1.')
 */
    __Pyx_TraceLine(160,0,__PYX_ERR(0, 160, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 160, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":159
 *     elif not numpy.isscalar(confidence_level):
 *         raise TypeError('"confidence_level" should be a scalar.')
 *     elif not isinstance(confidence_level, (int, numpy.integer, float)):             # <<<<<<<<<<<<<<
 *         raise TypeError('"confidence_level" should be a float number.')
 *     elif confidence_level < 0.0 or confidence_level > 1.0:
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":161
 *     elif not isinstance(confidence_level, (int, numpy.integer, float)):
 *         raise TypeError('"confidence_level" should be a float number.')
 *     elif confidence_level < 0.0 or confidence_level > 1.0:             # <<<<<<<<<<<<<<
 *         raise ValueError('"confidence_level" should be between 0 and 1.')
 * 
 */
  __Pyx_TraceLine(161,0,__PYX_ERR(0, 161, __pyx_L1_error))
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_confidence_level, __pyx_float_0_0, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 161, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_1) {
  } else {
    __pyx_t_4 = __pyx_t_1;
    goto __pyx_L49_bool_binop_done;
  }
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_confidence_level, __pyx_float_1_0, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 161, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_t_1;
  __pyx_L49_bool_binop_done:;
  if (unlikely(__pyx_t_4)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":162
 *         raise TypeError('"confidence_level" should be a float number.')
 *     elif confidence_level < 0.0 or confidence_level > 1.0:
 *         raise ValueError('"confidence_level" should be between 0 and 1.')             # <<<<<<<<<<<<<<
 * 
 *     # Check outlier significance level
 */
    __Pyx_TraceLine(162,0,__PYX_ERR(0, 162, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 162, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":161
 *     elif not isinstance(confidence_level, (int, numpy.integer, float)):
 *         raise TypeError('"confidence_level" should be a float number.')
 *     elif confidence_level < 0.0 or confidence_level > 1.0:             # <<<<<<<<<<<<<<
 *         raise ValueError('"confidence_level" should be between 0 and 1.')
 * 
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":165
 * 
 *     # Check outlier significance level
 *     if outlier_significance_level is None:             # <<<<<<<<<<<<<<
 *         raise TypeError('"outlier_significance_level" cannot be None.')
 *     elif not numpy.isscalar(outlier_significance_level):
 */
  __Pyx_TraceLine(165,0,__PYX_ERR(0, 165, __pyx_L1_error))
  __pyx_t_4 = (__pyx_v_outlier_significance_level == Py_None);
  __pyx_t_1 = (__pyx_t_4 != 0);
  if (unlikely(__pyx_t_1)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":166
 *     # Check outlier significance level
 *     if outlier_significance_level is None:
 *         raise TypeError('"outlier_significance_level" cannot be None.')             # <<<<<<<<<<<<<<
 *     elif not numpy.isscalar(outlier_significance_level):
 *         raise TypeError('"outlier_significance_level" should be a scalar.')
 */
    __Pyx_TraceLine(166,0,__PYX_ERR(0, 166, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 166, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":165
 * 
 *     # Check outlier significance level
 *     if outlier_significance_level is None:             # <<<<<<<<<<<<<<
 *         raise TypeError('"outlier_significance_level" cannot be None.')
 *     elif not numpy.isscalar(outlier_significance_level):
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":167
 *     if outlier_significance_level is None:
 *         raise TypeError('"outlier_significance_level" cannot be None.')
 *     elif not numpy.isscalar(outlier_significance_level):             # <<<<<<<<<<<<<<
 *         raise TypeError('"outlier_significance_level" should be a scalar.')
 *     elif not isinstance(outlier_significance_level,
 */
  __Pyx_TraceLine(167,0,__PYX_ERR(0, 167, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_isscalar); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_2, __pyx_v_outlier_significance_level) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_outlier_significance_level);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = ((!__pyx_t_1) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":168
 *         raise TypeError('"outlier_significance_level" cannot be None.')
 *     elif not numpy.isscalar(outlier_significance_level):
 *         raise TypeError('"outlier_significance_level" should be a scalar.')             # <<<<<<<<<<<<<<
 *     elif not isinstance(outlier_significance_level,
 *                         (int, numpy.integer, float)):
 */
    __Pyx_TraceLine(168,0,__PYX_ERR(0, 168, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 168, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":167
 *     if outlier_significance_level is None:
 *         raise TypeError('"outlier_significance_level" cannot be None.')
 *     elif not numpy.isscalar(outlier_significance_level):             # <<<<<<<<<<<<<<
 *         raise TypeError('"outlier_significance_level" should be a scalar.')
 *     elif not isinstance(outlier_significance_level,
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":170
 *         raise TypeError('"outlier_significance_level" should be a scalar.')
 *     elif not isinstance(outlier_significance_level,
 *                         (int, numpy.integer, float)):             # <<<<<<<<<<<<<<
 *         raise TypeError('"outlier_significance_level" must be a float number.')
 *     elif outlier_significance_level < 0.0 or outlier_significance_level > 1.0:
 */
  __Pyx_TraceLine(170,0,__PYX_ERR(0, 170, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_integer); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":169
 *     elif not numpy.isscalar(outlier_significance_level):
 *         raise TypeError('"outlier_significance_level" should be a scalar.')
 *     elif not isinstance(outlier_significance_level,             # <<<<<<<<<<<<<<
 *                         (int, numpy.integer, float)):
 *         raise TypeError('"outlier_significance_level" must be a float number.')
 */
  __Pyx_TraceLine(169,0,__PYX_ERR(0, 169, __pyx_L1_error))
  __pyx_t_1 = PyInt_Check(__pyx_v_outlier_significance_level); 

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":170
 *         raise TypeError('"outlier_significance_level" should be a scalar.')
 *     elif not isinstance(outlier_significance_level,
 *                         (int, numpy.integer, float)):             # <<<<<<<<<<<<<<
 *         raise TypeError('"outlier_significance_level" must be a float number.')
 *     elif outlier_significance_level < 0.0 or outlier_significance_level > 1.0:
 */
  __Pyx_TraceLine(170,0,__PYX_ERR(0, 170, __pyx_L1_error))
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L52_bool_binop_done;
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":169
 *     elif not numpy.isscalar(outlier_significance_level):
 *         raise TypeError('"outlier_significance_level" should be a scalar.')
 *     elif not isinstance(outlier_significance_level,             # <<<<<<<<<<<<<<
 *                         (int, numpy.integer, float)):
 *         raise TypeError('"outlier_significance_level" must be a float number.')
 */
  __Pyx_TraceLine(169,0,__PYX_ERR(0, 169, __pyx_L1_error))
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_outlier_significance_level, __pyx_t_6); 

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":170
 *         raise TypeError('"outlier_significance_level" should be a scalar.')
 *     elif not isinstance(outlier_significance_level,
 *                         (int, numpy.integer, float)):             # <<<<<<<<<<<<<<
 *         raise TypeError('"outlier_significance_level" must be a float number.')
 *     elif outlier_significance_level < 0.0 or outlier_significance_level > 1.0:
 */
  __Pyx_TraceLine(170,0,__PYX_ERR(0, 170, __pyx_L1_error))
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (!__pyx_t_1) {
  } else {
    __pyx_t_4 = __pyx_t_1;
    goto __pyx_L52_bool_binop_done;
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":169
 *     elif not numpy.isscalar(outlier_significance_level):
 *         raise TypeError('"outlier_significance_level" should be a scalar.')
 *     elif not isinstance(outlier_significance_level,             # <<<<<<<<<<<<<<
 *                         (int, numpy.integer, float)):
 *         raise TypeError('"outlier_significance_level" must be a float number.')
 */
  __Pyx_TraceLine(169,0,__PYX_ERR(0, 169, __pyx_L1_error))
  __pyx_t_1 = PyFloat_Check(__pyx_v_outlier_significance_level); 

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":170
 *         raise TypeError('"outlier_significance_level" should be a scalar.')
 *     elif not isinstance(outlier_significance_level,
 *                         (int, numpy.integer, float)):             # <<<<<<<<<<<<<<
 *         raise TypeError('"outlier_significance_level" must be a float number.')
 *     elif outlier_significance_level < 0.0 or outlier_significance_level > 1.0:
 */
  __Pyx_TraceLine(170,0,__PYX_ERR(0, 170, __pyx_L1_error))
  __pyx_t_5 = (__pyx_t_1 != 0);
  __pyx_t_4 = __pyx_t_5;
  __pyx_L52_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":169
 *     elif not numpy.isscalar(outlier_significance_level):
 *         raise TypeError('"outlier_significance_level" should be a scalar.')
 *     elif not isinstance(outlier_significance_level,             # <<<<<<<<<<<<<<
 *                         (int, numpy.integer, float)):
 *         raise TypeError('"outlier_significance_level" must be a float number.')
 */
  __Pyx_TraceLine(169,0,__PYX_ERR(0, 169, __pyx_L1_error))
  __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":171
 *     elif not isinstance(outlier_significance_level,
 *                         (int, numpy.integer, float)):
 *         raise TypeError('"outlier_significance_level" must be a float number.')             # <<<<<<<<<<<<<<
 *     elif outlier_significance_level < 0.0 or outlier_significance_level > 1.0:
 *         raise ValueError(
 */
    __Pyx_TraceLine(171,0,__PYX_ERR(0, 171, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 171, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":169
 *     elif not numpy.isscalar(outlier_significance_level):
 *         raise TypeError('"outlier_significance_level" should be a scalar.')
 *     elif not isinstance(outlier_significance_level,             # <<<<<<<<<<<<<<
 *                         (int, numpy.integer, float)):
 *         raise TypeError('"outlier_significance_level" must be a float number.')
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":172
 *                         (int, numpy.integer, float)):
 *         raise TypeError('"outlier_significance_level" must be a float number.')
 *     elif outlier_significance_level < 0.0 or outlier_significance_level > 1.0:             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *                 '"outlier_significance_level" must be in [0, 1] interval.')
 */
  __Pyx_TraceLine(172,0,__PYX_ERR(0, 172, __pyx_L1_error))
  __pyx_t_6 = PyObject_RichCompare(__pyx_v_outlier_significance_level, __pyx_float_0_0, Py_LT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 172, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!__pyx_t_4) {
  } else {
    __pyx_t_5 = __pyx_t_4;
    goto __pyx_L55_bool_binop_done;
  }
  __pyx_t_6 = PyObject_RichCompare(__pyx_v_outlier_significance_level, __pyx_float_1_0, Py_GT); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 172, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_5 = __pyx_t_4;
  __pyx_L55_bool_binop_done:;
  if (unlikely(__pyx_t_5)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":173
 *         raise TypeError('"outlier_significance_level" must be a float number.')
 *     elif outlier_significance_level < 0.0 or outlier_significance_level > 1.0:
 *         raise ValueError(             # <<<<<<<<<<<<<<
 *                 '"outlier_significance_level" must be in [0, 1] interval.')
 * 
 */
    __Pyx_TraceLine(173,0,__PYX_ERR(0, 173, __pyx_L1_error))
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 173, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":172
 *                         (int, numpy.integer, float)):
 *         raise TypeError('"outlier_significance_level" must be a float number.')
 *     elif outlier_significance_level < 0.0 or outlier_significance_level > 1.0:             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *                 '"outlier_significance_level" must be in [0, 1] interval.')
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":177
 * 
 *     # Compare outlier significance level and confidence level
 *     if outlier_significance_level > 1.0 - confidence_level:             # <<<<<<<<<<<<<<
 *         raise ValueError('The sum of "confidence_level" and ' +
 *                          '"outlier_significance_level" should be less than 1.')
 */
  __Pyx_TraceLine(177,0,__PYX_ERR(0, 177, __pyx_L1_error))
  __pyx_t_6 = __Pyx_PyFloat_SubtractCObj(__pyx_float_1_0, __pyx_v_confidence_level, 1.0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_outlier_significance_level, __pyx_t_6, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_5)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":178
 *     # Compare outlier significance level and confidence level
 *     if outlier_significance_level > 1.0 - confidence_level:
 *         raise ValueError('The sum of "confidence_level" and ' +             # <<<<<<<<<<<<<<
 *                          '"outlier_significance_level" should be less than 1.')
 * 
 */
    __Pyx_TraceLine(178,0,__PYX_ERR(0, 178, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 178, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":177
 * 
 *     # Compare outlier significance level and confidence level
 *     if outlier_significance_level > 1.0 - confidence_level:             # <<<<<<<<<<<<<<
 *         raise ValueError('The sum of "confidence_level" and ' +
 *                          '"outlier_significance_level" should be less than 1.')
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":182
 * 
 *     # Check solver tol
 *     if solver_tol is not None and not numpy.isscalar(solver_tol):             # <<<<<<<<<<<<<<
 *         raise TypeError('"solver_tol" should be a scalar value.')
 *     elif solver_tol is not None and \
 */
  __Pyx_TraceLine(182,0,__PYX_ERR(0, 182, __pyx_L1_error))
  __pyx_t_4 = (__pyx_v_solver_tol != Py_None);
  __pyx_t_1 = (__pyx_t_4 != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_5 = __pyx_t_1;
    goto __pyx_L59_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_isscalar); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_6, __pyx_v_solver_tol) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_solver_tol);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = ((!__pyx_t_1) != 0);
  __pyx_t_5 = __pyx_t_4;
  __pyx_L59_bool_binop_done:;
  if (unlikely(__pyx_t_5)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":183
 *     # Check solver tol
 *     if solver_tol is not None and not numpy.isscalar(solver_tol):
 *         raise TypeError('"solver_tol" should be a scalar value.')             # <<<<<<<<<<<<<<
 *     elif solver_tol is not None and \
 *             not isinstance(solver_tol, (int, numpy.integer, float)):
 */
    __Pyx_TraceLine(183,0,__PYX_ERR(0, 183, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 183, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":182
 * 
 *     # Check solver tol
 *     if solver_tol is not None and not numpy.isscalar(solver_tol):             # <<<<<<<<<<<<<<
 *         raise TypeError('"solver_tol" should be a scalar value.')
 *     elif solver_tol is not None and \
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":184
 *     if solver_tol is not None and not numpy.isscalar(solver_tol):
 *         raise TypeError('"solver_tol" should be a scalar value.')
 *     elif solver_tol is not None and \             # <<<<<<<<<<<<<<
 *             not isinstance(solver_tol, (int, numpy.integer, float)):
 *         raise TypeError('"solver_tol" should be a float number.')
 */
  __Pyx_TraceLine(184,0,__PYX_ERR(0, 184, __pyx_L1_error))
  __pyx_t_4 = (__pyx_v_solver_tol != Py_None);
  __pyx_t_1 = (__pyx_t_4 != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_5 = __pyx_t_1;
    goto __pyx_L61_bool_binop_done;
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":185
 *         raise TypeError('"solver_tol" should be a scalar value.')
 *     elif solver_tol is not None and \
 *             not isinstance(solver_tol, (int, numpy.integer, float)):             # <<<<<<<<<<<<<<
 *         raise TypeError('"solver_tol" should be a float number.')
 *     elif solver_tol is not None and solver_tol < 0.0:
 */
  __Pyx_TraceLine(185,0,__PYX_ERR(0, 185, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_integer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = PyInt_Check(__pyx_v_solver_tol); 
  __pyx_t_7 = (__pyx_t_4 != 0);
  if (!__pyx_t_7) {
  } else {
    __pyx_t_1 = __pyx_t_7;
    goto __pyx_L63_bool_binop_done;
  }
  __pyx_t_7 = PyObject_IsInstance(__pyx_v_solver_tol, __pyx_t_2); 
  __pyx_t_4 = (__pyx_t_7 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L63_bool_binop_done;
  }
  __pyx_t_4 = PyFloat_Check(__pyx_v_solver_tol); 
  __pyx_t_7 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_7;
  __pyx_L63_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = ((!(__pyx_t_1 != 0)) != 0);
  __pyx_t_5 = __pyx_t_7;
  __pyx_L61_bool_binop_done:;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":184
 *     if solver_tol is not None and not numpy.isscalar(solver_tol):
 *         raise TypeError('"solver_tol" should be a scalar value.')
 *     elif solver_tol is not None and \             # <<<<<<<<<<<<<<
 *             not isinstance(solver_tol, (int, numpy.integer, float)):
 *         raise TypeError('"solver_tol" should be a float number.')
 */
  __Pyx_TraceLine(184,0,__PYX_ERR(0, 184, __pyx_L1_error))
  if (unlikely(__pyx_t_5)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":186
 *     elif solver_tol is not None and \
 *             not isinstance(solver_tol, (int, numpy.integer, float)):
 *         raise TypeError('"solver_tol" should be a float number.')             # <<<<<<<<<<<<<<
 *     elif solver_tol is not None and solver_tol < 0.0:
 *         raise ValueError('"lancozs_tol" cannot be negative.')
 */
    __Pyx_TraceLine(186,0,__PYX_ERR(0, 186, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 186, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":184
 *     if solver_tol is not None and not numpy.isscalar(solver_tol):
 *         raise TypeError('"solver_tol" should be a scalar value.')
 *     elif solver_tol is not None and \             # <<<<<<<<<<<<<<
 *             not isinstance(solver_tol, (int, numpy.integer, float)):
 *         raise TypeError('"solver_tol" should be a float number.')
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":187
 *             not isinstance(solver_tol, (int, numpy.integer, float)):
 *         raise TypeError('"solver_tol" should be a float number.')
 *     elif solver_tol is not None and solver_tol < 0.0:             # <<<<<<<<<<<<<<
 *         raise ValueError('"lancozs_tol" cannot be negative.')
 * 
 */
  __Pyx_TraceLine(187,0,__PYX_ERR(0, 187, __pyx_L1_error))
  __pyx_t_7 = (__pyx_v_solver_tol != Py_None);
  __pyx_t_1 = (__pyx_t_7 != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_5 = __pyx_t_1;
    goto __pyx_L66_bool_binop_done;
  }
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_solver_tol, __pyx_float_0_0, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 187, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_t_1;
  __pyx_L66_bool_binop_done:;
  if (unlikely(__pyx_t_5)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":188
 *         raise TypeError('"solver_tol" should be a float number.')
 *     elif solver_tol is not None and solver_tol < 0.0:
 *         raise ValueError('"lancozs_tol" cannot be negative.')             # <<<<<<<<<<<<<<
 * 
 *     # Check orthogonalize
 */
    __Pyx_TraceLine(188,0,__PYX_ERR(0, 188, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 188, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":187
 *             not isinstance(solver_tol, (int, numpy.integer, float)):
 *         raise TypeError('"solver_tol" should be a float number.')
 *     elif solver_tol is not None and solver_tol < 0.0:             # <<<<<<<<<<<<<<
 *         raise ValueError('"lancozs_tol" cannot be negative.')
 * 
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":191
 * 
 *     # Check orthogonalize
 *     if orthogonalize is None:             # <<<<<<<<<<<<<<
 *         raise TypeError('"orthogonalize" cannot be None.')
 *     elif not numpy.isscalar(orthogonalize):
 */
  __Pyx_TraceLine(191,0,__PYX_ERR(0, 191, __pyx_L1_error))
  __pyx_t_5 = (__pyx_v_orthogonalize == Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (unlikely(__pyx_t_1)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":192
 *     # Check orthogonalize
 *     if orthogonalize is None:
 *         raise TypeError('"orthogonalize" cannot be None.')             # <<<<<<<<<<<<<<
 *     elif not numpy.isscalar(orthogonalize):
 *         raise TypeError('"orthogonalize" should be a scalar value.')
 */
    __Pyx_TraceLine(192,0,__PYX_ERR(0, 192, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 192, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":191
 * 
 *     # Check orthogonalize
 *     if orthogonalize is None:             # <<<<<<<<<<<<<<
 *         raise TypeError('"orthogonalize" cannot be None.')
 *     elif not numpy.isscalar(orthogonalize):
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":193
 *     if orthogonalize is None:
 *         raise TypeError('"orthogonalize" cannot be None.')
 *     elif not numpy.isscalar(orthogonalize):             # <<<<<<<<<<<<<<
 *         raise TypeError('"orthogonalize" should be a scalar value.')
 *     elif not isinstance(orthogonalize, bool):
 */
  __Pyx_TraceLine(193,0,__PYX_ERR(0, 193, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_isscalar); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_3, __pyx_v_orthogonalize) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_orthogonalize);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = ((!__pyx_t_1) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":194
 *         raise TypeError('"orthogonalize" cannot be None.')
 *     elif not numpy.isscalar(orthogonalize):
 *         raise TypeError('"orthogonalize" should be a scalar value.')             # <<<<<<<<<<<<<<
 *     elif not isinstance(orthogonalize, bool):
 *         raise TypeError('"orthogonalize" should be boolean.')
 */
    __Pyx_TraceLine(194,0,__PYX_ERR(0, 194, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 194, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":193
 *     if orthogonalize is None:
 *         raise TypeError('"orthogonalize" cannot be None.')
 *     elif not numpy.isscalar(orthogonalize):             # <<<<<<<<<<<<<<
 *         raise TypeError('"orthogonalize" should be a scalar value.')
 *     elif not isinstance(orthogonalize, bool):
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":195
 *     elif not numpy.isscalar(orthogonalize):
 *         raise TypeError('"orthogonalize" should be a scalar value.')
 *     elif not isinstance(orthogonalize, bool):             # <<<<<<<<<<<<<<
 *         raise TypeError('"orthogonalize" should be boolean.')
 * 
 */
  __Pyx_TraceLine(195,0,__PYX_ERR(0, 195, __pyx_L1_error))
  __pyx_t_2 = ((PyObject*)&PyBool_Type);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_orthogonalize, __pyx_t_2); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = ((!(__pyx_t_5 != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":196
 *         raise TypeError('"orthogonalize" should be a scalar value.')
 *     elif not isinstance(orthogonalize, bool):
 *         raise TypeError('"orthogonalize" should be boolean.')             # <<<<<<<<<<<<<<
 * 
 *     # Check num_threads
 */
    __Pyx_TraceLine(196,0,__PYX_ERR(0, 196, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 196, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":195
 *     elif not numpy.isscalar(orthogonalize):
 *         raise TypeError('"orthogonalize" should be a scalar value.')
 *     elif not isinstance(orthogonalize, bool):             # <<<<<<<<<<<<<<
 *         raise TypeError('"orthogonalize" should be boolean.')
 * 
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":199
 * 
 *     # Check num_threads
 *     if num_threads is None:             # <<<<<<<<<<<<<<
 *         raise TypeError('"num_threads" cannot be None.')
 *     elif not numpy.isscalar(num_threads):
 */
  __Pyx_TraceLine(199,0,__PYX_ERR(0, 199, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_num_threads == Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_5)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":200
 *     # Check num_threads
 *     if num_threads is None:
 *         raise TypeError('"num_threads" cannot be None.')             # <<<<<<<<<<<<<<
 *     elif not numpy.isscalar(num_threads):
 *         raise TypeError('"num_threads" should be a scalar value.')
 */
    __Pyx_TraceLine(200,0,__PYX_ERR(0, 200, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 200, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":199
 * 
 *     # Check num_threads
 *     if num_threads is None:             # <<<<<<<<<<<<<<
 *         raise TypeError('"num_threads" cannot be None.')
 *     elif not numpy.isscalar(num_threads):
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":201
 *     if num_threads is None:
 *         raise TypeError('"num_threads" cannot be None.')
 *     elif not numpy.isscalar(num_threads):             # <<<<<<<<<<<<<<
 *         raise TypeError('"num_threads" should be a scalar value.')
 *     elif not isinstance(num_threads, (int, numpy.integer)):
 */
  __Pyx_TraceLine(201,0,__PYX_ERR(0, 201, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_isscalar); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_6, __pyx_v_num_threads) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_num_threads);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = ((!__pyx_t_5) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":202
 *         raise TypeError('"num_threads" cannot be None.')
 *     elif not numpy.isscalar(num_threads):
 *         raise TypeError('"num_threads" should be a scalar value.')             # <<<<<<<<<<<<<<
 *     elif not isinstance(num_threads, (int, numpy.integer)):
 *         raise TypeError('"num_threads" should be an integer.')
 */
    __Pyx_TraceLine(202,0,__PYX_ERR(0, 202, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 202, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":201
 *     if num_threads is None:
 *         raise TypeError('"num_threads" cannot be None.')
 *     elif not numpy.isscalar(num_threads):             # <<<<<<<<<<<<<<
 *         raise TypeError('"num_threads" should be a scalar value.')
 *     elif not isinstance(num_threads, (int, numpy.integer)):
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":203
 *     elif not numpy.isscalar(num_threads):
 *         raise TypeError('"num_threads" should be a scalar value.')
 *     elif not isinstance(num_threads, (int, numpy.integer)):             # <<<<<<<<<<<<<<
 *         raise TypeError('"num_threads" should be an integer.')
 *     elif num_threads < 0:
 */
  __Pyx_TraceLine(203,0,__PYX_ERR(0, 203, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_integer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = PyInt_Check(__pyx_v_num_threads); 
  __pyx_t_7 = (__pyx_t_5 != 0);
  if (!__pyx_t_7) {
  } else {
    __pyx_t_1 = __pyx_t_7;
    goto __pyx_L70_bool_binop_done;
  }
  __pyx_t_7 = PyObject_IsInstance(__pyx_v_num_threads, __pyx_t_3); 
  __pyx_t_5 = (__pyx_t_7 != 0);
  __pyx_t_1 = __pyx_t_5;
  __pyx_L70_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":204
 *         raise TypeError('"num_threads" should be a scalar value.')
 *     elif not isinstance(num_threads, (int, numpy.integer)):
 *         raise TypeError('"num_threads" should be an integer.')             # <<<<<<<<<<<<<<
 *     elif num_threads < 0:
 *         raise ValueError('"num_threads" should be a non-negative integer.')
 */
    __Pyx_TraceLine(204,0,__PYX_ERR(0, 204, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 204, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":203
 *     elif not numpy.isscalar(num_threads):
 *         raise TypeError('"num_threads" should be a scalar value.')
 *     elif not isinstance(num_threads, (int, numpy.integer)):             # <<<<<<<<<<<<<<
 *         raise TypeError('"num_threads" should be an integer.')
 *     elif num_threads < 0:
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":205
 *     elif not isinstance(num_threads, (int, numpy.integer)):
 *         raise TypeError('"num_threads" should be an integer.')
 *     elif num_threads < 0:             # <<<<<<<<<<<<<<
 *         raise ValueError('"num_threads" should be a non-negative integer.')
 * 
 */
  __Pyx_TraceLine(205,0,__PYX_ERR(0, 205, __pyx_L1_error))
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_num_threads, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 205, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(__pyx_t_5)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":206
 *         raise TypeError('"num_threads" should be an integer.')
 *     elif num_threads < 0:
 *         raise ValueError('"num_threads" should be a non-negative integer.')             # <<<<<<<<<<<<<<
 * 
 *     # Check verbose
 */
    __Pyx_TraceLine(206,0,__PYX_ERR(0, 206, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 206, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":205
 *     elif not isinstance(num_threads, (int, numpy.integer)):
 *         raise TypeError('"num_threads" should be an integer.')
 *     elif num_threads < 0:             # <<<<<<<<<<<<<<
 *         raise ValueError('"num_threads" should be a non-negative integer.')
 * 
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":209
 * 
 *     # Check verbose
 *     if verbose is None:             # <<<<<<<<<<<<<<
 *         raise TypeError('"verbose" cannot be None.')
 *     elif not numpy.isscalar(verbose):
 */
  __Pyx_TraceLine(209,0,__PYX_ERR(0, 209, __pyx_L1_error))
  __pyx_t_5 = (__pyx_v_verbose == Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (unlikely(__pyx_t_1)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":210
 *     # Check verbose
 *     if verbose is None:
 *         raise TypeError('"verbose" cannot be None.')             # <<<<<<<<<<<<<<
 *     elif not numpy.isscalar(verbose):
 *         raise TypeError('"verbose" should be a scalar value.')
 */
    __Pyx_TraceLine(210,0,__PYX_ERR(0, 210, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 210, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":209
 * 
 *     # Check verbose
 *     if verbose is None:             # <<<<<<<<<<<<<<
 *         raise TypeError('"verbose" cannot be None.')
 *     elif not numpy.isscalar(verbose):
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":211
 *     if verbose is None:
 *         raise TypeError('"verbose" cannot be None.')
 *     elif not numpy.isscalar(verbose):             # <<<<<<<<<<<<<<
 *         raise TypeError('"verbose" should be a scalar value.')
 *     elif not isinstance(verbose, bool):
 */
  __Pyx_TraceLine(211,0,__PYX_ERR(0, 211, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_isscalar); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_2, __pyx_v_verbose) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_verbose);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = ((!__pyx_t_1) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":212
 *         raise TypeError('"verbose" cannot be None.')
 *     elif not numpy.isscalar(verbose):
 *         raise TypeError('"verbose" should be a scalar value.')             # <<<<<<<<<<<<<<
 *     elif not isinstance(verbose, bool):
 *         raise TypeError('"verbose" should be boolean.')
 */
    __Pyx_TraceLine(212,0,__PYX_ERR(0, 212, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__55, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 212, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":211
 *     if verbose is None:
 *         raise TypeError('"verbose" cannot be None.')
 *     elif not numpy.isscalar(verbose):             # <<<<<<<<<<<<<<
 *         raise TypeError('"verbose" should be a scalar value.')
 *     elif not isinstance(verbose, bool):
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":213
 *     elif not numpy.isscalar(verbose):
 *         raise TypeError('"verbose" should be a scalar value.')
 *     elif not isinstance(verbose, bool):             # <<<<<<<<<<<<<<
 *         raise TypeError('"verbose" should be boolean.')
 * 
 */
  __Pyx_TraceLine(213,0,__PYX_ERR(0, 213, __pyx_L1_error))
  __pyx_t_3 = ((PyObject*)&PyBool_Type);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_verbose, __pyx_t_3); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = ((!(__pyx_t_5 != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":214
 *         raise TypeError('"verbose" should be a scalar value.')
 *     elif not isinstance(verbose, bool):
 *         raise TypeError('"verbose" should be boolean.')             # <<<<<<<<<<<<<<
 * 
 *     # Check plot
 */
    __Pyx_TraceLine(214,0,__PYX_ERR(0, 214, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 214, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":213
 *     elif not numpy.isscalar(verbose):
 *         raise TypeError('"verbose" should be a scalar value.')
 *     elif not isinstance(verbose, bool):             # <<<<<<<<<<<<<<
 *         raise TypeError('"verbose" should be boolean.')
 * 
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":217
 * 
 *     # Check plot
 *     if plot is None:             # <<<<<<<<<<<<<<
 *         raise TypeError('"plot" cannot be None.')
 *     elif not numpy.isscalar(plot):
 */
  __Pyx_TraceLine(217,0,__PYX_ERR(0, 217, __pyx_L1_error))
  __pyx_t_1 = (__pyx_v_plot == Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_5)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":218
 *     # Check plot
 *     if plot is None:
 *         raise TypeError('"plot" cannot be None.')             # <<<<<<<<<<<<<<
 *     elif not numpy.isscalar(plot):
 *         raise TypeError('"plot" should be a scalar value.')
 */
    __Pyx_TraceLine(218,0,__PYX_ERR(0, 218, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 218, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":217
 * 
 *     # Check plot
 *     if plot is None:             # <<<<<<<<<<<<<<
 *         raise TypeError('"plot" cannot be None.')
 *     elif not numpy.isscalar(plot):
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":219
 *     if plot is None:
 *         raise TypeError('"plot" cannot be None.')
 *     elif not numpy.isscalar(plot):             # <<<<<<<<<<<<<<
 *         raise TypeError('"plot" should be a scalar value.')
 *     elif not isinstance(plot, bool):
 */
  __Pyx_TraceLine(219,0,__PYX_ERR(0, 219, __pyx_L1_error))
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_numpy); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_isscalar); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_6, __pyx_v_plot) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_plot);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = ((!__pyx_t_5) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":220
 *         raise TypeError('"plot" cannot be None.')
 *     elif not numpy.isscalar(plot):
 *         raise TypeError('"plot" should be a scalar value.')             # <<<<<<<<<<<<<<
 *     elif not isinstance(plot, bool):
 *         raise TypeError('"plot" should be boolean.')
 */
    __Pyx_TraceLine(220,0,__PYX_ERR(0, 220, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 220, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":219
 *     if plot is None:
 *         raise TypeError('"plot" cannot be None.')
 *     elif not numpy.isscalar(plot):             # <<<<<<<<<<<<<<
 *         raise TypeError('"plot" should be a scalar value.')
 *     elif not isinstance(plot, bool):
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":221
 *     elif not numpy.isscalar(plot):
 *         raise TypeError('"plot" should be a scalar value.')
 *     elif not isinstance(plot, bool):             # <<<<<<<<<<<<<<
 *         raise TypeError('"plot" should be boolean.')
 * 
 */
  __Pyx_TraceLine(221,0,__PYX_ERR(0, 221, __pyx_L1_error))
  __pyx_t_3 = ((PyObject*)&PyBool_Type);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_plot, __pyx_t_3); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":222
 *         raise TypeError('"plot" should be a scalar value.')
 *     elif not isinstance(plot, bool):
 *         raise TypeError('"plot" should be boolean.')             # <<<<<<<<<<<<<<
 * 
 *     # Check if plot modules exist
 */
    __Pyx_TraceLine(222,0,__PYX_ERR(0, 222, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 222, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":221
 *     elif not numpy.isscalar(plot):
 *         raise TypeError('"plot" should be a scalar value.')
 *     elif not isinstance(plot, bool):             # <<<<<<<<<<<<<<
 *         raise TypeError('"plot" should be boolean.')
 * 
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":225
 * 
 *     # Check if plot modules exist
 *     if plot is True:             # <<<<<<<<<<<<<<
 *         try:
 *             from .._utilities.plot_utilities import matplotlib      # noqa F401
 */
  __Pyx_TraceLine(225,0,__PYX_ERR(0, 225, __pyx_L1_error))
  __pyx_t_5 = (__pyx_v_plot == Py_True);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":226
 *     # Check if plot modules exist
 *     if plot is True:
 *         try:             # <<<<<<<<<<<<<<
 *             from .._utilities.plot_utilities import matplotlib      # noqa F401
 *             from .._utilities.plot_utilities import load_plot_settings
 */
    __Pyx_TraceLine(226,0,__PYX_ERR(0, 226, __pyx_L1_error))
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      /*try:*/ {

        /* "imate/traceinv/_hutchinson_method_utilities.pyx":227
 *     if plot is True:
 *         try:
 *             from .._utilities.plot_utilities import matplotlib      # noqa F401             # <<<<<<<<<<<<<<
 *             from .._utilities.plot_utilities import load_plot_settings
 *             load_plot_settings()
 */
        __Pyx_TraceLine(227,0,__PYX_ERR(0, 227, __pyx_L75_error))
        __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 227, __pyx_L75_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_n_s_matplotlib);
        __Pyx_GIVEREF(__pyx_n_s_matplotlib);
        PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_matplotlib);
        __pyx_t_2 = __Pyx_Import(__pyx_n_s_utilities_plot_utilities, __pyx_t_3, 2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 227, __pyx_L75_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_matplotlib); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 227, __pyx_L75_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_3);
        __pyx_v_matplotlib = __pyx_t_3;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "imate/traceinv/_hutchinson_method_utilities.pyx":228
 *         try:
 *             from .._utilities.plot_utilities import matplotlib      # noqa F401
 *             from .._utilities.plot_utilities import load_plot_settings             # <<<<<<<<<<<<<<
 *             load_plot_settings()
 *         except ImportError:
 */
        __Pyx_TraceLine(228,0,__PYX_ERR(0, 228, __pyx_L75_error))
        __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 228, __pyx_L75_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_n_s_load_plot_settings);
        __Pyx_GIVEREF(__pyx_n_s_load_plot_settings);
        PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_load_plot_settings);
        __pyx_t_3 = __Pyx_Import(__pyx_n_s_utilities_plot_utilities, __pyx_t_2, 2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 228, __pyx_L75_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_load_plot_settings); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 228, __pyx_L75_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_2);
        __pyx_v_load_plot_settings = __pyx_t_2;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "imate/traceinv/_hutchinson_method_utilities.pyx":229
 *             from .._utilities.plot_utilities import matplotlib      # noqa F401
 *             from .._utilities.plot_utilities import load_plot_settings
 *             load_plot_settings()             # <<<<<<<<<<<<<<
 *         except ImportError:
 *             raise ImportError('Cannot import modules for plotting. Either ' +
 */
        __Pyx_TraceLine(229,0,__PYX_ERR(0, 229, __pyx_L75_error))
        __Pyx_INCREF(__pyx_v_load_plot_settings);
        __pyx_t_2 = __pyx_v_load_plot_settings; __pyx_t_6 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 229, __pyx_L75_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "imate/traceinv/_hutchinson_method_utilities.pyx":226
 *     # Check if plot modules exist
 *     if plot is True:
 *         try:             # <<<<<<<<<<<<<<
 *             from .._utilities.plot_utilities import matplotlib      # noqa F401
 *             from .._utilities.plot_utilities import load_plot_settings
 */
      }
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L80_try_end;
      __pyx_L75_error:;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":230
 *             from .._utilities.plot_utilities import load_plot_settings
 *             load_plot_settings()
 *         except ImportError:             # <<<<<<<<<<<<<<
 *             raise ImportError('Cannot import modules for plotting. Either ' +
 *                               'install "matplotlib" and "seaborn" packages, ' +
 */
      __Pyx_TraceLine(230,0,__PYX_ERR(0, 230, __pyx_L77_except_error))
      __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ImportError);
      if (__pyx_t_11) {
        __Pyx_AddTraceback("imate.traceinv._hutchinson_method_utilities.check_arguments", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_2, &__pyx_t_6) < 0) __PYX_ERR(0, 230, __pyx_L77_except_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GOTREF(__pyx_t_6);

        /* "imate/traceinv/_hutchinson_method_utilities.pyx":231
 *             load_plot_settings()
 *         except ImportError:
 *             raise ImportError('Cannot import modules for plotting. Either ' +             # <<<<<<<<<<<<<<
 *                               'install "matplotlib" and "seaborn" packages, ' +
 *                               'or set "plot=False".')
 */
        __Pyx_TraceLine(231,0,__PYX_ERR(0, 231, __pyx_L77_except_error))
        __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__60, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 231, __pyx_L77_except_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_Raise(__pyx_t_12, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __PYX_ERR(0, 231, __pyx_L77_except_error)
      }
      goto __pyx_L77_except_error;
      __pyx_L77_except_error:;

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":226
 *     # Check if plot modules exist
 *     if plot is True:
 *         try:             # <<<<<<<<<<<<<<
 *             from .._utilities.plot_utilities import matplotlib      # noqa F401
 *             from .._utilities.plot_utilities import load_plot_settings
 */
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      goto __pyx_L1_error;
      __pyx_L80_try_end:;
    }

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":225
 * 
 *     # Check if plot modules exist
 *     if plot is True:             # <<<<<<<<<<<<<<
 *         try:
 *             from .._utilities.plot_utilities import matplotlib      # noqa F401
 */
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":235
 *                               'or set "plot=False".')
 * 
 *     return error_atol, error_rtol             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(235,0,__PYX_ERR(0, 235, __pyx_L1_error))
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_error_atol);
  __Pyx_GIVEREF(__pyx_v_error_atol);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_error_atol);
  __Pyx_INCREF(__pyx_v_error_rtol);
  __Pyx_GIVEREF(__pyx_v_error_rtol);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_error_rtol);
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":22
 * # ===============
 * 
 * def check_arguments(             # <<<<<<<<<<<<<<
 *         A,
 *         B,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("imate.traceinv._hutchinson_method_utilities.check_arguments", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_matplotlib);
  __Pyx_XDECREF(__pyx_v_load_plot_settings);
  __Pyx_XDECREF(__pyx_v_error_atol);
  __Pyx_XDECREF(__pyx_v_error_rtol);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "imate/traceinv/_hutchinson_method_utilities.pyx":242
 * # =============
 * 
 * def print_summary(info):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

/* Python wrapper */
static PyObject *__pyx_pw_5imate_8traceinv_28_hutchinson_method_utilities_3print_summary(PyObject *__pyx_self, PyObject *__pyx_v_info); /*proto*/
static char __pyx_doc_5imate_8traceinv_28_hutchinson_method_utilities_2print_summary[] = "print_summary(info)\n\n    ";
static PyMethodDef __pyx_mdef_5imate_8traceinv_28_hutchinson_method_utilities_3print_summary = {"print_summary", (PyCFunction)__pyx_pw_5imate_8traceinv_28_hutchinson_method_utilities_3print_summary, METH_O, __pyx_doc_5imate_8traceinv_28_hutchinson_method_utilities_2print_summary};
static PyObject *__pyx_pw_5imate_8traceinv_28_hutchinson_method_utilities_3print_summary(PyObject *__pyx_self, PyObject *__pyx_v_info) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("print_summary (wrapper)", 0);
  __pyx_r = __pyx_pf_5imate_8traceinv_28_hutchinson_method_utilities_2print_summary(__pyx_self, ((PyObject *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5imate_8traceinv_28_hutchinson_method_utilities_2print_summary(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_info) {
  PyObject *__pyx_v_data_type = NULL;
  PyObject *__pyx_v_gram = NULL;
  PyObject *__pyx_v_exponent = NULL;
  PyObject *__pyx_v_assume_matrix = NULL;
  PyObject *__pyx_v_num_inquiries = NULL;
  PyObject *__pyx_v_absolute_error = NULL;
  PyObject *__pyx_v_relative_error = NULL;
  PyObject *__pyx_v_error_atol = NULL;
  PyObject *__pyx_v_error_rtol = NULL;
  PyObject *__pyx_v_confidence_level = NULL;
  PyObject *__pyx_v_outlier_significance_level = NULL;
  PyObject *__pyx_v_num_samples_used = NULL;
  PyObject *__pyx_v_num_outliers = NULL;
  PyObject *__pyx_v_min_num_samples = NULL;
  PyObject *__pyx_v_max_num_samples = NULL;
  PyObject *__pyx_v_converged = NULL;
  PyObject *__pyx_v_trace = NULL;
  PyObject *__pyx_v_tot_wall_time = NULL;
  PyObject *__pyx_v_alg_wall_time = NULL;
  PyObject *__pyx_v_cpu_proc_time = NULL;
  PyObject *__pyx_v_num_cpu_threads = NULL;
  PyObject *__pyx_v_num_gpu_devices = NULL;
  PyObject *__pyx_v_num_gpu_multiprocessors = NULL;
  PyObject *__pyx_v_num_gpu_threads_per_multiprocessor = NULL;
  PyObject *__pyx_v_solver_tol = NULL;
  PyObject *__pyx_v_orthogonalize = NULL;
  PyObject *__pyx_v_data_type_ = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_UCS4 __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_TraceFrameInit(__pyx_codeobj__61)
  __Pyx_RefNannySetupContext("print_summary", 0);
  __Pyx_TraceCall("print_summary", __pyx_f[0], 242, 0, __PYX_ERR(0, 242, __pyx_L1_error));

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":247
 * 
 *     # Matrix info
 *     data_type = info['matrix']['data_type'].decode("utf-8")             # <<<<<<<<<<<<<<
 *     gram = info['matrix']['gram']
 *     exponent = info['matrix']['exponent']
 */
  __Pyx_TraceLine(247,0,__PYX_ERR(0, 247, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_info, __pyx_n_u_matrix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_u_data_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_decode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_utf_8) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_utf_8);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_data_type = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":248
 *     # Matrix info
 *     data_type = info['matrix']['data_type'].decode("utf-8")
 *     gram = info['matrix']['gram']             # <<<<<<<<<<<<<<
 *     exponent = info['matrix']['exponent']
 *     assume_matrix = info['matrix']['assume_matrix']
 */
  __Pyx_TraceLine(248,0,__PYX_ERR(0, 248, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_info, __pyx_n_u_matrix); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_u_gram); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_gram = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":249
 *     data_type = info['matrix']['data_type'].decode("utf-8")
 *     gram = info['matrix']['gram']
 *     exponent = info['matrix']['exponent']             # <<<<<<<<<<<<<<
 *     assume_matrix = info['matrix']['assume_matrix']
 *     num_inquiries = info['matrix']['num_inquiries']
 */
  __Pyx_TraceLine(249,0,__PYX_ERR(0, 249, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_info, __pyx_n_u_matrix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_u_exponent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_exponent = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":250
 *     gram = info['matrix']['gram']
 *     exponent = info['matrix']['exponent']
 *     assume_matrix = info['matrix']['assume_matrix']             # <<<<<<<<<<<<<<
 *     num_inquiries = info['matrix']['num_inquiries']
 * 
 */
  __Pyx_TraceLine(250,0,__PYX_ERR(0, 250, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_info, __pyx_n_u_matrix); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_u_assume_matrix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_assume_matrix = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":251
 *     exponent = info['matrix']['exponent']
 *     assume_matrix = info['matrix']['assume_matrix']
 *     num_inquiries = info['matrix']['num_inquiries']             # <<<<<<<<<<<<<<
 * 
 *     # Error info
 */
  __Pyx_TraceLine(251,0,__PYX_ERR(0, 251, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_info, __pyx_n_u_matrix); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_u_num_inquiries); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_num_inquiries = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":254
 * 
 *     # Error info
 *     absolute_error = info['error']['absolute_error']             # <<<<<<<<<<<<<<
 *     relative_error = info['error']['relative_error'] * 100.0
 *     error_atol = info['error']['error_atol']
 */
  __Pyx_TraceLine(254,0,__PYX_ERR(0, 254, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_info, __pyx_n_u_error); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_u_absolute_error); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_absolute_error = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":255
 *     # Error info
 *     absolute_error = info['error']['absolute_error']
 *     relative_error = info['error']['relative_error'] * 100.0             # <<<<<<<<<<<<<<
 *     error_atol = info['error']['error_atol']
 *     error_rtol = info['error']['error_rtol'] * 100.0
 */
  __Pyx_TraceLine(255,0,__PYX_ERR(0, 255, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_info, __pyx_n_u_error); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_u_relative_error); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_float_100_0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_relative_error = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":256
 *     absolute_error = info['error']['absolute_error']
 *     relative_error = info['error']['relative_error'] * 100.0
 *     error_atol = info['error']['error_atol']             # <<<<<<<<<<<<<<
 *     error_rtol = info['error']['error_rtol'] * 100.0
 *     confidence_level = info['error']['confidence_level'] * 100.0
 */
  __Pyx_TraceLine(256,0,__PYX_ERR(0, 256, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_info, __pyx_n_u_error); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_u_error_atol); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_error_atol = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":257
 *     relative_error = info['error']['relative_error'] * 100.0
 *     error_atol = info['error']['error_atol']
 *     error_rtol = info['error']['error_rtol'] * 100.0             # <<<<<<<<<<<<<<
 *     confidence_level = info['error']['confidence_level'] * 100.0
 *     outlier_significance_level = info['error']['outlier_significance_level']
 */
  __Pyx_TraceLine(257,0,__PYX_ERR(0, 257, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_info, __pyx_n_u_error); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_u_error_rtol); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_float_100_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_error_rtol = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":258
 *     error_atol = info['error']['error_atol']
 *     error_rtol = info['error']['error_rtol'] * 100.0
 *     confidence_level = info['error']['confidence_level'] * 100.0             # <<<<<<<<<<<<<<
 *     outlier_significance_level = info['error']['outlier_significance_level']
 * 
 */
  __Pyx_TraceLine(258,0,__PYX_ERR(0, 258, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_info, __pyx_n_u_error); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_u_confidence_level); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_float_100_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_confidence_level = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":259
 *     error_rtol = info['error']['error_rtol'] * 100.0
 *     confidence_level = info['error']['confidence_level'] * 100.0
 *     outlier_significance_level = info['error']['outlier_significance_level']             # <<<<<<<<<<<<<<
 * 
 *     # Convergence info
 */
  __Pyx_TraceLine(259,0,__PYX_ERR(0, 259, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_info, __pyx_n_u_error); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_u_outlier_significance_level); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_outlier_significance_level = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":262
 * 
 *     # Convergence info
 *     num_samples_used = info['convergence']['num_samples_used']             # <<<<<<<<<<<<<<
 *     num_outliers = info['convergence']['num_outliers']
 *     min_num_samples = info['convergence']['min_num_samples']
 */
  __Pyx_TraceLine(262,0,__PYX_ERR(0, 262, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_info, __pyx_n_u_convergence); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_u_num_samples_used); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_num_samples_used = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":263
 *     # Convergence info
 *     num_samples_used = info['convergence']['num_samples_used']
 *     num_outliers = info['convergence']['num_outliers']             # <<<<<<<<<<<<<<
 *     min_num_samples = info['convergence']['min_num_samples']
 *     max_num_samples = info['convergence']['max_num_samples']
 */
  __Pyx_TraceLine(263,0,__PYX_ERR(0, 263, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_info, __pyx_n_u_convergence); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_u_num_outliers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_num_outliers = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":264
 *     num_samples_used = info['convergence']['num_samples_used']
 *     num_outliers = info['convergence']['num_outliers']
 *     min_num_samples = info['convergence']['min_num_samples']             # <<<<<<<<<<<<<<
 *     max_num_samples = info['convergence']['max_num_samples']
 *     converged = info['convergence']['converged']
 */
  __Pyx_TraceLine(264,0,__PYX_ERR(0, 264, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_info, __pyx_n_u_convergence); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_u_min_num_samples); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_min_num_samples = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":265
 *     num_outliers = info['convergence']['num_outliers']
 *     min_num_samples = info['convergence']['min_num_samples']
 *     max_num_samples = info['convergence']['max_num_samples']             # <<<<<<<<<<<<<<
 *     converged = info['convergence']['converged']
 *     trace = info['convergence']['samples_mean']
 */
  __Pyx_TraceLine(265,0,__PYX_ERR(0, 265, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_info, __pyx_n_u_convergence); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_u_max_num_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_max_num_samples = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":266
 *     min_num_samples = info['convergence']['min_num_samples']
 *     max_num_samples = info['convergence']['max_num_samples']
 *     converged = info['convergence']['converged']             # <<<<<<<<<<<<<<
 *     trace = info['convergence']['samples_mean']
 * 
 */
  __Pyx_TraceLine(266,0,__PYX_ERR(0, 266, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_info, __pyx_n_u_convergence); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_u_converged); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_converged = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":267
 *     max_num_samples = info['convergence']['max_num_samples']
 *     converged = info['convergence']['converged']
 *     trace = info['convergence']['samples_mean']             # <<<<<<<<<<<<<<
 * 
 *     # time
 */
  __Pyx_TraceLine(267,0,__PYX_ERR(0, 267, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_info, __pyx_n_u_convergence); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_u_samples_mean); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_trace = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":270
 * 
 *     # time
 *     tot_wall_time = info['time']['tot_wall_time']             # <<<<<<<<<<<<<<
 *     alg_wall_time = info['time']['alg_wall_time']
 *     cpu_proc_time = info['time']['cpu_proc_time']
 */
  __Pyx_TraceLine(270,0,__PYX_ERR(0, 270, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_info, __pyx_n_u_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_u_tot_wall_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_tot_wall_time = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":271
 *     # time
 *     tot_wall_time = info['time']['tot_wall_time']
 *     alg_wall_time = info['time']['alg_wall_time']             # <<<<<<<<<<<<<<
 *     cpu_proc_time = info['time']['cpu_proc_time']
 * 
 */
  __Pyx_TraceLine(271,0,__PYX_ERR(0, 271, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_info, __pyx_n_u_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_u_alg_wall_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_alg_wall_time = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":272
 *     tot_wall_time = info['time']['tot_wall_time']
 *     alg_wall_time = info['time']['alg_wall_time']
 *     cpu_proc_time = info['time']['cpu_proc_time']             # <<<<<<<<<<<<<<
 * 
 *     # device
 */
  __Pyx_TraceLine(272,0,__PYX_ERR(0, 272, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_info, __pyx_n_u_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_u_cpu_proc_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_cpu_proc_time = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":275
 * 
 *     # device
 *     num_cpu_threads = info['device']['num_cpu_threads']             # <<<<<<<<<<<<<<
 *     num_gpu_devices = info['device']['num_gpu_devices']
 *     num_gpu_multiprocessors = info['device']['num_gpu_multiprocessors']
 */
  __Pyx_TraceLine(275,0,__PYX_ERR(0, 275, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_info, __pyx_n_u_device); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_u_num_cpu_threads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_num_cpu_threads = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":276
 *     # device
 *     num_cpu_threads = info['device']['num_cpu_threads']
 *     num_gpu_devices = info['device']['num_gpu_devices']             # <<<<<<<<<<<<<<
 *     num_gpu_multiprocessors = info['device']['num_gpu_multiprocessors']
 *     num_gpu_threads_per_multiprocessor = \
 */
  __Pyx_TraceLine(276,0,__PYX_ERR(0, 276, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_info, __pyx_n_u_device); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_u_num_gpu_devices); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_num_gpu_devices = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":277
 *     num_cpu_threads = info['device']['num_cpu_threads']
 *     num_gpu_devices = info['device']['num_gpu_devices']
 *     num_gpu_multiprocessors = info['device']['num_gpu_multiprocessors']             # <<<<<<<<<<<<<<
 *     num_gpu_threads_per_multiprocessor = \
 *         info['device']['num_gpu_threads_per_multiprocessor']
 */
  __Pyx_TraceLine(277,0,__PYX_ERR(0, 277, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_info, __pyx_n_u_device); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_u_num_gpu_multiprocessors); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_num_gpu_multiprocessors = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":279
 *     num_gpu_multiprocessors = info['device']['num_gpu_multiprocessors']
 *     num_gpu_threads_per_multiprocessor = \
 *         info['device']['num_gpu_threads_per_multiprocessor']             # <<<<<<<<<<<<<<
 * 
 *     # Solver info
 */
  __Pyx_TraceLine(279,0,__PYX_ERR(0, 279, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_info, __pyx_n_u_device); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_u_num_gpu_threads_per_multiprocess); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_num_gpu_threads_per_multiprocessor = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":282
 * 
 *     # Solver info
 *     solver_tol = info['solver']['solver_tol']             # <<<<<<<<<<<<<<
 *     orthogonalize = info['solver']['orthogonalize']
 * 
 */
  __Pyx_TraceLine(282,0,__PYX_ERR(0, 282, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_info, __pyx_n_u_solver); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_u_solver_tol); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_solver_tol = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":283
 *     # Solver info
 *     solver_tol = info['solver']['solver_tol']
 *     orthogonalize = info['solver']['orthogonalize']             # <<<<<<<<<<<<<<
 * 
 *     # Makes assume_matrix string more readable
 */
  __Pyx_TraceLine(283,0,__PYX_ERR(0, 283, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_info, __pyx_n_u_solver); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_u_orthogonalize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_orthogonalize = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":286
 * 
 *     # Makes assume_matrix string more readable
 *     if assume_matrix == "gen":             # <<<<<<<<<<<<<<
 *         assume_matrix = "generic"
 *     elif assume_matrix == "sym":
 */
  __Pyx_TraceLine(286,0,__PYX_ERR(0, 286, __pyx_L1_error))
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_v_assume_matrix, __pyx_n_u_gen, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 286, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":287
 *     # Makes assume_matrix string more readable
 *     if assume_matrix == "gen":
 *         assume_matrix = "generic"             # <<<<<<<<<<<<<<
 *     elif assume_matrix == "sym":
 *         assume_matrix = "symmetric"
 */
    __Pyx_TraceLine(287,0,__PYX_ERR(0, 287, __pyx_L1_error))
    __Pyx_INCREF(__pyx_n_u_generic);
    __Pyx_DECREF_SET(__pyx_v_assume_matrix, __pyx_n_u_generic);

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":286
 * 
 *     # Makes assume_matrix string more readable
 *     if assume_matrix == "gen":             # <<<<<<<<<<<<<<
 *         assume_matrix = "generic"
 *     elif assume_matrix == "sym":
 */
    goto __pyx_L3;
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":288
 *     if assume_matrix == "gen":
 *         assume_matrix = "generic"
 *     elif assume_matrix == "sym":             # <<<<<<<<<<<<<<
 *         assume_matrix = "symmetric"
 *     elif assume_matrix == "sym_pos":
 */
  __Pyx_TraceLine(288,0,__PYX_ERR(0, 288, __pyx_L1_error))
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_v_assume_matrix, __pyx_n_u_sym, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 288, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":289
 *         assume_matrix = "generic"
 *     elif assume_matrix == "sym":
 *         assume_matrix = "symmetric"             # <<<<<<<<<<<<<<
 *     elif assume_matrix == "sym_pos":
 *         assume_matrix = "symmetric-positive"
 */
    __Pyx_TraceLine(289,0,__PYX_ERR(0, 289, __pyx_L1_error))
    __Pyx_INCREF(__pyx_n_u_symmetric);
    __Pyx_DECREF_SET(__pyx_v_assume_matrix, __pyx_n_u_symmetric);

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":288
 *     if assume_matrix == "gen":
 *         assume_matrix = "generic"
 *     elif assume_matrix == "sym":             # <<<<<<<<<<<<<<
 *         assume_matrix = "symmetric"
 *     elif assume_matrix == "sym_pos":
 */
    goto __pyx_L3;
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":290
 *     elif assume_matrix == "sym":
 *         assume_matrix = "symmetric"
 *     elif assume_matrix == "sym_pos":             # <<<<<<<<<<<<<<
 *         assume_matrix = "symmetric-positive"
 *     else:
 */
  __Pyx_TraceLine(290,0,__PYX_ERR(0, 290, __pyx_L1_error))
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_v_assume_matrix, __pyx_n_u_sym_pos, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 290, __pyx_L1_error)
  if (likely(__pyx_t_4)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":291
 *         assume_matrix = "symmetric"
 *     elif assume_matrix == "sym_pos":
 *         assume_matrix = "symmetric-positive"             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError('"assume_matrix" is invalid.')
 */
    __Pyx_TraceLine(291,0,__PYX_ERR(0, 291, __pyx_L1_error))
    __Pyx_INCREF(__pyx_kp_u_symmetric_positive);
    __Pyx_DECREF_SET(__pyx_v_assume_matrix, __pyx_kp_u_symmetric_positive);

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":290
 *     elif assume_matrix == "sym":
 *         assume_matrix = "symmetric"
 *     elif assume_matrix == "sym_pos":             # <<<<<<<<<<<<<<
 *         assume_matrix = "symmetric-positive"
 *     else:
 */
    goto __pyx_L3;
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":293
 *         assume_matrix = "symmetric-positive"
 *     else:
 *         raise ValueError('"assume_matrix" is invalid.')             # <<<<<<<<<<<<<<
 * 
 *     # Convert data type to x-bit format
 */
  __Pyx_TraceLine(293,0,__PYX_ERR(0, 293, __pyx_L1_error))
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 293, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":296
 * 
 *     # Convert data type to x-bit format
 *     if data_type == 'float32':             # <<<<<<<<<<<<<<
 *         data_type_ = '32-bit'
 *     elif data_type == 'float64':
 */
  __Pyx_TraceLine(296,0,__PYX_ERR(0, 296, __pyx_L1_error))
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_v_data_type, __pyx_n_u_float32, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 296, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":297
 *     # Convert data type to x-bit format
 *     if data_type == 'float32':
 *         data_type_ = '32-bit'             # <<<<<<<<<<<<<<
 *     elif data_type == 'float64':
 *         data_type_ = '64-bit'
 */
    __Pyx_TraceLine(297,0,__PYX_ERR(0, 297, __pyx_L1_error))
    __Pyx_INCREF(__pyx_kp_u_32_bit);
    __pyx_v_data_type_ = __pyx_kp_u_32_bit;

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":296
 * 
 *     # Convert data type to x-bit format
 *     if data_type == 'float32':             # <<<<<<<<<<<<<<
 *         data_type_ = '32-bit'
 *     elif data_type == 'float64':
 */
    goto __pyx_L4;
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":298
 *     if data_type == 'float32':
 *         data_type_ = '32-bit'
 *     elif data_type == 'float64':             # <<<<<<<<<<<<<<
 *         data_type_ = '64-bit'
 *     else:
 */
  __Pyx_TraceLine(298,0,__PYX_ERR(0, 298, __pyx_L1_error))
  __pyx_t_4 = (__Pyx_PyUnicode_Equals(__pyx_v_data_type, __pyx_n_u_float64, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 298, __pyx_L1_error)
  if (likely(__pyx_t_4)) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":299
 *         data_type_ = '32-bit'
 *     elif data_type == 'float64':
 *         data_type_ = '64-bit'             # <<<<<<<<<<<<<<
 *     else:
 *         raise TypeError('"data_type" should be "float32" or "float64".')
 */
    __Pyx_TraceLine(299,0,__PYX_ERR(0, 299, __pyx_L1_error))
    __Pyx_INCREF(__pyx_kp_u_64_bit);
    __pyx_v_data_type_ = __pyx_kp_u_64_bit;

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":298
 *     if data_type == 'float32':
 *         data_type_ = '32-bit'
 *     elif data_type == 'float64':             # <<<<<<<<<<<<<<
 *         data_type_ = '64-bit'
 *     else:
 */
    goto __pyx_L4;
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":301
 *         data_type_ = '64-bit'
 *     else:
 *         raise TypeError('"data_type" should be "float32" or "float64".')             # <<<<<<<<<<<<<<
 * 
 *     # Print results
 */
  __Pyx_TraceLine(301,0,__PYX_ERR(0, 301, __pyx_L1_error))
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 301, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":304
 * 
 *     # Print results
 *     print('                                    results                      ' +             # <<<<<<<<<<<<<<
 *           '             ')
 *     print('=================================================================' +
 */
  __Pyx_TraceLine(304,0,__PYX_ERR(0, 304, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":306
 *     print('                                    results                      ' +
 *           '             ')
 *     print('=================================================================' +             # <<<<<<<<<<<<<<
 *           '=============')
 *     print('     inquiries                            error            sample' +
 */
  __Pyx_TraceLine(306,0,__PYX_ERR(0, 306, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":308
 *     print('=================================================================' +
 *           '=============')
 *     print('     inquiries                            error            sample' +             # <<<<<<<<<<<<<<
 *           's            ')
 *     print('--------------------              ---------------------   -------' +
 */
  __Pyx_TraceLine(308,0,__PYX_ERR(0, 308, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":310
 *     print('     inquiries                            error            sample' +
 *           's            ')
 *     print('--------------------              ---------------------   -------' +             # <<<<<<<<<<<<<<
 *           '--           ')
 *     print('i         parameters       trace    absolute   relative   num   o' +
 */
  __Pyx_TraceLine(310,0,__PYX_ERR(0, 310, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":312
 *     print('--------------------              ---------------------   -------' +
 *           '--           ')
 *     print('i         parameters       trace    absolute   relative   num   o' +             # <<<<<<<<<<<<<<
 *           'ut  converged')
 *     print('=================================================================' +
 */
  __Pyx_TraceLine(312,0,__PYX_ERR(0, 312, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__70, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":314
 *     print('i         parameters       trace    absolute   relative   num   o' +
 *           'ut  converged')
 *     print('=================================================================' +             # <<<<<<<<<<<<<<
 *           '=============')
 * 
 */
  __Pyx_TraceLine(314,0,__PYX_ERR(0, 314, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":318
 * 
 *     # Print rows of results
 *     for i in range(num_inquiries):             # <<<<<<<<<<<<<<
 * 
 *         # Column "i"
 */
  __Pyx_TraceLine(318,0,__PYX_ERR(0, 318, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_v_num_inquiries); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 318, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 318, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 318, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 318, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":321
 * 
 *         # Column "i"
 *         print('%-3d  ' % (i+1), end="")             # <<<<<<<<<<<<<<
 * 
 *         # Column "parameters"
 */
    __Pyx_TraceLine(321,0,__PYX_ERR(0, 321, __pyx_L1_error))
    __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_3d, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_end, __pyx_kp_u__71) < 0) __PYX_ERR(0, 321, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":324
 * 
 *         # Column "parameters"
 *         print(' %8s  none  ' % "", end="")             # <<<<<<<<<<<<<<
 * 
 *         # Data columns, depend whether has one or multiple rows (num_inquiries)
 */
    __Pyx_TraceLine(324,0,__PYX_ERR(0, 324, __pyx_L1_error))
    __pyx_t_7 = PyUnicode_Format(__pyx_kp_u_8s_none, __pyx_kp_u__71); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_end, __pyx_kp_u__71) < 0) __PYX_ERR(0, 324, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":327
 * 
 *         # Data columns, depend whether has one or multiple rows (num_inquiries)
 *         if num_inquiries == 1:             # <<<<<<<<<<<<<<
 * 
 *             # will print one row
 */
    __Pyx_TraceLine(327,0,__PYX_ERR(0, 327, __pyx_L1_error))
    __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_num_inquiries, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 327, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_4) {

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":330
 * 
 *             # will print one row
 *             if numpy.isnan(trace) or numpy.isinf(trace):             # <<<<<<<<<<<<<<
 *                 print('%10e   ' % trace, end="")
 *             else:
 */
      __Pyx_TraceLine(330,0,__PYX_ERR(0, 330, __pyx_L1_error))
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_numpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_isnan); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_v_trace) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_trace);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 330, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (!__pyx_t_8) {
      } else {
        __pyx_t_4 = __pyx_t_8;
        goto __pyx_L9_bool_binop_done;
      }
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_isinf); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_3, __pyx_v_trace) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_trace);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 330, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_4 = __pyx_t_8;
      __pyx_L9_bool_binop_done:;
      if (__pyx_t_4) {

        /* "imate/traceinv/_hutchinson_method_utilities.pyx":331
 *             # will print one row
 *             if numpy.isnan(trace) or numpy.isinf(trace):
 *                 print('%10e   ' % trace, end="")             # <<<<<<<<<<<<<<
 *             else:
 *                 print('%+7.3e   ' % trace, end="")
 */
        __Pyx_TraceLine(331,0,__PYX_ERR(0, 331, __pyx_L1_error))
        __pyx_t_1 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_10e, __pyx_v_trace); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 331, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_end, __pyx_kp_u__71) < 0) __PYX_ERR(0, 331, __pyx_L1_error)
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_7, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 331, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "imate/traceinv/_hutchinson_method_utilities.pyx":330
 * 
 *             # will print one row
 *             if numpy.isnan(trace) or numpy.isinf(trace):             # <<<<<<<<<<<<<<
 *                 print('%10e   ' % trace, end="")
 *             else:
 */
        goto __pyx_L8;
      }

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":333
 *                 print('%10e   ' % trace, end="")
 *             else:
 *                 print('%+7.3e   ' % trace, end="")             # <<<<<<<<<<<<<<
 *             if numpy.isnan(absolute_error) or numpy.isinf(absolute_error):
 *                 print('%9e  ' % absolute_error, end="")
 */
      __Pyx_TraceLine(333,0,__PYX_ERR(0, 333, __pyx_L1_error))
      /*else*/ {
        __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_7_3e, __pyx_v_trace); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 333, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 333, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_end, __pyx_kp_u__71) < 0) __PYX_ERR(0, 333, __pyx_L1_error)
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 333, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __pyx_L8:;

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":334
 *             else:
 *                 print('%+7.3e   ' % trace, end="")
 *             if numpy.isnan(absolute_error) or numpy.isinf(absolute_error):             # <<<<<<<<<<<<<<
 *                 print('%9e  ' % absolute_error, end="")
 *             else:
 */
      __Pyx_TraceLine(334,0,__PYX_ERR(0, 334, __pyx_L1_error))
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 334, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_isnan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 334, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_7 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_v_absolute_error) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_absolute_error);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 334, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 334, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (!__pyx_t_8) {
      } else {
        __pyx_t_4 = __pyx_t_8;
        goto __pyx_L12_bool_binop_done;
      }
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 334, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_isinf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 334, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_7 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_1, __pyx_v_absolute_error) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_absolute_error);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 334, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 334, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_4 = __pyx_t_8;
      __pyx_L12_bool_binop_done:;
      if (__pyx_t_4) {

        /* "imate/traceinv/_hutchinson_method_utilities.pyx":335
 *                 print('%+7.3e   ' % trace, end="")
 *             if numpy.isnan(absolute_error) or numpy.isinf(absolute_error):
 *                 print('%9e  ' % absolute_error, end="")             # <<<<<<<<<<<<<<
 *             else:
 *                 print('%7.3e  ' % absolute_error, end="")
 */
        __Pyx_TraceLine(335,0,__PYX_ERR(0, 335, __pyx_L1_error))
        __pyx_t_7 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_9e, __pyx_v_absolute_error); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 335, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 335, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 335, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_end, __pyx_kp_u__71) < 0) __PYX_ERR(0, 335, __pyx_L1_error)
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "imate/traceinv/_hutchinson_method_utilities.pyx":334
 *             else:
 *                 print('%+7.3e   ' % trace, end="")
 *             if numpy.isnan(absolute_error) or numpy.isinf(absolute_error):             # <<<<<<<<<<<<<<
 *                 print('%9e  ' % absolute_error, end="")
 *             else:
 */
        goto __pyx_L11;
      }

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":337
 *                 print('%9e  ' % absolute_error, end="")
 *             else:
 *                 print('%7.3e  ' % absolute_error, end="")             # <<<<<<<<<<<<<<
 *             if numpy.isnan(relative_error) or numpy.isinf(relative_error):
 *                 print('%9f  ' % relative_error, end="")
 */
      __Pyx_TraceLine(337,0,__PYX_ERR(0, 337, __pyx_L1_error))
      /*else*/ {
        __pyx_t_1 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_7_3e_2, __pyx_v_absolute_error); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 337, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 337, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 337, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_end, __pyx_kp_u__71) < 0) __PYX_ERR(0, 337, __pyx_L1_error)
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_7, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 337, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_L11:;

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":338
 *             else:
 *                 print('%7.3e  ' % absolute_error, end="")
 *             if numpy.isnan(relative_error) or numpy.isinf(relative_error):             # <<<<<<<<<<<<<<
 *                 print('%9f  ' % relative_error, end="")
 *             else:
 */
      __Pyx_TraceLine(338,0,__PYX_ERR(0, 338, __pyx_L1_error))
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_isnan); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_1, __pyx_v_relative_error) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_relative_error);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 338, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!__pyx_t_8) {
      } else {
        __pyx_t_4 = __pyx_t_8;
        goto __pyx_L15_bool_binop_done;
      }
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_numpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_isinf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_7, __pyx_v_relative_error) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_relative_error);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 338, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_4 = __pyx_t_8;
      __pyx_L15_bool_binop_done:;
      if (__pyx_t_4) {

        /* "imate/traceinv/_hutchinson_method_utilities.pyx":339
 *                 print('%7.3e  ' % absolute_error, end="")
 *             if numpy.isnan(relative_error) or numpy.isinf(relative_error):
 *                 print('%9f  ' % relative_error, end="")             # <<<<<<<<<<<<<<
 *             else:
 *                 print('%8.3f%%  ' % relative_error, end="")
 */
        __Pyx_TraceLine(339,0,__PYX_ERR(0, 339, __pyx_L1_error))
        __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_9f, __pyx_v_relative_error); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 339, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 339, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_end, __pyx_kp_u__71) < 0) __PYX_ERR(0, 339, __pyx_L1_error)
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 339, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "imate/traceinv/_hutchinson_method_utilities.pyx":338
 *             else:
 *                 print('%7.3e  ' % absolute_error, end="")
 *             if numpy.isnan(relative_error) or numpy.isinf(relative_error):             # <<<<<<<<<<<<<<
 *                 print('%9f  ' % relative_error, end="")
 *             else:
 */
        goto __pyx_L14;
      }

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":341
 *                 print('%9f  ' % relative_error, end="")
 *             else:
 *                 print('%8.3f%%  ' % relative_error, end="")             # <<<<<<<<<<<<<<
 *             print('%4d  %4d' % (num_samples_used, num_outliers), end="")
 *             print('%11s' % converged)
 */
      __Pyx_TraceLine(341,0,__PYX_ERR(0, 341, __pyx_L1_error))
      /*else*/ {
        __pyx_t_7 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_8_3f, __pyx_v_relative_error); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 341, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 341, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 341, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_end, __pyx_kp_u__71) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_L14:;

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":342
 *             else:
 *                 print('%8.3f%%  ' % relative_error, end="")
 *             print('%4d  %4d' % (num_samples_used, num_outliers), end="")             # <<<<<<<<<<<<<<
 *             print('%11s' % converged)
 * 
 */
      __Pyx_TraceLine(342,0,__PYX_ERR(0, 342, __pyx_L1_error))
      __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 342, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = 0;
      __pyx_t_10 = 127;
      __pyx_t_7 = __Pyx_PyObject_FormatAndDecref(__Pyx_PyNumber_IntOrLong(__pyx_v_num_samples_used), __pyx_kp_u_4d); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 342, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_10;
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_INCREF(__pyx_kp_u__72);
      __pyx_t_9 += 2;
      __Pyx_GIVEREF(__pyx_kp_u__72);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u__72);
      __pyx_t_7 = __Pyx_PyObject_FormatAndDecref(__Pyx_PyNumber_IntOrLong(__pyx_v_num_outliers), __pyx_kp_u_4d); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 342, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_10;
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 342, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 342, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 342, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_end, __pyx_kp_u__71) < 0) __PYX_ERR(0, 342, __pyx_L1_error)
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 342, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":343
 *                 print('%8.3f%%  ' % relative_error, end="")
 *             print('%4d  %4d' % (num_samples_used, num_outliers), end="")
 *             print('%11s' % converged)             # <<<<<<<<<<<<<<
 * 
 *         else:
 */
      __Pyx_TraceLine(343,0,__PYX_ERR(0, 343, __pyx_L1_error))
      __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_11s, __pyx_v_converged); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 343, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 343, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":327
 * 
 *         # Data columns, depend whether has one or multiple rows (num_inquiries)
 *         if num_inquiries == 1:             # <<<<<<<<<<<<<<
 * 
 *             # will print one row
 */
      goto __pyx_L7;
    }

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":348
 * 
 *             # will print multiple rows
 *             if numpy.isnan(trace[i]) or numpy.isinf(trace[i]):             # <<<<<<<<<<<<<<
 *                 print('%10e  ' % trace[i], end="")
 *             else:
 */
    __Pyx_TraceLine(348,0,__PYX_ERR(0, 348, __pyx_L1_error))
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_isnan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_trace, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_7 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_11, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 348, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (!__pyx_t_8) {
      } else {
        __pyx_t_4 = __pyx_t_8;
        goto __pyx_L18_bool_binop_done;
      }
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_isinf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_trace, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_7 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_11, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 348, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 348, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_4 = __pyx_t_8;
      __pyx_L18_bool_binop_done:;
      if (__pyx_t_4) {

        /* "imate/traceinv/_hutchinson_method_utilities.pyx":349
 *             # will print multiple rows
 *             if numpy.isnan(trace[i]) or numpy.isinf(trace[i]):
 *                 print('%10e  ' % trace[i], end="")             # <<<<<<<<<<<<<<
 *             else:
 *                 print('%+7.3e   ' % trace[i], end="")
 */
        __Pyx_TraceLine(349,0,__PYX_ERR(0, 349, __pyx_L1_error))
        __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_trace, __pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 349, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_10e_2, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 349, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 349, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 349, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_end, __pyx_kp_u__71) < 0) __PYX_ERR(0, 349, __pyx_L1_error)
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 349, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "imate/traceinv/_hutchinson_method_utilities.pyx":348
 * 
 *             # will print multiple rows
 *             if numpy.isnan(trace[i]) or numpy.isinf(trace[i]):             # <<<<<<<<<<<<<<
 *                 print('%10e  ' % trace[i], end="")
 *             else:
 */
        goto __pyx_L17;
      }

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":351
 *                 print('%10e  ' % trace[i], end="")
 *             else:
 *                 print('%+7.3e   ' % trace[i], end="")             # <<<<<<<<<<<<<<
 *             if numpy.isnan(absolute_error[i]) or \
 *                numpy.isinf(absolute_error[i]):
 */
      __Pyx_TraceLine(351,0,__PYX_ERR(0, 351, __pyx_L1_error))
      /*else*/ {
        __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_trace, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_7_3e, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 351, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 351, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_end, __pyx_kp_u__71) < 0) __PYX_ERR(0, 351, __pyx_L1_error)
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 351, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __pyx_L17:;

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":352
 *             else:
 *                 print('%+7.3e   ' % trace[i], end="")
 *             if numpy.isnan(absolute_error[i]) or \             # <<<<<<<<<<<<<<
 *                numpy.isinf(absolute_error[i]):
 *                 print('%9e  ' % absolute_error[i], end="")
 */
      __Pyx_TraceLine(352,0,__PYX_ERR(0, 352, __pyx_L1_error))
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_isnan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_absolute_error, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_7 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_11, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 352, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (!__pyx_t_8) {
      } else {
        __pyx_t_4 = __pyx_t_8;
        goto __pyx_L21_bool_binop_done;
      }

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":353
 *                 print('%+7.3e   ' % trace[i], end="")
 *             if numpy.isnan(absolute_error[i]) or \
 *                numpy.isinf(absolute_error[i]):             # <<<<<<<<<<<<<<
 *                 print('%9e  ' % absolute_error[i], end="")
 *             else:
 */
      __Pyx_TraceLine(353,0,__PYX_ERR(0, 353, __pyx_L1_error))
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_isinf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 353, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_absolute_error, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_7 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_11, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 353, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 353, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_4 = __pyx_t_8;
      __pyx_L21_bool_binop_done:;

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":352
 *             else:
 *                 print('%+7.3e   ' % trace[i], end="")
 *             if numpy.isnan(absolute_error[i]) or \             # <<<<<<<<<<<<<<
 *                numpy.isinf(absolute_error[i]):
 *                 print('%9e  ' % absolute_error[i], end="")
 */
      __Pyx_TraceLine(352,0,__PYX_ERR(0, 352, __pyx_L1_error))
      if (__pyx_t_4) {

        /* "imate/traceinv/_hutchinson_method_utilities.pyx":354
 *             if numpy.isnan(absolute_error[i]) or \
 *                numpy.isinf(absolute_error[i]):
 *                 print('%9e  ' % absolute_error[i], end="")             # <<<<<<<<<<<<<<
 *             else:
 *                 print('%7.3e  ' % absolute_error[i], end="")
 */
        __Pyx_TraceLine(354,0,__PYX_ERR(0, 354, __pyx_L1_error))
        __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_absolute_error, __pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 354, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_9e, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 354, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 354, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 354, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_end, __pyx_kp_u__71) < 0) __PYX_ERR(0, 354, __pyx_L1_error)
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "imate/traceinv/_hutchinson_method_utilities.pyx":352
 *             else:
 *                 print('%+7.3e   ' % trace[i], end="")
 *             if numpy.isnan(absolute_error[i]) or \             # <<<<<<<<<<<<<<
 *                numpy.isinf(absolute_error[i]):
 *                 print('%9e  ' % absolute_error[i], end="")
 */
        goto __pyx_L20;
      }

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":356
 *                 print('%9e  ' % absolute_error[i], end="")
 *             else:
 *                 print('%7.3e  ' % absolute_error[i], end="")             # <<<<<<<<<<<<<<
 *             if numpy.isnan(relative_error[i]) or \
 *                numpy.isinf(relative_error[i]):
 */
      __Pyx_TraceLine(356,0,__PYX_ERR(0, 356, __pyx_L1_error))
      /*else*/ {
        __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_absolute_error, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_7_3e_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 356, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 356, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_end, __pyx_kp_u__71) < 0) __PYX_ERR(0, 356, __pyx_L1_error)
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 356, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __pyx_L20:;

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":357
 *             else:
 *                 print('%7.3e  ' % absolute_error[i], end="")
 *             if numpy.isnan(relative_error[i]) or \             # <<<<<<<<<<<<<<
 *                numpy.isinf(relative_error[i]):
 *                 print('%9f  ' % relative_error[i], end="")
 */
      __Pyx_TraceLine(357,0,__PYX_ERR(0, 357, __pyx_L1_error))
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 357, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_isnan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_relative_error, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 357, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_7 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_11, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 357, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 357, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (!__pyx_t_8) {
      } else {
        __pyx_t_4 = __pyx_t_8;
        goto __pyx_L24_bool_binop_done;
      }

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":358
 *                 print('%7.3e  ' % absolute_error[i], end="")
 *             if numpy.isnan(relative_error[i]) or \
 *                numpy.isinf(relative_error[i]):             # <<<<<<<<<<<<<<
 *                 print('%9f  ' % relative_error[i], end="")
 *             else:
 */
      __Pyx_TraceLine(358,0,__PYX_ERR(0, 358, __pyx_L1_error))
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_isinf); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 358, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_relative_error, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      __pyx_t_7 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_11, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 358, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 358, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_4 = __pyx_t_8;
      __pyx_L24_bool_binop_done:;

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":357
 *             else:
 *                 print('%7.3e  ' % absolute_error[i], end="")
 *             if numpy.isnan(relative_error[i]) or \             # <<<<<<<<<<<<<<
 *                numpy.isinf(relative_error[i]):
 *                 print('%9f  ' % relative_error[i], end="")
 */
      __Pyx_TraceLine(357,0,__PYX_ERR(0, 357, __pyx_L1_error))
      if (__pyx_t_4) {

        /* "imate/traceinv/_hutchinson_method_utilities.pyx":359
 *             if numpy.isnan(relative_error[i]) or \
 *                numpy.isinf(relative_error[i]):
 *                 print('%9f  ' % relative_error[i], end="")             # <<<<<<<<<<<<<<
 *             else:
 *                 print('%8.3f%%  ' % relative_error[i], end="")
 */
        __Pyx_TraceLine(359,0,__PYX_ERR(0, 359, __pyx_L1_error))
        __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_v_relative_error, __pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 359, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_9f, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 359, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 359, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 359, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_end, __pyx_kp_u__71) < 0) __PYX_ERR(0, 359, __pyx_L1_error)
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "imate/traceinv/_hutchinson_method_utilities.pyx":357
 *             else:
 *                 print('%7.3e  ' % absolute_error[i], end="")
 *             if numpy.isnan(relative_error[i]) or \             # <<<<<<<<<<<<<<
 *                numpy.isinf(relative_error[i]):
 *                 print('%9f  ' % relative_error[i], end="")
 */
        goto __pyx_L23;
      }

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":361
 *                 print('%9f  ' % relative_error[i], end="")
 *             else:
 *                 print('%8.3f%%  ' % relative_error[i], end="")             # <<<<<<<<<<<<<<
 *             print('%4d  %4d' % (num_samples_used[i], num_outliers[i]), end="")
 *             print('%11s' % converged[i])
 */
      __Pyx_TraceLine(361,0,__PYX_ERR(0, 361, __pyx_L1_error))
      /*else*/ {
        __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_relative_error, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_8_3f, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_end, __pyx_kp_u__71) < 0) __PYX_ERR(0, 361, __pyx_L1_error)
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __pyx_L23:;

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":362
 *             else:
 *                 print('%8.3f%%  ' % relative_error[i], end="")
 *             print('%4d  %4d' % (num_samples_used[i], num_outliers[i]), end="")             # <<<<<<<<<<<<<<
 *             print('%11s' % converged[i])
 * 
 */
      __Pyx_TraceLine(362,0,__PYX_ERR(0, 362, __pyx_L1_error))
      __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 362, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = 0;
      __pyx_t_10 = 127;
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_num_samples_used, __pyx_v_i); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 362, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_FormatAndDecref(__Pyx_PyNumber_IntOrLong(__pyx_t_3), __pyx_kp_u_4d); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_10;
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_INCREF(__pyx_kp_u__72);
      __pyx_t_9 += 2;
      __Pyx_GIVEREF(__pyx_kp_u__72);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_kp_u__72);
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_num_outliers, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_FormatAndDecref(__Pyx_PyNumber_IntOrLong(__pyx_t_1), __pyx_kp_u_4d); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 362, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_10;
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_7, 3, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 362, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 362, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 362, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_end, __pyx_kp_u__71) < 0) __PYX_ERR(0, 362, __pyx_L1_error)
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "imate/traceinv/_hutchinson_method_utilities.pyx":363
 *                 print('%8.3f%%  ' % relative_error[i], end="")
 *             print('%4d  %4d' % (num_samples_used[i], num_outliers[i]), end="")
 *             print('%11s' % converged[i])             # <<<<<<<<<<<<<<
 * 
 *     print('')
 */
      __Pyx_TraceLine(363,0,__PYX_ERR(0, 363, __pyx_L1_error))
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_converged, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 363, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_11s, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 363, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 363, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L7:;

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":318
 * 
 *     # Print rows of results
 *     for i in range(num_inquiries):             # <<<<<<<<<<<<<<
 * 
 *         # Column "i"
 */
    __Pyx_TraceLine(318,0,__PYX_ERR(0, 318, __pyx_L1_error))
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":365
 *             print('%11s' % converged[i])
 * 
 *     print('')             # <<<<<<<<<<<<<<
 * 
 *     # Print user configurations
 */
  __Pyx_TraceLine(365,0,__PYX_ERR(0, 365, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__73, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":368
 * 
 *     # Print user configurations
 *     print('                                    config                       ' +             # <<<<<<<<<<<<<<
 *           '             ')
 *     print('=================================================================' +
 */
  __Pyx_TraceLine(368,0,__PYX_ERR(0, 368, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__74, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":370
 *     print('                                    config                       ' +
 *           '             ')
 *     print('=================================================================' +             # <<<<<<<<<<<<<<
 *           '=============')
 * 
 */
  __Pyx_TraceLine(370,0,__PYX_ERR(0, 370, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":374
 * 
 *     # Prints matrx and stochastic process
 *     print('                matrix                            ' +             # <<<<<<<<<<<<<<
 *           'stochastic estimator        ')
 *     print('-------------------------------------    ------------------------' +
 */
  __Pyx_TraceLine(374,0,__PYX_ERR(0, 374, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__75, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":376
 *     print('                matrix                            ' +
 *           'stochastic estimator        ')
 *     print('-------------------------------------    ------------------------' +             # <<<<<<<<<<<<<<
 *           '-------------')
 *     print('gram:                           %5s' % gram, end="    ")
 */
  __Pyx_TraceLine(376,0,__PYX_ERR(0, 376, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__77, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":378
 *     print('-------------------------------------    ------------------------' +
 *           '-------------')
 *     print('gram:                           %5s' % gram, end="    ")             # <<<<<<<<<<<<<<
 *     print('method:                    hutchinson')
 *     print('assumption:        %18s' % assume_matrix, end="    ")
 */
  __Pyx_TraceLine(378,0,__PYX_ERR(0, 378, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_gram_5s, __pyx_v_gram); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_end, __pyx_kp_u__78) < 0) __PYX_ERR(0, 378, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":379
 *           '-------------')
 *     print('gram:                           %5s' % gram, end="    ")
 *     print('method:                    hutchinson')             # <<<<<<<<<<<<<<
 *     print('assumption:        %18s' % assume_matrix, end="    ")
 *     print('solver tol:                 %8.3e' % solver_tol)
 */
  __Pyx_TraceLine(379,0,__PYX_ERR(0, 379, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__79, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":380
 *     print('gram:                           %5s' % gram, end="    ")
 *     print('method:                    hutchinson')
 *     print('assumption:        %18s' % assume_matrix, end="    ")             # <<<<<<<<<<<<<<
 *     print('solver tol:                 %8.3e' % solver_tol)
 *     if int(exponent) == exponent:
 */
  __Pyx_TraceLine(380,0,__PYX_ERR(0, 380, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_assumption_18s, __pyx_v_assume_matrix); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_end, __pyx_kp_u__78) < 0) __PYX_ERR(0, 380, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":381
 *     print('method:                    hutchinson')
 *     print('assumption:        %18s' % assume_matrix, end="    ")
 *     print('solver tol:                 %8.3e' % solver_tol)             # <<<<<<<<<<<<<<
 *     if int(exponent) == exponent:
 *         print('exponent:                         %3d' % int(exponent),
 */
  __Pyx_TraceLine(381,0,__PYX_ERR(0, 381, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_solver_tol_8_3e, __pyx_v_solver_tol); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":382
 *     print('assumption:        %18s' % assume_matrix, end="    ")
 *     print('solver tol:                 %8.3e' % solver_tol)
 *     if int(exponent) == exponent:             # <<<<<<<<<<<<<<
 *         print('exponent:                         %3d' % int(exponent),
 *               end="    ")
 */
  __Pyx_TraceLine(382,0,__PYX_ERR(0, 382, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyNumber_Int(__pyx_v_exponent); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_v_exponent, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":383
 *     print('solver tol:                 %8.3e' % solver_tol)
 *     if int(exponent) == exponent:
 *         print('exponent:                         %3d' % int(exponent),             # <<<<<<<<<<<<<<
 *               end="    ")
 *     else:
 */
    __Pyx_TraceLine(383,0,__PYX_ERR(0, 383, __pyx_L1_error))
    __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_v_exponent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_exponent_3d, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":384
 *     if int(exponent) == exponent:
 *         print('exponent:                         %3d' % int(exponent),
 *               end="    ")             # <<<<<<<<<<<<<<
 *     else:
 *         print('exponent:                      %6.2f' % exponent, end="    ")
 */
    __Pyx_TraceLine(384,0,__PYX_ERR(0, 384, __pyx_L1_error))
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 384, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_end, __pyx_kp_u__78) < 0) __PYX_ERR(0, 384, __pyx_L1_error)

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":383
 *     print('solver tol:                 %8.3e' % solver_tol)
 *     if int(exponent) == exponent:
 *         print('exponent:                         %3d' % int(exponent),             # <<<<<<<<<<<<<<
 *               end="    ")
 *     else:
 */
    __Pyx_TraceLine(383,0,__PYX_ERR(0, 383, __pyx_L1_error))
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "imate/traceinv/_hutchinson_method_utilities.pyx":382
 *     print('assumption:        %18s' % assume_matrix, end="    ")
 *     print('solver tol:                 %8.3e' % solver_tol)
 *     if int(exponent) == exponent:             # <<<<<<<<<<<<<<
 *         print('exponent:                         %3d' % int(exponent),
 *               end="    ")
 */
    goto __pyx_L26;
  }

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":386
 *               end="    ")
 *     else:
 *         print('exponent:                      %6.2f' % exponent, end="    ")             # <<<<<<<<<<<<<<
 *     print('orthogonalization:               %4s' % orthogonalize)
 *     print('data type:                   %8s' % data_type_, end="    ")
 */
  __Pyx_TraceLine(386,0,__PYX_ERR(0, 386, __pyx_L1_error))
  /*else*/ {
    __pyx_t_2 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_exponent_6_2f, __pyx_v_exponent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_end, __pyx_kp_u__78) < 0) __PYX_ERR(0, 386, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L26:;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":387
 *     else:
 *         print('exponent:                      %6.2f' % exponent, end="    ")
 *     print('orthogonalization:               %4s' % orthogonalize)             # <<<<<<<<<<<<<<
 *     print('data type:                   %8s' % data_type_, end="    ")
 *     print('                                     ')
 */
  __Pyx_TraceLine(387,0,__PYX_ERR(0, 387, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_orthogonalization_4s, __pyx_v_orthogonalize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":388
 *         print('exponent:                      %6.2f' % exponent, end="    ")
 *     print('orthogonalization:               %4s' % orthogonalize)
 *     print('data type:                   %8s' % data_type_, end="    ")             # <<<<<<<<<<<<<<
 *     print('                                     ')
 *     print('')
 */
  __Pyx_TraceLine(388,0,__PYX_ERR(0, 388, __pyx_L1_error))
  __pyx_t_2 = PyUnicode_Format(__pyx_kp_u_data_type_8s, __pyx_v_data_type_); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_end, __pyx_kp_u__78) < 0) __PYX_ERR(0, 388, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":389
 *     print('orthogonalization:               %4s' % orthogonalize)
 *     print('data type:                   %8s' % data_type_, end="    ")
 *     print('                                     ')             # <<<<<<<<<<<<<<
 *     print('')
 * 
 */
  __Pyx_TraceLine(389,0,__PYX_ERR(0, 389, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__81, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":390
 *     print('data type:                   %8s' % data_type_, end="    ")
 *     print('                                     ')
 *     print('')             # <<<<<<<<<<<<<<
 * 
 *     # Prints convergence and error
 */
  __Pyx_TraceLine(390,0,__PYX_ERR(0, 390, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__73, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":393
 * 
 *     # Prints convergence and error
 *     print('             convergence                                 ' +             # <<<<<<<<<<<<<<
 *           'error     ')
 *     print('-------------------------------------    ------------------------' +
 */
  __Pyx_TraceLine(393,0,__PYX_ERR(0, 393, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__82, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":395
 *     print('             convergence                                 ' +
 *           'error     ')
 *     print('-------------------------------------    ------------------------' +             # <<<<<<<<<<<<<<
 *           '-------------')
 *     print('min num samples:                %5d' % min_num_samples, end="    ")
 */
  __Pyx_TraceLine(395,0,__PYX_ERR(0, 395, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__77, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":397
 *     print('-------------------------------------    ------------------------' +
 *           '-------------')
 *     print('min num samples:                %5d' % min_num_samples, end="    ")             # <<<<<<<<<<<<<<
 *     print('abs error tol:              %8.3e' % error_atol)
 *     print('max num samples:                %5d' % max_num_samples, end="    ")
 */
  __Pyx_TraceLine(397,0,__PYX_ERR(0, 397, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_min_num_samples_5d, __pyx_v_min_num_samples); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_end, __pyx_kp_u__78) < 0) __PYX_ERR(0, 397, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":398
 *           '-------------')
 *     print('min num samples:                %5d' % min_num_samples, end="    ")
 *     print('abs error tol:              %8.3e' % error_atol)             # <<<<<<<<<<<<<<
 *     print('max num samples:                %5d' % max_num_samples, end="    ")
 *     print('rel error tol:                  %4.2f%%' % error_rtol)
 */
  __Pyx_TraceLine(398,0,__PYX_ERR(0, 398, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_abs_error_tol_8_3e, __pyx_v_error_atol); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":399
 *     print('min num samples:                %5d' % min_num_samples, end="    ")
 *     print('abs error tol:              %8.3e' % error_atol)
 *     print('max num samples:                %5d' % max_num_samples, end="    ")             # <<<<<<<<<<<<<<
 *     print('rel error tol:                  %4.2f%%' % error_rtol)
 *     print('outlier significance level:     %4.2f%%'
 */
  __Pyx_TraceLine(399,0,__PYX_ERR(0, 399, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_max_num_samples_5d, __pyx_v_max_num_samples); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_end, __pyx_kp_u__78) < 0) __PYX_ERR(0, 399, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":400
 *     print('abs error tol:              %8.3e' % error_atol)
 *     print('max num samples:                %5d' % max_num_samples, end="    ")
 *     print('rel error tol:                  %4.2f%%' % error_rtol)             # <<<<<<<<<<<<<<
 *     print('outlier significance level:     %4.2f%%'
 *           % outlier_significance_level, end="    ")
 */
  __Pyx_TraceLine(400,0,__PYX_ERR(0, 400, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_rel_error_tol_4_2f, __pyx_v_error_rtol); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":402
 *     print('rel error tol:                  %4.2f%%' % error_rtol)
 *     print('outlier significance level:     %4.2f%%'
 *           % outlier_significance_level, end="    ")             # <<<<<<<<<<<<<<
 *     print('confidence level:              %4.2f%%' % confidence_level)
 *     print('')
 */
  __Pyx_TraceLine(402,0,__PYX_ERR(0, 402, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_outlier_significance_level_4_2f, __pyx_v_outlier_significance_level); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":401
 *     print('max num samples:                %5d' % max_num_samples, end="    ")
 *     print('rel error tol:                  %4.2f%%' % error_rtol)
 *     print('outlier significance level:     %4.2f%%'             # <<<<<<<<<<<<<<
 *           % outlier_significance_level, end="    ")
 *     print('confidence level:              %4.2f%%' % confidence_level)
 */
  __Pyx_TraceLine(401,0,__PYX_ERR(0, 401, __pyx_L1_error))
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":402
 *     print('rel error tol:                  %4.2f%%' % error_rtol)
 *     print('outlier significance level:     %4.2f%%'
 *           % outlier_significance_level, end="    ")             # <<<<<<<<<<<<<<
 *     print('confidence level:              %4.2f%%' % confidence_level)
 *     print('')
 */
  __Pyx_TraceLine(402,0,__PYX_ERR(0, 402, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_end, __pyx_kp_u__78) < 0) __PYX_ERR(0, 402, __pyx_L1_error)

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":401
 *     print('max num samples:                %5d' % max_num_samples, end="    ")
 *     print('rel error tol:                  %4.2f%%' % error_rtol)
 *     print('outlier significance level:     %4.2f%%'             # <<<<<<<<<<<<<<
 *           % outlier_significance_level, end="    ")
 *     print('confidence level:              %4.2f%%' % confidence_level)
 */
  __Pyx_TraceLine(401,0,__PYX_ERR(0, 401, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":403
 *     print('outlier significance level:     %4.2f%%'
 *           % outlier_significance_level, end="    ")
 *     print('confidence level:              %4.2f%%' % confidence_level)             # <<<<<<<<<<<<<<
 *     print('')
 * 
 */
  __Pyx_TraceLine(403,0,__PYX_ERR(0, 403, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_confidence_level_4_2f, __pyx_v_confidence_level); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":404
 *           % outlier_significance_level, end="    ")
 *     print('confidence level:              %4.2f%%' % confidence_level)
 *     print('')             # <<<<<<<<<<<<<<
 * 
 *     # Print information about CPU and GPU
 */
  __Pyx_TraceLine(404,0,__PYX_ERR(0, 404, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__73, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":407
 * 
 *     # Print information about CPU and GPU
 *     print('                                   process                       ' +             # <<<<<<<<<<<<<<
 *           '             ')
 *     print('=================================================================' +
 */
  __Pyx_TraceLine(407,0,__PYX_ERR(0, 407, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__83, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":409
 *     print('                                   process                       ' +
 *           '             ')
 *     print('=================================================================' +             # <<<<<<<<<<<<<<
 *           '=============')
 *     print('                 time                                   device   ' +
 */
  __Pyx_TraceLine(409,0,__PYX_ERR(0, 409, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":411
 *     print('=================================================================' +
 *           '=============')
 *     print('                 time                                   device   ' +             # <<<<<<<<<<<<<<
 *           '               ')
 *     print('-------------------------------------    ------------------------' +
 */
  __Pyx_TraceLine(411,0,__PYX_ERR(0, 411, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__84, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":413
 *     print('                 time                                   device   ' +
 *           '               ')
 *     print('-------------------------------------    ------------------------' +             # <<<<<<<<<<<<<<
 *           '-------------')
 *     print('tot wall time (sec):        %8.3e' % tot_wall_time, end="    ")
 */
  __Pyx_TraceLine(413,0,__PYX_ERR(0, 413, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__77, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":415
 *     print('-------------------------------------    ------------------------' +
 *           '-------------')
 *     print('tot wall time (sec):        %8.3e' % tot_wall_time, end="    ")             # <<<<<<<<<<<<<<
 *     print('num cpu threads:                  %3d' % num_cpu_threads)
 *     print('alg wall time (sec):        %8.3e' % alg_wall_time, end="    ")
 */
  __Pyx_TraceLine(415,0,__PYX_ERR(0, 415, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_tot_wall_time_sec_8_3e, __pyx_v_tot_wall_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_end, __pyx_kp_u__78) < 0) __PYX_ERR(0, 415, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":416
 *           '-------------')
 *     print('tot wall time (sec):        %8.3e' % tot_wall_time, end="    ")
 *     print('num cpu threads:                  %3d' % num_cpu_threads)             # <<<<<<<<<<<<<<
 *     print('alg wall time (sec):        %8.3e' % alg_wall_time, end="    ")
 *     print('num gpu devices, multiproc:    %2d, %2d'
 */
  __Pyx_TraceLine(416,0,__PYX_ERR(0, 416, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_num_cpu_threads_3d, __pyx_v_num_cpu_threads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":417
 *     print('tot wall time (sec):        %8.3e' % tot_wall_time, end="    ")
 *     print('num cpu threads:                  %3d' % num_cpu_threads)
 *     print('alg wall time (sec):        %8.3e' % alg_wall_time, end="    ")             # <<<<<<<<<<<<<<
 *     print('num gpu devices, multiproc:    %2d, %2d'
 *           % (num_gpu_devices, num_gpu_multiprocessors))
 */
  __Pyx_TraceLine(417,0,__PYX_ERR(0, 417, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_alg_wall_time_sec_8_3e, __pyx_v_alg_wall_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_end, __pyx_kp_u__78) < 0) __PYX_ERR(0, 417, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":418
 *     print('num cpu threads:                  %3d' % num_cpu_threads)
 *     print('alg wall time (sec):        %8.3e' % alg_wall_time, end="    ")
 *     print('num gpu devices, multiproc:    %2d, %2d'             # <<<<<<<<<<<<<<
 *           % (num_gpu_devices, num_gpu_multiprocessors))
 *     print('cpu proc time (sec):        %8.3e' % cpu_proc_time, end="    ")
 */
  __Pyx_TraceLine(418,0,__PYX_ERR(0, 418, __pyx_L1_error))
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = 0;
  __pyx_t_10 = 127;
  __Pyx_INCREF(__pyx_kp_u_num_gpu_devices_multiproc);
  __pyx_t_5 += 31;
  __Pyx_GIVEREF(__pyx_kp_u_num_gpu_devices_multiproc);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_num_gpu_devices_multiproc);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":419
 *     print('alg wall time (sec):        %8.3e' % alg_wall_time, end="    ")
 *     print('num gpu devices, multiproc:    %2d, %2d'
 *           % (num_gpu_devices, num_gpu_multiprocessors))             # <<<<<<<<<<<<<<
 *     print('cpu proc time (sec):        %8.3e' % cpu_proc_time, end="    ")
 *     print('num gpu threads per multiproc:   %4d'
 */
  __Pyx_TraceLine(419,0,__PYX_ERR(0, 419, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyObject_FormatAndDecref(__Pyx_PyNumber_IntOrLong(__pyx_v_num_gpu_devices), __pyx_kp_u_2d); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_10;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_kp_u__85);
  __pyx_t_5 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__85);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__85);
  __pyx_t_3 = __Pyx_PyObject_FormatAndDecref(__Pyx_PyNumber_IntOrLong(__pyx_v_num_gpu_multiprocessors), __pyx_kp_u_2d); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_10;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":418
 *     print('num cpu threads:                  %3d' % num_cpu_threads)
 *     print('alg wall time (sec):        %8.3e' % alg_wall_time, end="    ")
 *     print('num gpu devices, multiproc:    %2d, %2d'             # <<<<<<<<<<<<<<
 *           % (num_gpu_devices, num_gpu_multiprocessors))
 *     print('cpu proc time (sec):        %8.3e' % cpu_proc_time, end="    ")
 */
  __Pyx_TraceLine(418,0,__PYX_ERR(0, 418, __pyx_L1_error))
  __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_5, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":420
 *     print('num gpu devices, multiproc:    %2d, %2d'
 *           % (num_gpu_devices, num_gpu_multiprocessors))
 *     print('cpu proc time (sec):        %8.3e' % cpu_proc_time, end="    ")             # <<<<<<<<<<<<<<
 *     print('num gpu threads per multiproc:   %4d'
 *           % num_gpu_threads_per_multiprocessor)
 */
  __Pyx_TraceLine(420,0,__PYX_ERR(0, 420, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_cpu_proc_time_sec_8_3e, __pyx_v_cpu_proc_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_end, __pyx_kp_u__78) < 0) __PYX_ERR(0, 420, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":422
 *     print('cpu proc time (sec):        %8.3e' % cpu_proc_time, end="    ")
 *     print('num gpu threads per multiproc:   %4d'
 *           % num_gpu_threads_per_multiprocessor)             # <<<<<<<<<<<<<<
 *     print('')
 */
  __Pyx_TraceLine(422,0,__PYX_ERR(0, 422, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_num_gpu_threads_per_multiproc_4d, __pyx_v_num_gpu_threads_per_multiprocessor); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":421
 *           % (num_gpu_devices, num_gpu_multiprocessors))
 *     print('cpu proc time (sec):        %8.3e' % cpu_proc_time, end="    ")
 *     print('num gpu threads per multiproc:   %4d'             # <<<<<<<<<<<<<<
 *           % num_gpu_threads_per_multiprocessor)
 *     print('')
 */
  __Pyx_TraceLine(421,0,__PYX_ERR(0, 421, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":423
 *     print('num gpu threads per multiproc:   %4d'
 *           % num_gpu_threads_per_multiprocessor)
 *     print('')             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(423,0,__PYX_ERR(0, 423, __pyx_L1_error))
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__73, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":242
 * # =============
 * 
 * def print_summary(info):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("imate.traceinv._hutchinson_method_utilities.print_summary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data_type);
  __Pyx_XDECREF(__pyx_v_gram);
  __Pyx_XDECREF(__pyx_v_exponent);
  __Pyx_XDECREF(__pyx_v_assume_matrix);
  __Pyx_XDECREF(__pyx_v_num_inquiries);
  __Pyx_XDECREF(__pyx_v_absolute_error);
  __Pyx_XDECREF(__pyx_v_relative_error);
  __Pyx_XDECREF(__pyx_v_error_atol);
  __Pyx_XDECREF(__pyx_v_error_rtol);
  __Pyx_XDECREF(__pyx_v_confidence_level);
  __Pyx_XDECREF(__pyx_v_outlier_significance_level);
  __Pyx_XDECREF(__pyx_v_num_samples_used);
  __Pyx_XDECREF(__pyx_v_num_outliers);
  __Pyx_XDECREF(__pyx_v_min_num_samples);
  __Pyx_XDECREF(__pyx_v_max_num_samples);
  __Pyx_XDECREF(__pyx_v_converged);
  __Pyx_XDECREF(__pyx_v_trace);
  __Pyx_XDECREF(__pyx_v_tot_wall_time);
  __Pyx_XDECREF(__pyx_v_alg_wall_time);
  __Pyx_XDECREF(__pyx_v_cpu_proc_time);
  __Pyx_XDECREF(__pyx_v_num_cpu_threads);
  __Pyx_XDECREF(__pyx_v_num_gpu_devices);
  __Pyx_XDECREF(__pyx_v_num_gpu_multiprocessors);
  __Pyx_XDECREF(__pyx_v_num_gpu_threads_per_multiprocessor);
  __Pyx_XDECREF(__pyx_v_solver_tol);
  __Pyx_XDECREF(__pyx_v_orthogonalize);
  __Pyx_XDECREF(__pyx_v_data_type_);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec__hutchinson_method_utilities(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec__hutchinson_method_utilities},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "_hutchinson_method_utilities",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_10e, __pyx_k_10e, sizeof(__pyx_k_10e), 0, 1, 0, 0},
  {&__pyx_kp_u_10e_2, __pyx_k_10e_2, sizeof(__pyx_k_10e_2), 0, 1, 0, 0},
  {&__pyx_kp_u_11s, __pyx_k_11s, sizeof(__pyx_k_11s), 0, 1, 0, 0},
  {&__pyx_kp_u_2d, __pyx_k_2d, sizeof(__pyx_k_2d), 0, 1, 0, 0},
  {&__pyx_kp_u_32_bit, __pyx_k_32_bit, sizeof(__pyx_k_32_bit), 0, 1, 0, 0},
  {&__pyx_kp_u_3d, __pyx_k_3d, sizeof(__pyx_k_3d), 0, 1, 0, 0},
  {&__pyx_kp_u_4d, __pyx_k_4d, sizeof(__pyx_k_4d), 0, 1, 0, 0},
  {&__pyx_kp_u_64_bit, __pyx_k_64_bit, sizeof(__pyx_k_64_bit), 0, 1, 0, 0},
  {&__pyx_kp_u_7_3e, __pyx_k_7_3e, sizeof(__pyx_k_7_3e), 0, 1, 0, 0},
  {&__pyx_kp_u_7_3e_2, __pyx_k_7_3e_2, sizeof(__pyx_k_7_3e_2), 0, 1, 0, 0},
  {&__pyx_kp_u_8_3f, __pyx_k_8_3f, sizeof(__pyx_k_8_3f), 0, 1, 0, 0},
  {&__pyx_kp_u_8s_none, __pyx_k_8s_none, sizeof(__pyx_k_8s_none), 0, 1, 0, 0},
  {&__pyx_kp_u_9e, __pyx_k_9e, sizeof(__pyx_k_9e), 0, 1, 0, 0},
  {&__pyx_kp_u_9f, __pyx_k_9f, sizeof(__pyx_k_9f), 0, 1, 0, 0},
  {&__pyx_n_s_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 0, 1, 1},
  {&__pyx_n_s_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 0, 1, 1},
  {&__pyx_n_s_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 0, 1, 1},
  {&__pyx_kp_u_Cannot_import_modules_for_plotti, __pyx_k_Cannot_import_modules_for_plotti, sizeof(__pyx_k_Cannot_import_modules_for_plotti), 0, 1, 0, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_u_Input_matrix_should_be_a_square, __pyx_k_Input_matrix_should_be_a_square, sizeof(__pyx_k_Input_matrix_should_be_a_square), 0, 1, 0, 0},
  {&__pyx_kp_u_Input_matrix_should_be_either_a, __pyx_k_Input_matrix_should_be_either_a, sizeof(__pyx_k_Input_matrix_should_be_either_a), 0, 1, 0, 0},
  {&__pyx_kp_u_Matrix_B_should_have_the_same_si, __pyx_k_Matrix_B_should_have_the_same_si, sizeof(__pyx_k_Matrix_B_should_have_the_same_si), 0, 1, 0, 0},
  {&__pyx_kp_u_Matrix_C_should_have_the_same_si, __pyx_k_Matrix_C_should_have_the_same_si, sizeof(__pyx_k_Matrix_C_should_have_the_same_si), 0, 1, 0, 0},
  {&__pyx_kp_u_The_sum_of_confidence_level_and, __pyx_k_The_sum_of_confidence_level_and, sizeof(__pyx_k_The_sum_of_confidence_level_and), 0, 1, 0, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_u_When_C_is_given_B_should_also_be, __pyx_k_When_C_is_given_B_should_also_be, sizeof(__pyx_k_When_C_is_given_B_should_also_be), 0, 1, 0, 0},
  {&__pyx_kp_u_When_the_input_matrix_A_is_of_ty, __pyx_k_When_the_input_matrix_A_is_of_ty, sizeof(__pyx_k_When_the_input_matrix_A_is_of_ty), 0, 1, 0, 0},
  {&__pyx_kp_u_When_the_input_matrix_A_is_of_ty_2, __pyx_k_When_the_input_matrix_A_is_of_ty_2, sizeof(__pyx_k_When_the_input_matrix_A_is_of_ty_2), 0, 1, 0, 0},
  {&__pyx_kp_u_When_the_input_matrix_A_is_of_ty_3, __pyx_k_When_the_input_matrix_A_is_of_ty_3, sizeof(__pyx_k_When_the_input_matrix_A_is_of_ty_3), 0, 1, 0, 0},
  {&__pyx_kp_u_When_the_input_matrix_A_is_of_ty_4, __pyx_k_When_the_input_matrix_A_is_of_ty_4, sizeof(__pyx_k_When_the_input_matrix_A_is_of_ty_4), 0, 1, 0, 0},
  {&__pyx_kp_u__65, __pyx_k__65, sizeof(__pyx_k__65), 0, 1, 0, 0},
  {&__pyx_kp_u__68, __pyx_k__68, sizeof(__pyx_k__68), 0, 1, 0, 0},
  {&__pyx_kp_u__71, __pyx_k__71, sizeof(__pyx_k__71), 0, 1, 0, 0},
  {&__pyx_kp_u__72, __pyx_k__72, sizeof(__pyx_k__72), 0, 1, 0, 0},
  {&__pyx_kp_u__76, __pyx_k__76, sizeof(__pyx_k__76), 0, 1, 0, 0},
  {&__pyx_kp_u__78, __pyx_k__78, sizeof(__pyx_k__78), 0, 1, 0, 0},
  {&__pyx_kp_u__80, __pyx_k__80, sizeof(__pyx_k__80), 0, 1, 0, 0},
  {&__pyx_kp_u__85, __pyx_k__85, sizeof(__pyx_k__85), 0, 1, 0, 0},
  {&__pyx_kp_u_abs_error_tol_8_3e, __pyx_k_abs_error_tol_8_3e, sizeof(__pyx_k_abs_error_tol_8_3e), 0, 1, 0, 0},
  {&__pyx_n_s_absolute_error, __pyx_k_absolute_error, sizeof(__pyx_k_absolute_error), 0, 0, 1, 1},
  {&__pyx_n_u_absolute_error, __pyx_k_absolute_error, sizeof(__pyx_k_absolute_error), 0, 1, 0, 1},
  {&__pyx_n_s_alg_wall_time, __pyx_k_alg_wall_time, sizeof(__pyx_k_alg_wall_time), 0, 0, 1, 1},
  {&__pyx_n_u_alg_wall_time, __pyx_k_alg_wall_time, sizeof(__pyx_k_alg_wall_time), 0, 1, 0, 1},
  {&__pyx_kp_u_alg_wall_time_sec_8_3e, __pyx_k_alg_wall_time_sec_8_3e, sizeof(__pyx_k_alg_wall_time_sec_8_3e), 0, 1, 0, 0},
  {&__pyx_n_s_assume_matrix, __pyx_k_assume_matrix, sizeof(__pyx_k_assume_matrix), 0, 0, 1, 1},
  {&__pyx_n_u_assume_matrix, __pyx_k_assume_matrix, sizeof(__pyx_k_assume_matrix), 0, 1, 0, 1},
  {&__pyx_kp_u_assume_matrix_cannot_be_None, __pyx_k_assume_matrix_cannot_be_None, sizeof(__pyx_k_assume_matrix_cannot_be_None), 0, 1, 0, 0},
  {&__pyx_kp_u_assume_matrix_is_invalid, __pyx_k_assume_matrix_is_invalid, sizeof(__pyx_k_assume_matrix_is_invalid), 0, 1, 0, 0},
  {&__pyx_kp_u_assume_matrix_must_be_a_string, __pyx_k_assume_matrix_must_be_a_string, sizeof(__pyx_k_assume_matrix_must_be_a_string), 0, 1, 0, 0},
  {&__pyx_kp_u_assume_matrix_should_be_either, __pyx_k_assume_matrix_should_be_either, sizeof(__pyx_k_assume_matrix_should_be_either), 0, 1, 0, 0},
  {&__pyx_kp_u_assumption_18s, __pyx_k_assumption_18s, sizeof(__pyx_k_assumption_18s), 0, 1, 0, 0},
  {&__pyx_n_s_check_arguments, __pyx_k_check_arguments, sizeof(__pyx_k_check_arguments), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_confidence_level, __pyx_k_confidence_level, sizeof(__pyx_k_confidence_level), 0, 0, 1, 1},
  {&__pyx_n_u_confidence_level, __pyx_k_confidence_level, sizeof(__pyx_k_confidence_level), 0, 1, 0, 1},
  {&__pyx_kp_u_confidence_level_4_2f, __pyx_k_confidence_level_4_2f, sizeof(__pyx_k_confidence_level_4_2f), 0, 1, 0, 0},
  {&__pyx_kp_u_confidence_level_cannot_be_None, __pyx_k_confidence_level_cannot_be_None, sizeof(__pyx_k_confidence_level_cannot_be_None), 0, 1, 0, 0},
  {&__pyx_kp_u_confidence_level_should_be_a_fl, __pyx_k_confidence_level_should_be_a_fl, sizeof(__pyx_k_confidence_level_should_be_a_fl), 0, 1, 0, 0},
  {&__pyx_kp_u_confidence_level_should_be_a_sc, __pyx_k_confidence_level_should_be_a_sc, sizeof(__pyx_k_confidence_level_should_be_a_sc), 0, 1, 0, 0},
  {&__pyx_kp_u_confidence_level_should_be_betw, __pyx_k_confidence_level_should_be_betw, sizeof(__pyx_k_confidence_level_should_be_betw), 0, 1, 0, 0},
  {&__pyx_kp_u_config, __pyx_k_config, sizeof(__pyx_k_config), 0, 1, 0, 0},
  {&__pyx_n_s_converged, __pyx_k_converged, sizeof(__pyx_k_converged), 0, 0, 1, 1},
  {&__pyx_n_u_converged, __pyx_k_converged, sizeof(__pyx_k_converged), 0, 1, 0, 1},
  {&__pyx_n_u_convergence, __pyx_k_convergence, sizeof(__pyx_k_convergence), 0, 1, 0, 1},
  {&__pyx_kp_u_convergence_error, __pyx_k_convergence_error, sizeof(__pyx_k_convergence_error), 0, 1, 0, 0},
  {&__pyx_n_s_cpu_proc_time, __pyx_k_cpu_proc_time, sizeof(__pyx_k_cpu_proc_time), 0, 0, 1, 1},
  {&__pyx_n_u_cpu_proc_time, __pyx_k_cpu_proc_time, sizeof(__pyx_k_cpu_proc_time), 0, 1, 0, 1},
  {&__pyx_kp_u_cpu_proc_time_sec_8_3e, __pyx_k_cpu_proc_time_sec_8_3e, sizeof(__pyx_k_cpu_proc_time_sec_8_3e), 0, 1, 0, 0},
  {&__pyx_n_s_data_type, __pyx_k_data_type, sizeof(__pyx_k_data_type), 0, 0, 1, 1},
  {&__pyx_n_u_data_type, __pyx_k_data_type, sizeof(__pyx_k_data_type), 0, 1, 0, 1},
  {&__pyx_n_s_data_type_2, __pyx_k_data_type_2, sizeof(__pyx_k_data_type_2), 0, 0, 1, 1},
  {&__pyx_kp_u_data_type_8s, __pyx_k_data_type_8s, sizeof(__pyx_k_data_type_8s), 0, 1, 0, 0},
  {&__pyx_kp_u_data_type_should_be_float32_or, __pyx_k_data_type_should_be_float32_or, sizeof(__pyx_k_data_type_should_be_float32_or), 0, 1, 0, 0},
  {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
  {&__pyx_n_u_device, __pyx_k_device, sizeof(__pyx_k_device), 0, 1, 0, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_u_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 1, 0, 1},
  {&__pyx_n_s_error_atol, __pyx_k_error_atol, sizeof(__pyx_k_error_atol), 0, 0, 1, 1},
  {&__pyx_n_u_error_atol, __pyx_k_error_atol, sizeof(__pyx_k_error_atol), 0, 1, 0, 1},
  {&__pyx_kp_u_error_atol_cannot_be_negative, __pyx_k_error_atol_cannot_be_negative, sizeof(__pyx_k_error_atol_cannot_be_negative), 0, 1, 0, 0},
  {&__pyx_kp_u_error_atol_should_be_a_float_nu, __pyx_k_error_atol_should_be_a_float_nu, sizeof(__pyx_k_error_atol_should_be_a_float_nu), 0, 1, 0, 0},
  {&__pyx_kp_u_error_atol_should_be_a_scalar_v, __pyx_k_error_atol_should_be_a_scalar_v, sizeof(__pyx_k_error_atol_should_be_a_scalar_v), 0, 1, 0, 0},
  {&__pyx_n_s_error_rtol, __pyx_k_error_rtol, sizeof(__pyx_k_error_rtol), 0, 0, 1, 1},
  {&__pyx_n_u_error_rtol, __pyx_k_error_rtol, sizeof(__pyx_k_error_rtol), 0, 1, 0, 1},
  {&__pyx_kp_u_error_rtol_cannot_be_negative, __pyx_k_error_rtol_cannot_be_negative, sizeof(__pyx_k_error_rtol_cannot_be_negative), 0, 1, 0, 0},
  {&__pyx_kp_u_error_rtol_should_be_a_float_nu, __pyx_k_error_rtol_should_be_a_float_nu, sizeof(__pyx_k_error_rtol_should_be_a_float_nu), 0, 1, 0, 0},
  {&__pyx_kp_u_error_rtol_should_be_a_scalar_v, __pyx_k_error_rtol_should_be_a_scalar_v, sizeof(__pyx_k_error_rtol_should_be_a_scalar_v), 0, 1, 0, 0},
  {&__pyx_n_s_exponent, __pyx_k_exponent, sizeof(__pyx_k_exponent), 0, 0, 1, 1},
  {&__pyx_n_u_exponent, __pyx_k_exponent, sizeof(__pyx_k_exponent), 0, 1, 0, 1},
  {&__pyx_kp_u_exponent_3d, __pyx_k_exponent_3d, sizeof(__pyx_k_exponent_3d), 0, 1, 0, 0},
  {&__pyx_kp_u_exponent_6_2f, __pyx_k_exponent_6_2f, sizeof(__pyx_k_exponent_6_2f), 0, 1, 0, 0},
  {&__pyx_kp_u_exponent_cannot_be_None, __pyx_k_exponent_cannot_be_None, sizeof(__pyx_k_exponent_cannot_be_None), 0, 1, 0, 0},
  {&__pyx_kp_u_exponent_cannot_be_an_integer, __pyx_k_exponent_cannot_be_an_integer, sizeof(__pyx_k_exponent_cannot_be_an_integer), 0, 1, 0, 0},
  {&__pyx_kp_u_exponent_should_be_a_scalar_val, __pyx_k_exponent_should_be_a_scalar_val, sizeof(__pyx_k_exponent_should_be_a_scalar_val), 0, 1, 0, 0},
  {&__pyx_n_u_float32, __pyx_k_float32, sizeof(__pyx_k_float32), 0, 1, 0, 1},
  {&__pyx_n_u_float64, __pyx_k_float64, sizeof(__pyx_k_float64), 0, 1, 0, 1},
  {&__pyx_n_u_gen, __pyx_k_gen, sizeof(__pyx_k_gen), 0, 1, 0, 1},
  {&__pyx_n_u_generic, __pyx_k_generic, sizeof(__pyx_k_generic), 0, 1, 0, 1},
  {&__pyx_n_s_gram, __pyx_k_gram, sizeof(__pyx_k_gram), 0, 0, 1, 1},
  {&__pyx_n_u_gram, __pyx_k_gram, sizeof(__pyx_k_gram), 0, 1, 0, 1},
  {&__pyx_kp_u_gram_5s, __pyx_k_gram_5s, sizeof(__pyx_k_gram_5s), 0, 1, 0, 0},
  {&__pyx_kp_u_gram_cannot_be_None, __pyx_k_gram_cannot_be_None, sizeof(__pyx_k_gram_cannot_be_None), 0, 1, 0, 0},
  {&__pyx_kp_u_gram_should_be_a_scalar_value, __pyx_k_gram_should_be_a_scalar_value, sizeof(__pyx_k_gram_should_be_a_scalar_value), 0, 1, 0, 0},
  {&__pyx_kp_u_gram_should_be_boolean, __pyx_k_gram_should_be_boolean, sizeof(__pyx_k_gram_should_be_boolean), 0, 1, 0, 0},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_kp_u_i_parameters_trace_absolute_rela, __pyx_k_i_parameters_trace_absolute_rela, sizeof(__pyx_k_i_parameters_trace_absolute_rela), 0, 1, 0, 0},
  {&__pyx_kp_s_imate_traceinv__hutchinson_metho, __pyx_k_imate_traceinv__hutchinson_metho, sizeof(__pyx_k_imate_traceinv__hutchinson_metho), 0, 0, 1, 0},
  {&__pyx_n_s_imate_traceinv__hutchinson_metho_2, __pyx_k_imate_traceinv__hutchinson_metho_2, sizeof(__pyx_k_imate_traceinv__hutchinson_metho_2), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_info, __pyx_k_info, sizeof(__pyx_k_info), 0, 0, 1, 1},
  {&__pyx_kp_u_inquiries_error_samples, __pyx_k_inquiries_error_samples, sizeof(__pyx_k_inquiries_error_samples), 0, 1, 0, 0},
  {&__pyx_n_s_integer, __pyx_k_integer, sizeof(__pyx_k_integer), 0, 0, 1, 1},
  {&__pyx_n_s_isinf, __pyx_k_isinf, sizeof(__pyx_k_isinf), 0, 0, 1, 1},
  {&__pyx_n_s_isnan, __pyx_k_isnan, sizeof(__pyx_k_isnan), 0, 0, 1, 1},
  {&__pyx_n_s_isscalar, __pyx_k_isscalar, sizeof(__pyx_k_isscalar), 0, 0, 1, 1},
  {&__pyx_n_s_isspmatrix, __pyx_k_isspmatrix, sizeof(__pyx_k_isspmatrix), 0, 0, 1, 1},
  {&__pyx_kp_u_lancozs_tol_cannot_be_negative, __pyx_k_lancozs_tol_cannot_be_negative, sizeof(__pyx_k_lancozs_tol_cannot_be_negative), 0, 1, 0, 0},
  {&__pyx_n_s_load_plot_settings, __pyx_k_load_plot_settings, sizeof(__pyx_k_load_plot_settings), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_matplotlib, __pyx_k_matplotlib, sizeof(__pyx_k_matplotlib), 0, 0, 1, 1},
  {&__pyx_n_u_matrix, __pyx_k_matrix, sizeof(__pyx_k_matrix), 0, 1, 0, 1},
  {&__pyx_kp_u_matrix_stochastic_estimator, __pyx_k_matrix_stochastic_estimator, sizeof(__pyx_k_matrix_stochastic_estimator), 0, 1, 0, 0},
  {&__pyx_n_s_max_num_samples, __pyx_k_max_num_samples, sizeof(__pyx_k_max_num_samples), 0, 0, 1, 1},
  {&__pyx_n_u_max_num_samples, __pyx_k_max_num_samples, sizeof(__pyx_k_max_num_samples), 0, 1, 0, 1},
  {&__pyx_kp_u_max_num_samples_5d, __pyx_k_max_num_samples_5d, sizeof(__pyx_k_max_num_samples_5d), 0, 1, 0, 0},
  {&__pyx_kp_u_max_num_samples_cannot_be_None, __pyx_k_max_num_samples_cannot_be_None, sizeof(__pyx_k_max_num_samples_cannot_be_None), 0, 1, 0, 0},
  {&__pyx_kp_u_max_num_samples_should_be_a_sca, __pyx_k_max_num_samples_should_be_a_sca, sizeof(__pyx_k_max_num_samples_should_be_a_sca), 0, 1, 0, 0},
  {&__pyx_kp_u_max_num_samples_should_be_an_in, __pyx_k_max_num_samples_should_be_an_in, sizeof(__pyx_k_max_num_samples_should_be_an_in), 0, 1, 0, 0},
  {&__pyx_kp_u_max_num_samples_should_be_at_le, __pyx_k_max_num_samples_should_be_at_le, sizeof(__pyx_k_max_num_samples_should_be_at_le), 0, 1, 0, 0},
  {&__pyx_kp_u_method_hutchinson, __pyx_k_method_hutchinson, sizeof(__pyx_k_method_hutchinson), 0, 1, 0, 0},
  {&__pyx_n_s_min_num_samples, __pyx_k_min_num_samples, sizeof(__pyx_k_min_num_samples), 0, 0, 1, 1},
  {&__pyx_n_u_min_num_samples, __pyx_k_min_num_samples, sizeof(__pyx_k_min_num_samples), 0, 1, 0, 1},
  {&__pyx_kp_u_min_num_samples_5d, __pyx_k_min_num_samples_5d, sizeof(__pyx_k_min_num_samples_5d), 0, 1, 0, 0},
  {&__pyx_kp_u_min_num_samples_cannot_be_None, __pyx_k_min_num_samples_cannot_be_None, sizeof(__pyx_k_min_num_samples_cannot_be_None), 0, 1, 0, 0},
  {&__pyx_kp_u_min_num_samples_cannot_be_great, __pyx_k_min_num_samples_cannot_be_great, sizeof(__pyx_k_min_num_samples_cannot_be_great), 0, 1, 0, 0},
  {&__pyx_kp_u_min_num_samples_should_be_a_sca, __pyx_k_min_num_samples_should_be_a_sca, sizeof(__pyx_k_min_num_samples_should_be_a_sca), 0, 1, 0, 0},
  {&__pyx_kp_u_min_num_samples_should_be_an_in, __pyx_k_min_num_samples_should_be_an_in, sizeof(__pyx_k_min_num_samples_should_be_an_in), 0, 1, 0, 0},
  {&__pyx_kp_u_min_num_samples_should_be_at_le, __pyx_k_min_num_samples_should_be_at_le, sizeof(__pyx_k_min_num_samples_should_be_at_le), 0, 1, 0, 0},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_ndarray, __pyx_k_ndarray, sizeof(__pyx_k_ndarray), 0, 0, 1, 1},
  {&__pyx_n_s_num_cpu_threads, __pyx_k_num_cpu_threads, sizeof(__pyx_k_num_cpu_threads), 0, 0, 1, 1},
  {&__pyx_n_u_num_cpu_threads, __pyx_k_num_cpu_threads, sizeof(__pyx_k_num_cpu_threads), 0, 1, 0, 1},
  {&__pyx_kp_u_num_cpu_threads_3d, __pyx_k_num_cpu_threads_3d, sizeof(__pyx_k_num_cpu_threads_3d), 0, 1, 0, 0},
  {&__pyx_n_s_num_gpu_devices, __pyx_k_num_gpu_devices, sizeof(__pyx_k_num_gpu_devices), 0, 0, 1, 1},
  {&__pyx_n_u_num_gpu_devices, __pyx_k_num_gpu_devices, sizeof(__pyx_k_num_gpu_devices), 0, 1, 0, 1},
  {&__pyx_kp_u_num_gpu_devices_multiproc, __pyx_k_num_gpu_devices_multiproc, sizeof(__pyx_k_num_gpu_devices_multiproc), 0, 1, 0, 0},
  {&__pyx_n_s_num_gpu_multiprocessors, __pyx_k_num_gpu_multiprocessors, sizeof(__pyx_k_num_gpu_multiprocessors), 0, 0, 1, 1},
  {&__pyx_n_u_num_gpu_multiprocessors, __pyx_k_num_gpu_multiprocessors, sizeof(__pyx_k_num_gpu_multiprocessors), 0, 1, 0, 1},
  {&__pyx_kp_u_num_gpu_threads_per_multiproc_4d, __pyx_k_num_gpu_threads_per_multiproc_4d, sizeof(__pyx_k_num_gpu_threads_per_multiproc_4d), 0, 1, 0, 0},
  {&__pyx_n_s_num_gpu_threads_per_multiprocess, __pyx_k_num_gpu_threads_per_multiprocess, sizeof(__pyx_k_num_gpu_threads_per_multiprocess), 0, 0, 1, 1},
  {&__pyx_n_u_num_gpu_threads_per_multiprocess, __pyx_k_num_gpu_threads_per_multiprocess, sizeof(__pyx_k_num_gpu_threads_per_multiprocess), 0, 1, 0, 1},
  {&__pyx_n_s_num_inquiries, __pyx_k_num_inquiries, sizeof(__pyx_k_num_inquiries), 0, 0, 1, 1},
  {&__pyx_n_u_num_inquiries, __pyx_k_num_inquiries, sizeof(__pyx_k_num_inquiries), 0, 1, 0, 1},
  {&__pyx_n_s_num_outliers, __pyx_k_num_outliers, sizeof(__pyx_k_num_outliers), 0, 0, 1, 1},
  {&__pyx_n_u_num_outliers, __pyx_k_num_outliers, sizeof(__pyx_k_num_outliers), 0, 1, 0, 1},
  {&__pyx_n_s_num_samples_used, __pyx_k_num_samples_used, sizeof(__pyx_k_num_samples_used), 0, 0, 1, 1},
  {&__pyx_n_u_num_samples_used, __pyx_k_num_samples_used, sizeof(__pyx_k_num_samples_used), 0, 1, 0, 1},
  {&__pyx_n_s_num_threads, __pyx_k_num_threads, sizeof(__pyx_k_num_threads), 0, 0, 1, 1},
  {&__pyx_kp_u_num_threads_cannot_be_None, __pyx_k_num_threads_cannot_be_None, sizeof(__pyx_k_num_threads_cannot_be_None), 0, 1, 0, 0},
  {&__pyx_kp_u_num_threads_should_be_a_non_neg, __pyx_k_num_threads_should_be_a_non_neg, sizeof(__pyx_k_num_threads_should_be_a_non_neg), 0, 1, 0, 0},
  {&__pyx_kp_u_num_threads_should_be_a_scalar, __pyx_k_num_threads_should_be_a_scalar, sizeof(__pyx_k_num_threads_should_be_a_scalar), 0, 1, 0, 0},
  {&__pyx_kp_u_num_threads_should_be_an_intege, __pyx_k_num_threads_should_be_an_intege, sizeof(__pyx_k_num_threads_should_be_an_intege), 0, 1, 0, 0},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_u_orthogonalization_4s, __pyx_k_orthogonalization_4s, sizeof(__pyx_k_orthogonalization_4s), 0, 1, 0, 0},
  {&__pyx_n_s_orthogonalize, __pyx_k_orthogonalize, sizeof(__pyx_k_orthogonalize), 0, 0, 1, 1},
  {&__pyx_n_u_orthogonalize, __pyx_k_orthogonalize, sizeof(__pyx_k_orthogonalize), 0, 1, 0, 1},
  {&__pyx_kp_u_orthogonalize_cannot_be_None, __pyx_k_orthogonalize_cannot_be_None, sizeof(__pyx_k_orthogonalize_cannot_be_None), 0, 1, 0, 0},
  {&__pyx_kp_u_orthogonalize_should_be_a_scala, __pyx_k_orthogonalize_should_be_a_scala, sizeof(__pyx_k_orthogonalize_should_be_a_scala), 0, 1, 0, 0},
  {&__pyx_kp_u_orthogonalize_should_be_boolean, __pyx_k_orthogonalize_should_be_boolean, sizeof(__pyx_k_orthogonalize_should_be_boolean), 0, 1, 0, 0},
  {&__pyx_n_s_outlier_significance_level, __pyx_k_outlier_significance_level, sizeof(__pyx_k_outlier_significance_level), 0, 0, 1, 1},
  {&__pyx_n_u_outlier_significance_level, __pyx_k_outlier_significance_level, sizeof(__pyx_k_outlier_significance_level), 0, 1, 0, 1},
  {&__pyx_kp_u_outlier_significance_level_4_2f, __pyx_k_outlier_significance_level_4_2f, sizeof(__pyx_k_outlier_significance_level_4_2f), 0, 1, 0, 0},
  {&__pyx_kp_u_outlier_significance_level_cann, __pyx_k_outlier_significance_level_cann, sizeof(__pyx_k_outlier_significance_level_cann), 0, 1, 0, 0},
  {&__pyx_kp_u_outlier_significance_level_must, __pyx_k_outlier_significance_level_must, sizeof(__pyx_k_outlier_significance_level_must), 0, 1, 0, 0},
  {&__pyx_kp_u_outlier_significance_level_must_2, __pyx_k_outlier_significance_level_must_2, sizeof(__pyx_k_outlier_significance_level_must_2), 0, 1, 0, 0},
  {&__pyx_kp_u_outlier_significance_level_shou, __pyx_k_outlier_significance_level_shou, sizeof(__pyx_k_outlier_significance_level_shou), 0, 1, 0, 0},
  {&__pyx_n_s_plot, __pyx_k_plot, sizeof(__pyx_k_plot), 0, 0, 1, 1},
  {&__pyx_kp_u_plot_cannot_be_None, __pyx_k_plot_cannot_be_None, sizeof(__pyx_k_plot_cannot_be_None), 0, 1, 0, 0},
  {&__pyx_kp_u_plot_should_be_a_scalar_value, __pyx_k_plot_should_be_a_scalar_value, sizeof(__pyx_k_plot_should_be_a_scalar_value), 0, 1, 0, 0},
  {&__pyx_kp_u_plot_should_be_boolean, __pyx_k_plot_should_be_boolean, sizeof(__pyx_k_plot_should_be_boolean), 0, 1, 0, 0},
  {&__pyx_n_u_pos, __pyx_k_pos, sizeof(__pyx_k_pos), 0, 1, 0, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_print_summary, __pyx_k_print_summary, sizeof(__pyx_k_print_summary), 0, 0, 1, 1},
  {&__pyx_kp_u_process, __pyx_k_process, sizeof(__pyx_k_process), 0, 1, 0, 0},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_kp_u_rel_error_tol_4_2f, __pyx_k_rel_error_tol_4_2f, sizeof(__pyx_k_rel_error_tol_4_2f), 0, 1, 0, 0},
  {&__pyx_n_s_relative_error, __pyx_k_relative_error, sizeof(__pyx_k_relative_error), 0, 0, 1, 1},
  {&__pyx_n_u_relative_error, __pyx_k_relative_error, sizeof(__pyx_k_relative_error), 0, 1, 0, 1},
  {&__pyx_kp_u_results, __pyx_k_results, sizeof(__pyx_k_results), 0, 1, 0, 0},
  {&__pyx_n_u_samples_mean, __pyx_k_samples_mean, sizeof(__pyx_k_samples_mean), 0, 1, 0, 1},
  {&__pyx_n_s_scipy_sparse, __pyx_k_scipy_sparse, sizeof(__pyx_k_scipy_sparse), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_u_solver, __pyx_k_solver, sizeof(__pyx_k_solver), 0, 1, 0, 1},
  {&__pyx_n_s_solver_tol, __pyx_k_solver_tol, sizeof(__pyx_k_solver_tol), 0, 0, 1, 1},
  {&__pyx_n_u_solver_tol, __pyx_k_solver_tol, sizeof(__pyx_k_solver_tol), 0, 1, 0, 1},
  {&__pyx_kp_u_solver_tol_8_3e, __pyx_k_solver_tol_8_3e, sizeof(__pyx_k_solver_tol_8_3e), 0, 1, 0, 0},
  {&__pyx_kp_u_solver_tol_should_be_a_float_nu, __pyx_k_solver_tol_should_be_a_float_nu, sizeof(__pyx_k_solver_tol_should_be_a_float_nu), 0, 1, 0, 0},
  {&__pyx_kp_u_solver_tol_should_be_a_scalar_v, __pyx_k_solver_tol_should_be_a_scalar_v, sizeof(__pyx_k_solver_tol_should_be_a_scalar_v), 0, 1, 0, 0},
  {&__pyx_n_u_sym, __pyx_k_sym, sizeof(__pyx_k_sym), 0, 1, 0, 1},
  {&__pyx_n_u_sym_pos, __pyx_k_sym_pos, sizeof(__pyx_k_sym_pos), 0, 1, 0, 1},
  {&__pyx_n_u_symmetric, __pyx_k_symmetric, sizeof(__pyx_k_symmetric), 0, 1, 0, 1},
  {&__pyx_kp_u_symmetric_positive, __pyx_k_symmetric_positive, sizeof(__pyx_k_symmetric_positive), 0, 1, 0, 0},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_u_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 1, 0, 1},
  {&__pyx_kp_u_time_device, __pyx_k_time_device, sizeof(__pyx_k_time_device), 0, 1, 0, 0},
  {&__pyx_n_s_tot_wall_time, __pyx_k_tot_wall_time, sizeof(__pyx_k_tot_wall_time), 0, 0, 1, 1},
  {&__pyx_n_u_tot_wall_time, __pyx_k_tot_wall_time, sizeof(__pyx_k_tot_wall_time), 0, 1, 0, 1},
  {&__pyx_kp_u_tot_wall_time_sec_8_3e, __pyx_k_tot_wall_time_sec_8_3e, sizeof(__pyx_k_tot_wall_time_sec_8_3e), 0, 1, 0, 0},
  {&__pyx_n_s_trace, __pyx_k_trace, sizeof(__pyx_k_trace), 0, 0, 1, 1},
  {&__pyx_kp_u_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 1, 0, 0},
  {&__pyx_n_s_utilities_plot_utilities, __pyx_k_utilities_plot_utilities, sizeof(__pyx_k_utilities_plot_utilities), 0, 0, 1, 1},
  {&__pyx_n_s_verbose, __pyx_k_verbose, sizeof(__pyx_k_verbose), 0, 0, 1, 1},
  {&__pyx_kp_u_verbose_cannot_be_None, __pyx_k_verbose_cannot_be_None, sizeof(__pyx_k_verbose_cannot_be_None), 0, 1, 0, 0},
  {&__pyx_kp_u_verbose_should_be_a_scalar_valu, __pyx_k_verbose_should_be_a_scalar_valu, sizeof(__pyx_k_verbose_should_be_a_scalar_valu), 0, 1, 0, 0},
  {&__pyx_kp_u_verbose_should_be_boolean, __pyx_k_verbose_should_be_boolean, sizeof(__pyx_k_verbose_should_be_boolean), 0, 1, 0, 0},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 46, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 49, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(0, 230, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 304, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 318, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":46
 *     # Check A
 *     if (not isinstance(A, numpy.ndarray)) and (not isspmatrix(A)):
 *         raise TypeError('Input matrix should be either a "numpy.ndarray" or ' +             # <<<<<<<<<<<<<<
 *                         'a "scipy.sparse" matrix.')
 *     elif A.shape[0] != A.shape[1]:
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_Input_matrix_should_be_either_a); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":49
 *                         'a "scipy.sparse" matrix.')
 *     elif A.shape[0] != A.shape[1]:
 *         raise ValueError('Input matrix should be a square matrix.')             # <<<<<<<<<<<<<<
 * 
 *     # Check B
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_Input_matrix_should_be_a_square); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":55
 *         if (isinstance(A, numpy.ndarray)) and \
 *                 (not isinstance(B, numpy.ndarray)):
 *             raise TypeError('When the input matrix "A" is of type ' +             # <<<<<<<<<<<<<<
 *                             '"numpy.ndarray", matrix "B" should also be of ' +
 *                             'the same type.')
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_When_the_input_matrix_A_is_of_ty); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":59
 *                             'the same type.')
 *         if isspmatrix(A) and not isspmatrix(B):
 *             raise TypeError('When the input matrix "A" is of type ' +             # <<<<<<<<<<<<<<
 *                             '"scipy.sparse", matrix "B" should also be of ' +
 *                             'the same type.')
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_When_the_input_matrix_A_is_of_ty_2); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":63
 *                             'the same type.')
 *         elif A.shape != B.shape:
 *             raise ValueError('Matrix "B" should have the same size as ' +             # <<<<<<<<<<<<<<
 *                              'matrix "A".')
 * 
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_Matrix_B_should_have_the_same_si); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":69
 *     if C is not None:
 *         if B is None:
 *             raise ValueError('When "C" is given, "B" should also be given.')             # <<<<<<<<<<<<<<
 *         if (isinstance(A, numpy.ndarray)) and \
 *                 (not isinstance(C, numpy.ndarray)):
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u_When_C_is_given_B_should_also_be); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":72
 *         if (isinstance(A, numpy.ndarray)) and \
 *                 (not isinstance(C, numpy.ndarray)):
 *             raise TypeError('When the input matrix "A" is of type ' +             # <<<<<<<<<<<<<<
 *                             '"numpy.ndarray", matrix "C" should also be of ' +
 *                             'the same type.')
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_u_When_the_input_matrix_A_is_of_ty_3); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":76
 *                             'the same type.')
 *         if isspmatrix(A) and not isspmatrix(C):
 *             raise TypeError('When the input matrix "A" is of type ' +             # <<<<<<<<<<<<<<
 *                             '"scipy.sparse", matrix "C" should also be of ' +
 *                             'the same type.')
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_When_the_input_matrix_A_is_of_ty_4); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":80
 *                             'the same type.')
 *         elif A.shape != C.shape:
 *             raise ValueError('Matrix "C" should have the same size as ' +             # <<<<<<<<<<<<<<
 *                              'matrix "A".')
 * 
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_Matrix_C_should_have_the_same_si); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":85
 *     # Check gram
 *     if gram is None:
 *         raise TypeError('"gram" cannot be None.')             # <<<<<<<<<<<<<<
 *     elif not numpy.isscalar(gram):
 *         raise TypeError('"gram" should be a scalar value.')
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_gram_cannot_be_None); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":87
 *         raise TypeError('"gram" cannot be None.')
 *     elif not numpy.isscalar(gram):
 *         raise TypeError('"gram" should be a scalar value.')             # <<<<<<<<<<<<<<
 *     elif not isinstance(gram, bool):
 *         raise TypeError('"gram" should be boolean.')
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_u_gram_should_be_a_scalar_value); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":89
 *         raise TypeError('"gram" should be a scalar value.')
 *     elif not isinstance(gram, bool):
 *         raise TypeError('"gram" should be boolean.')             # <<<<<<<<<<<<<<
 * 
 *     # Check exponent
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_u_gram_should_be_boolean); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":93
 *     # Check exponent
 *     if exponent is None:
 *         raise TypeError('"exponent" cannot be None.')             # <<<<<<<<<<<<<<
 *     elif not numpy.isscalar(exponent):
 *         raise TypeError('"exponent" should be a scalar value.')
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_u_exponent_cannot_be_None); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":95
 *         raise TypeError('"exponent" cannot be None.')
 *     elif not numpy.isscalar(exponent):
 *         raise TypeError('"exponent" should be a scalar value.')             # <<<<<<<<<<<<<<
 *     elif not isinstance(exponent, (int, numpy.integer)):
 *         TypeError('"exponent" cannot be an integer.')
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_u_exponent_should_be_a_scalar_val); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":97
 *         raise TypeError('"exponent" should be a scalar value.')
 *     elif not isinstance(exponent, (int, numpy.integer)):
 *         TypeError('"exponent" cannot be an integer.')             # <<<<<<<<<<<<<<
 * 
 *     # Check assume_matrix
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_u_exponent_cannot_be_an_integer); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":101
 *     # Check assume_matrix
 *     if assume_matrix is None:
 *         raise ValueError('"assume_matrix" cannot be None.')             # <<<<<<<<<<<<<<
 *     elif not isinstance(assume_matrix, str):
 *         raise TypeError('"assume_matrix" must be a string.')
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_u_assume_matrix_cannot_be_None); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":103
 *         raise ValueError('"assume_matrix" cannot be None.')
 *     elif not isinstance(assume_matrix, str):
 *         raise TypeError('"assume_matrix" must be a string.')             # <<<<<<<<<<<<<<
 *     elif assume_matrix != 'gen' and assume_matrix != "pos" and \
 *             assume_matrix != "sym" and assume_matrix != "sym_pos":
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_u_assume_matrix_must_be_a_string); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":106
 *     elif assume_matrix != 'gen' and assume_matrix != "pos" and \
 *             assume_matrix != "sym" and assume_matrix != "sym_pos":
 *         raise ValueError('"assume_matrix" should be either "gen", "pos", ' +             # <<<<<<<<<<<<<<
 *                          '"sym, or "sym_pos".')
 * 
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_u_assume_matrix_should_be_either); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":111
 *     # Check min_num_samples
 *     if min_num_samples is None:
 *         raise ValueError('"min_num_samples" cannot be None.')             # <<<<<<<<<<<<<<
 *     elif not numpy.isscalar(min_num_samples):
 *         raise TypeError('"min_num_samples" should be a scalar value.')
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_u_min_num_samples_cannot_be_None); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":113
 *         raise ValueError('"min_num_samples" cannot be None.')
 *     elif not numpy.isscalar(min_num_samples):
 *         raise TypeError('"min_num_samples" should be a scalar value.')             # <<<<<<<<<<<<<<
 *     elif not isinstance(min_num_samples, (int, numpy.integer)):
 *         raise TypeError('"min_num_samples" should be an integer.')
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_u_min_num_samples_should_be_a_sca); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":115
 *         raise TypeError('"min_num_samples" should be a scalar value.')
 *     elif not isinstance(min_num_samples, (int, numpy.integer)):
 *         raise TypeError('"min_num_samples" should be an integer.')             # <<<<<<<<<<<<<<
 *     elif min_num_samples < 1:
 *         raise ValueError('"min_num_samples" should be at least one.')
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_u_min_num_samples_should_be_an_in); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":117
 *         raise TypeError('"min_num_samples" should be an integer.')
 *     elif min_num_samples < 1:
 *         raise ValueError('"min_num_samples" should be at least one.')             # <<<<<<<<<<<<<<
 * 
 *     # Check max_num_samples
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_u_min_num_samples_should_be_at_le); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":121
 *     # Check max_num_samples
 *     if max_num_samples is None:
 *         raise ValueError('"max_num_samples" cannot be None.')             # <<<<<<<<<<<<<<
 *     elif not numpy.isscalar(max_num_samples):
 *         raise TypeError('"max_num_samples" should be a scalar value.')
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_u_max_num_samples_cannot_be_None); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":123
 *         raise ValueError('"max_num_samples" cannot be None.')
 *     elif not numpy.isscalar(max_num_samples):
 *         raise TypeError('"max_num_samples" should be a scalar value.')             # <<<<<<<<<<<<<<
 *     elif not isinstance(max_num_samples, (int, numpy.integer)):
 *         raise TypeError('"max_num_samples" should be an integer.')
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_u_max_num_samples_should_be_a_sca); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":125
 *         raise TypeError('"max_num_samples" should be a scalar value.')
 *     elif not isinstance(max_num_samples, (int, numpy.integer)):
 *         raise TypeError('"max_num_samples" should be an integer.')             # <<<<<<<<<<<<<<
 *     elif max_num_samples < 1:
 *         raise ValueError('"max_num_samples" should be at least one.')
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_u_max_num_samples_should_be_an_in); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":127
 *         raise TypeError('"max_num_samples" should be an integer.')
 *     elif max_num_samples < 1:
 *         raise ValueError('"max_num_samples" should be at least one.')             # <<<<<<<<<<<<<<
 * 
 *     # Check min and max num samples
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_u_max_num_samples_should_be_at_le); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":131
 *     # Check min and max num samples
 *     if min_num_samples > max_num_samples:
 *         raise ValueError('"min_num_samples" cannot be greater than ' +             # <<<<<<<<<<<<<<
 *                          '"max_num_samples".')
 * 
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_u_min_num_samples_cannot_be_great); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":138
 *         error_atol = 0.0
 *     elif not numpy.isscalar(error_atol):
 *         raise TypeError('"error_atol" should be a scalar value.')             # <<<<<<<<<<<<<<
 *     elif not isinstance(error_atol, (int, numpy.integer, float)):
 *         raise TypeError('"error_atol" should be a float number.')
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_u_error_atol_should_be_a_scalar_v); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":140
 *         raise TypeError('"error_atol" should be a scalar value.')
 *     elif not isinstance(error_atol, (int, numpy.integer, float)):
 *         raise TypeError('"error_atol" should be a float number.')             # <<<<<<<<<<<<<<
 *     elif error_atol < 0.0:
 *         raise ValueError('"error_atol" cannot be negative.')
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_u_error_atol_should_be_a_float_nu); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":142
 *         raise TypeError('"error_atol" should be a float number.')
 *     elif error_atol < 0.0:
 *         raise ValueError('"error_atol" cannot be negative.')             # <<<<<<<<<<<<<<
 * 
 *     # Check error relative tolerance
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_u_error_atol_cannot_be_negative); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":148
 *         error_rtol = 0.0
 *     elif not numpy.isscalar(error_rtol):
 *         raise TypeError('"error_rtol" should be a scalar value.')             # <<<<<<<<<<<<<<
 *     elif not isinstance(error_rtol, (int, numpy.integer, float)):
 *         raise TypeError('"error_rtol" should be a float number.')
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_u_error_rtol_should_be_a_scalar_v); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":150
 *         raise TypeError('"error_rtol" should be a scalar value.')
 *     elif not isinstance(error_rtol, (int, numpy.integer, float)):
 *         raise TypeError('"error_rtol" should be a float number.')             # <<<<<<<<<<<<<<
 *     elif error_rtol < 0.0:
 *         raise ValueError('"error_rtol" cannot be negative.')
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_u_error_rtol_should_be_a_float_nu); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":152
 *         raise TypeError('"error_rtol" should be a float number.')
 *     elif error_rtol < 0.0:
 *         raise ValueError('"error_rtol" cannot be negative.')             # <<<<<<<<<<<<<<
 * 
 *     # Check confidence level
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_u_error_rtol_cannot_be_negative); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":156
 *     # Check confidence level
 *     if confidence_level is None:
 *         raise TypeError('"confidence_level" cannot be None.')             # <<<<<<<<<<<<<<
 *     elif not numpy.isscalar(confidence_level):
 *         raise TypeError('"confidence_level" should be a scalar.')
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_u_confidence_level_cannot_be_None); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":158
 *         raise TypeError('"confidence_level" cannot be None.')
 *     elif not numpy.isscalar(confidence_level):
 *         raise TypeError('"confidence_level" should be a scalar.')             # <<<<<<<<<<<<<<
 *     elif not isinstance(confidence_level, (int, numpy.integer, float)):
 *         raise TypeError('"confidence_level" should be a float number.')
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_u_confidence_level_should_be_a_sc); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":160
 *         raise TypeError('"confidence_level" should be a scalar.')
 *     elif not isinstance(confidence_level, (int, numpy.integer, float)):
 *         raise TypeError('"confidence_level" should be a float number.')             # <<<<<<<<<<<<<<
 *     elif confidence_level < 0.0 or confidence_level > 1.0:
 *         raise ValueError('"confidence_level" should be between 0 and 1.')
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_u_confidence_level_should_be_a_fl); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":162
 *         raise TypeError('"confidence_level" should be a float number.')
 *     elif confidence_level < 0.0 or confidence_level > 1.0:
 *         raise ValueError('"confidence_level" should be between 0 and 1.')             # <<<<<<<<<<<<<<
 * 
 *     # Check outlier significance level
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_u_confidence_level_should_be_betw); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":166
 *     # Check outlier significance level
 *     if outlier_significance_level is None:
 *         raise TypeError('"outlier_significance_level" cannot be None.')             # <<<<<<<<<<<<<<
 *     elif not numpy.isscalar(outlier_significance_level):
 *         raise TypeError('"outlier_significance_level" should be a scalar.')
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_u_outlier_significance_level_cann); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":168
 *         raise TypeError('"outlier_significance_level" cannot be None.')
 *     elif not numpy.isscalar(outlier_significance_level):
 *         raise TypeError('"outlier_significance_level" should be a scalar.')             # <<<<<<<<<<<<<<
 *     elif not isinstance(outlier_significance_level,
 *                         (int, numpy.integer, float)):
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_u_outlier_significance_level_shou); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":171
 *     elif not isinstance(outlier_significance_level,
 *                         (int, numpy.integer, float)):
 *         raise TypeError('"outlier_significance_level" must be a float number.')             # <<<<<<<<<<<<<<
 *     elif outlier_significance_level < 0.0 or outlier_significance_level > 1.0:
 *         raise ValueError(
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_u_outlier_significance_level_must); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":173
 *         raise TypeError('"outlier_significance_level" must be a float number.')
 *     elif outlier_significance_level < 0.0 or outlier_significance_level > 1.0:
 *         raise ValueError(             # <<<<<<<<<<<<<<
 *                 '"outlier_significance_level" must be in [0, 1] interval.')
 * 
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_u_outlier_significance_level_must_2); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":178
 *     # Compare outlier significance level and confidence level
 *     if outlier_significance_level > 1.0 - confidence_level:
 *         raise ValueError('The sum of "confidence_level" and ' +             # <<<<<<<<<<<<<<
 *                          '"outlier_significance_level" should be less than 1.')
 * 
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_u_The_sum_of_confidence_level_and); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":183
 *     # Check solver tol
 *     if solver_tol is not None and not numpy.isscalar(solver_tol):
 *         raise TypeError('"solver_tol" should be a scalar value.')             # <<<<<<<<<<<<<<
 *     elif solver_tol is not None and \
 *             not isinstance(solver_tol, (int, numpy.integer, float)):
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_u_solver_tol_should_be_a_scalar_v); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":186
 *     elif solver_tol is not None and \
 *             not isinstance(solver_tol, (int, numpy.integer, float)):
 *         raise TypeError('"solver_tol" should be a float number.')             # <<<<<<<<<<<<<<
 *     elif solver_tol is not None and solver_tol < 0.0:
 *         raise ValueError('"lancozs_tol" cannot be negative.')
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_u_solver_tol_should_be_a_float_nu); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":188
 *         raise TypeError('"solver_tol" should be a float number.')
 *     elif solver_tol is not None and solver_tol < 0.0:
 *         raise ValueError('"lancozs_tol" cannot be negative.')             # <<<<<<<<<<<<<<
 * 
 *     # Check orthogonalize
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_u_lancozs_tol_cannot_be_negative); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":192
 *     # Check orthogonalize
 *     if orthogonalize is None:
 *         raise TypeError('"orthogonalize" cannot be None.')             # <<<<<<<<<<<<<<
 *     elif not numpy.isscalar(orthogonalize):
 *         raise TypeError('"orthogonalize" should be a scalar value.')
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_u_orthogonalize_cannot_be_None); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":194
 *         raise TypeError('"orthogonalize" cannot be None.')
 *     elif not numpy.isscalar(orthogonalize):
 *         raise TypeError('"orthogonalize" should be a scalar value.')             # <<<<<<<<<<<<<<
 *     elif not isinstance(orthogonalize, bool):
 *         raise TypeError('"orthogonalize" should be boolean.')
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_u_orthogonalize_should_be_a_scala); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":196
 *         raise TypeError('"orthogonalize" should be a scalar value.')
 *     elif not isinstance(orthogonalize, bool):
 *         raise TypeError('"orthogonalize" should be boolean.')             # <<<<<<<<<<<<<<
 * 
 *     # Check num_threads
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_kp_u_orthogonalize_should_be_boolean); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":200
 *     # Check num_threads
 *     if num_threads is None:
 *         raise TypeError('"num_threads" cannot be None.')             # <<<<<<<<<<<<<<
 *     elif not numpy.isscalar(num_threads):
 *         raise TypeError('"num_threads" should be a scalar value.')
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_kp_u_num_threads_cannot_be_None); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":202
 *         raise TypeError('"num_threads" cannot be None.')
 *     elif not numpy.isscalar(num_threads):
 *         raise TypeError('"num_threads" should be a scalar value.')             # <<<<<<<<<<<<<<
 *     elif not isinstance(num_threads, (int, numpy.integer)):
 *         raise TypeError('"num_threads" should be an integer.')
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_u_num_threads_should_be_a_scalar); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":204
 *         raise TypeError('"num_threads" should be a scalar value.')
 *     elif not isinstance(num_threads, (int, numpy.integer)):
 *         raise TypeError('"num_threads" should be an integer.')             # <<<<<<<<<<<<<<
 *     elif num_threads < 0:
 *         raise ValueError('"num_threads" should be a non-negative integer.')
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_kp_u_num_threads_should_be_an_intege); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":206
 *         raise TypeError('"num_threads" should be an integer.')
 *     elif num_threads < 0:
 *         raise ValueError('"num_threads" should be a non-negative integer.')             # <<<<<<<<<<<<<<
 * 
 *     # Check verbose
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_u_num_threads_should_be_a_non_neg); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":210
 *     # Check verbose
 *     if verbose is None:
 *         raise TypeError('"verbose" cannot be None.')             # <<<<<<<<<<<<<<
 *     elif not numpy.isscalar(verbose):
 *         raise TypeError('"verbose" should be a scalar value.')
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_kp_u_verbose_cannot_be_None); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":212
 *         raise TypeError('"verbose" cannot be None.')
 *     elif not numpy.isscalar(verbose):
 *         raise TypeError('"verbose" should be a scalar value.')             # <<<<<<<<<<<<<<
 *     elif not isinstance(verbose, bool):
 *         raise TypeError('"verbose" should be boolean.')
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_kp_u_verbose_should_be_a_scalar_valu); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":214
 *         raise TypeError('"verbose" should be a scalar value.')
 *     elif not isinstance(verbose, bool):
 *         raise TypeError('"verbose" should be boolean.')             # <<<<<<<<<<<<<<
 * 
 *     # Check plot
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_kp_u_verbose_should_be_boolean); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":218
 *     # Check plot
 *     if plot is None:
 *         raise TypeError('"plot" cannot be None.')             # <<<<<<<<<<<<<<
 *     elif not numpy.isscalar(plot):
 *         raise TypeError('"plot" should be a scalar value.')
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_kp_u_plot_cannot_be_None); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":220
 *         raise TypeError('"plot" cannot be None.')
 *     elif not numpy.isscalar(plot):
 *         raise TypeError('"plot" should be a scalar value.')             # <<<<<<<<<<<<<<
 *     elif not isinstance(plot, bool):
 *         raise TypeError('"plot" should be boolean.')
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_kp_u_plot_should_be_a_scalar_value); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":222
 *         raise TypeError('"plot" should be a scalar value.')
 *     elif not isinstance(plot, bool):
 *         raise TypeError('"plot" should be boolean.')             # <<<<<<<<<<<<<<
 * 
 *     # Check if plot modules exist
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_kp_u_plot_should_be_boolean); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":231
 *             load_plot_settings()
 *         except ImportError:
 *             raise ImportError('Cannot import modules for plotting. Either ' +             # <<<<<<<<<<<<<<
 *                               'install "matplotlib" and "seaborn" packages, ' +
 *                               'or set "plot=False".')
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_kp_u_Cannot_import_modules_for_plotti); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":293
 *         assume_matrix = "symmetric-positive"
 *     else:
 *         raise ValueError('"assume_matrix" is invalid.')             # <<<<<<<<<<<<<<
 * 
 *     # Convert data type to x-bit format
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_kp_u_assume_matrix_is_invalid); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":301
 *         data_type_ = '64-bit'
 *     else:
 *         raise TypeError('"data_type" should be "float32" or "float64".')             # <<<<<<<<<<<<<<
 * 
 *     # Print results
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_kp_u_data_type_should_be_float32_or); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":304
 * 
 *     # Print results
 *     print('                                    results                      ' +             # <<<<<<<<<<<<<<
 *           '             ')
 *     print('=================================================================' +
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_kp_u_results); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":306
 *     print('                                    results                      ' +
 *           '             ')
 *     print('=================================================================' +             # <<<<<<<<<<<<<<
 *           '=============')
 *     print('     inquiries                            error            sample' +
 */
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_kp_u__65); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":308
 *     print('=================================================================' +
 *           '=============')
 *     print('     inquiries                            error            sample' +             # <<<<<<<<<<<<<<
 *           's            ')
 *     print('--------------------              ---------------------   -------' +
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_kp_u_inquiries_error_samples); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":310
 *     print('     inquiries                            error            sample' +
 *           's            ')
 *     print('--------------------              ---------------------   -------' +             # <<<<<<<<<<<<<<
 *           '--           ')
 *     print('i         parameters       trace    absolute   relative   num   o' +
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_kp_u__68); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":312
 *     print('--------------------              ---------------------   -------' +
 *           '--           ')
 *     print('i         parameters       trace    absolute   relative   num   o' +             # <<<<<<<<<<<<<<
 *           'ut  converged')
 *     print('=================================================================' +
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_kp_u_i_parameters_trace_absolute_rela); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":365
 *             print('%11s' % converged[i])
 * 
 *     print('')             # <<<<<<<<<<<<<<
 * 
 *     # Print user configurations
 */
  __pyx_tuple__73 = PyTuple_Pack(1, __pyx_kp_u__71); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":368
 * 
 *     # Print user configurations
 *     print('                                    config                       ' +             # <<<<<<<<<<<<<<
 *           '             ')
 *     print('=================================================================' +
 */
  __pyx_tuple__74 = PyTuple_Pack(1, __pyx_kp_u_config); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":374
 * 
 *     # Prints matrx and stochastic process
 *     print('                matrix                            ' +             # <<<<<<<<<<<<<<
 *           'stochastic estimator        ')
 *     print('-------------------------------------    ------------------------' +
 */
  __pyx_tuple__75 = PyTuple_Pack(1, __pyx_kp_u_matrix_stochastic_estimator); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":376
 *     print('                matrix                            ' +
 *           'stochastic estimator        ')
 *     print('-------------------------------------    ------------------------' +             # <<<<<<<<<<<<<<
 *           '-------------')
 *     print('gram:                           %5s' % gram, end="    ")
 */
  __pyx_tuple__77 = PyTuple_Pack(1, __pyx_kp_u__76); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":379
 *           '-------------')
 *     print('gram:                           %5s' % gram, end="    ")
 *     print('method:                    hutchinson')             # <<<<<<<<<<<<<<
 *     print('assumption:        %18s' % assume_matrix, end="    ")
 *     print('solver tol:                 %8.3e' % solver_tol)
 */
  __pyx_tuple__79 = PyTuple_Pack(1, __pyx_kp_u_method_hutchinson); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":389
 *     print('orthogonalization:               %4s' % orthogonalize)
 *     print('data type:                   %8s' % data_type_, end="    ")
 *     print('                                     ')             # <<<<<<<<<<<<<<
 *     print('')
 * 
 */
  __pyx_tuple__81 = PyTuple_Pack(1, __pyx_kp_u__80); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":393
 * 
 *     # Prints convergence and error
 *     print('             convergence                                 ' +             # <<<<<<<<<<<<<<
 *           'error     ')
 *     print('-------------------------------------    ------------------------' +
 */
  __pyx_tuple__82 = PyTuple_Pack(1, __pyx_kp_u_convergence_error); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":407
 * 
 *     # Print information about CPU and GPU
 *     print('                                   process                       ' +             # <<<<<<<<<<<<<<
 *           '             ')
 *     print('=================================================================' +
 */
  __pyx_tuple__83 = PyTuple_Pack(1, __pyx_kp_u_process); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":411
 *     print('=================================================================' +
 *           '=============')
 *     print('                 time                                   device   ' +             # <<<<<<<<<<<<<<
 *           '               ')
 *     print('-------------------------------------    ------------------------' +
 */
  __pyx_tuple__84 = PyTuple_Pack(1, __pyx_kp_u_time_device); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":22
 * # ===============
 * 
 * def check_arguments(             # <<<<<<<<<<<<<<
 *         A,
 *         B,
 */
  __pyx_tuple__86 = PyTuple_Pack(19, __pyx_n_s_A, __pyx_n_s_B, __pyx_n_s_C, __pyx_n_s_gram, __pyx_n_s_exponent, __pyx_n_s_assume_matrix, __pyx_n_s_min_num_samples, __pyx_n_s_max_num_samples, __pyx_n_s_error_atol, __pyx_n_s_error_rtol, __pyx_n_s_confidence_level, __pyx_n_s_outlier_significance_level, __pyx_n_s_solver_tol, __pyx_n_s_orthogonalize, __pyx_n_s_num_threads, __pyx_n_s_verbose, __pyx_n_s_plot, __pyx_n_s_matplotlib, __pyx_n_s_load_plot_settings); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);
  __pyx_codeobj_ = (PyObject*)__Pyx_PyCode_New(17, 0, 19, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__86, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imate_traceinv__hutchinson_metho, __pyx_n_s_check_arguments, 22, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj_)) __PYX_ERR(0, 22, __pyx_L1_error)

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":242
 * # =============
 * 
 * def print_summary(info):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */
  __pyx_tuple__87 = PyTuple_Pack(29, __pyx_n_s_info, __pyx_n_s_data_type, __pyx_n_s_gram, __pyx_n_s_exponent, __pyx_n_s_assume_matrix, __pyx_n_s_num_inquiries, __pyx_n_s_absolute_error, __pyx_n_s_relative_error, __pyx_n_s_error_atol, __pyx_n_s_error_rtol, __pyx_n_s_confidence_level, __pyx_n_s_outlier_significance_level, __pyx_n_s_num_samples_used, __pyx_n_s_num_outliers, __pyx_n_s_min_num_samples, __pyx_n_s_max_num_samples, __pyx_n_s_converged, __pyx_n_s_trace, __pyx_n_s_tot_wall_time, __pyx_n_s_alg_wall_time, __pyx_n_s_cpu_proc_time, __pyx_n_s_num_cpu_threads, __pyx_n_s_num_gpu_devices, __pyx_n_s_num_gpu_multiprocessors, __pyx_n_s_num_gpu_threads_per_multiprocess, __pyx_n_s_solver_tol, __pyx_n_s_orthogonalize, __pyx_n_s_data_type_2, __pyx_n_s_i); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(1, 0, 29, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__87, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_imate_traceinv__hutchinson_metho, __pyx_n_s_print_summary, 242, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_100_0 = PyFloat_FromDouble(100.0); if (unlikely(!__pyx_float_100_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC init_hutchinson_method_utilities(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC init_hutchinson_method_utilities(void)
#else
__Pyx_PyMODINIT_FUNC PyInit__hutchinson_method_utilities(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit__hutchinson_method_utilities(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec__hutchinson_method_utilities(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module '_hutchinson_method_utilities' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit__hutchinson_method_utilities(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_hutchinson_method_utilities", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_imate__traceinv___hutchinson_method_utilities) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "imate.traceinv._hutchinson_method_utilities")) {
      if (unlikely(PyDict_SetItemString(modules, "imate.traceinv._hutchinson_method_utilities", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __Pyx_TraceCall("__Pyx_PyMODINIT_FUNC PyInit__hutchinson_method_utilities(void)", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":14
 * # =======
 * 
 * import numpy             # <<<<<<<<<<<<<<
 * from scipy.sparse import isspmatrix
 * 
 */
  __Pyx_TraceLine(14,0,__PYX_ERR(0, 14, __pyx_L1_error))
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_numpy, __pyx_t_1) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":15
 * 
 * import numpy
 * from scipy.sparse import isspmatrix             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(15,0,__PYX_ERR(0, 15, __pyx_L1_error))
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_isspmatrix);
  __Pyx_GIVEREF(__pyx_n_s_isspmatrix);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_isspmatrix);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_scipy_sparse, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_isspmatrix); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_isspmatrix, __pyx_t_1) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":22
 * # ===============
 * 
 * def check_arguments(             # <<<<<<<<<<<<<<
 *         A,
 *         B,
 */
  __Pyx_TraceLine(22,0,__PYX_ERR(0, 22, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5imate_8traceinv_28_hutchinson_method_utilities_1check_arguments, 0, __pyx_n_s_check_arguments, NULL, __pyx_n_s_imate_traceinv__hutchinson_metho_2, __pyx_d, ((PyObject *)__pyx_codeobj_)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_check_arguments, __pyx_t_2) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":242
 * # =============
 * 
 * def print_summary(info):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */
  __Pyx_TraceLine(242,0,__PYX_ERR(0, 242, __pyx_L1_error))
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_5imate_8traceinv_28_hutchinson_method_utilities_3print_summary, 0, __pyx_n_s_print_summary, NULL, __pyx_n_s_imate_traceinv__hutchinson_metho_2, __pyx_d, ((PyObject *)__pyx_codeobj__61)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_print_summary, __pyx_t_2) < 0) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "imate/traceinv/_hutchinson_method_utilities.pyx":1
 * # SPDX-FileCopyrightText: Copyright 2021, Siavash Ameli <sameli@berkeley.edu>             # <<<<<<<<<<<<<<
 * # SPDX-License-Identifier: BSD-3-Clause
 * # SPDX-FileType: SOURCE
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(0, 1, __pyx_L1_error))
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_TraceReturn(Py_None, 0);

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init imate.traceinv._hutchinson_method_utilities", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init imate.traceinv._hutchinson_method_utilities");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* Profile */
#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   PyThreadState* tstate,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    PyObject *type, *value, *traceback;
    int retval;
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
    __Pyx_PyFrame_SetLineNumber(*frame, firstlineno);
    retval = 1;
    tstate->tracing++;
    __Pyx_SetTracing(tstate, 0);
    __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    __Pyx_SetTracing(tstate, (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc)));
    tstate->tracing--;
    if (retval) {
        __Pyx_ErrRestoreInState(tstate, type, value, traceback);
        return __Pyx_IsTracing(tstate, 0, 0) && retval;
    } else {
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(traceback);
        return -1;
    }
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyCodeObject *py_code = 0;
#if PY_MAJOR_VERSION >= 3
    py_code = PyCode_NewEmpty(srcfile, funcname, firstlineno);
    if (likely(py_code)) {
        py_code->co_flags |= CO_OPTIMIZED | CO_NEWLOCALS;
    }
#else
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    py_funcname = PyString_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    py_srcfile = PyString_FromString(srcfile);
    if (unlikely(!py_srcfile)) goto bad;
    py_code = PyCode_New(
        0,
        0,
        0,
        CO_OPTIMIZED | CO_NEWLOCALS,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
#endif
    return py_code;
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyFloatBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_SubtractCObj(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double a = floatval;
    double b, result;
    (void)inplace;
    (void)zerodivision_check;
    if (likely(PyFloat_CheckExact(op2))) {
        b = PyFloat_AS_DOUBLE(op2);
        
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        b = (double) PyInt_AS_LONG(op2);
        
    } else
    #endif
    if (likely(PyLong_CheckExact(op2))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        switch (size) {
            case  0: b = 0.0; break;
            case -1: b = -(double) digits[0]; break;
            case  1: b = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    b = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -2)
                            b = -b;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    b = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -3)
                            b = -b;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    b = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -4)
                            b = -b;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            default:
        #else
        {
        #endif
            b = PyLong_AsDouble(op2);
            if (unlikely(b == -1.0 && PyErr_Occurred())) return NULL;
            
        }
    } else {
        return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
    }
        
        PyFPE_START_PROTECT("subtract", return NULL)
        result = a - b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* Import */
  static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
  static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* PyObjectCallNoArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* GetTopmostException */
  #if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
  #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
  #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* DictGetItem */
  #if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyIntCompare */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* PyObjectFormatAndDecref */
  static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f) {
    if (unlikely(!s)) return NULL;
    if (likely(PyUnicode_CheckExact(s))) return s;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyString_CheckExact(s))) {
        PyObject *result = PyUnicode_FromEncodedObject(s, NULL, "strict");
        Py_DECREF(s);
        return result;
    }
    #endif
    return __Pyx_PyObject_FormatAndDecref(s, f);
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f) {
    PyObject *result = PyObject_Format(s, f);
    Py_DECREF(s);
    return result;
}

/* JoinPyUnicode */
  static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* ObjectGetItem */
  #if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* FetchCommonType */
  static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
  #include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
#if PY_MAJOR_VERSION < 3
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
#endif
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
  static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
  #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
