{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5a07104a",
   "metadata": {},
   "source": [
    "# [ imate.logdet](https://ameli.github.io/imate/generated/imate.logdet.html#imate.logdet)\n",
    "\n",
    "This notebook demonstrate interactive examples of the function [imate.logdet](https://ameli.github.io/imate/generated/imate.logdet.html#imate.logdet)\n",
    "\n",
    "### Sparse matrix\n",
    "\n",
    "We compute the log-determinant of a sample sparse Toeplitz matrix created by [imate.toeplitz()](https://ameli.github.io/imate/generated/imate.toeplitz.html#imate.toeplitz) function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "53ef3bdb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "69.31471805599453"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Import packages\n",
    "from imate import logdet\n",
    "from imate import toeplitz\n",
    "\n",
    "# Generate a sample matrix (a toeplitz matrix)\n",
    "A = toeplitz(2, 1, size=100)\n",
    "\n",
    "# Compute log-determinant with Cholesky method (default method)\n",
    "logdet(A)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bef99058",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "415.88830833596717"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Compute log-determinant of the Gramian of A^3:\n",
    "logdet(A, p=3, gram=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41564aee",
   "metadata": {},
   "source": [
    "### Output information\n",
    "\n",
    "Print information about the inner-computation:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3d0e8cf0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1386294.3611198922\n"
     ]
    }
   ],
   "source": [
    "ld, info = logdet(A, return_info=True)\n",
    "print(ld)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c143b313",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'device': {'num_cpu_threads': 8,\n",
      "            'num_gpu_devices': 0,\n",
      "            'num_gpu_multiprocessors': 0,\n",
      "            'num_gpu_threads_per_multiprocessor': 0},\n",
      " 'matrix': {'data_type': b'float64',\n",
      "            'density': 2.999998e-06,\n",
      "            'exponent': 1.0,\n",
      "            'gram': False,\n",
      "            'nnz': 2999998,\n",
      "            'num_inquiries': 1,\n",
      "            'size': 1000000,\n",
      "            'sparse': True},\n",
      " 'solver': {'cholmod_used': True, 'method': 'cholesky', 'version': '0.13.0'},\n",
      " 'time': {'alg_wall_time': 0.24651666499994462,\n",
      "          'cpu_proc_time': 0.24782623600000875,\n",
      "          'tot_wall_time': 0.24651666499994462}}\n"
     ]
    }
   ],
   "source": [
    "# Print dictionary neatly using pprint\n",
    "from pprint import pprint\n",
    "pprint(info)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93f746ec",
   "metadata": {},
   "source": [
    "### Very large matrix\n",
    "\n",
    "We compute log-determinant of a very large sparse matrix using slq method. This method does not compute log-determinant exactly, rather, the result is an approximation using Monte-Carlo sampling. Here we use at least 100 samples."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "107b2452",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1386263.6726923704\n"
     ]
    }
   ],
   "source": [
    "# Generate a matrix of size one million\n",
    "A = toeplitz(2, 1, size=1000000, gram=True)\n",
    "\n",
    "# Approximate log-determinant using stochastic Lanczos quadrature\n",
    "# with at least 100 Monte-Carlo sampling\n",
    "ld, info = logdet(A, method='slq', min_num_samples=100, \n",
    "                  max_num_samples=200, return_info=True)\n",
    "print(ld)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "57d6c01d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'alg_wall_time': 17.218212127685547,\n",
      " 'cpu_proc_time': 126.28231630299999,\n",
      " 'tot_wall_time': 17.233046524999736}\n"
     ]
    }
   ],
   "source": [
    "# Find the time it took to compute the above\n",
    "pprint(info['time'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e0d94720",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
